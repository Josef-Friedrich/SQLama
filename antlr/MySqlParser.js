// Generated from MySqlParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import MySqlParserListener from './MySqlParserListener.js';
const serializedATN = [4,1,1161,7441,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,1,0,3,0,724,8,0,1,0,1,0,3,0,728,8,0,
1,0,1,0,1,1,1,1,1,1,3,1,735,8,1,1,1,3,1,738,8,1,1,1,5,1,741,8,1,10,1,12,
1,744,9,1,1,1,1,1,1,1,3,1,749,8,1,1,1,3,1,752,8,1,1,1,3,1,755,8,1,1,2,1,
2,1,2,1,2,1,2,1,2,1,2,3,2,764,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,806,8,4,1,5,1,5,1,
5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,821,8,5,1,6,1,6,1,6,1,6,1,
6,1,6,1,6,1,6,1,6,3,6,832,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,3,7,849,8,7,1,8,1,8,1,8,3,8,854,8,8,1,9,1,9,1,9,1,9,1,
9,1,9,1,9,1,9,1,9,1,9,3,9,866,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
10,1,10,1,10,3,10,893,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,902,8,
11,1,12,1,12,1,12,3,12,907,8,12,1,12,1,12,5,12,911,8,12,10,12,12,12,914,
9,12,1,13,1,13,3,13,918,8,13,1,13,1,13,3,13,922,8,13,1,13,1,13,1,13,1,13,
1,13,1,13,1,13,3,13,931,8,13,1,13,3,13,934,8,13,1,13,3,13,937,8,13,1,13,
1,13,3,13,941,8,13,1,13,1,13,1,13,1,14,1,14,3,14,948,8,14,1,14,3,14,951,
8,14,1,14,1,14,1,14,3,14,956,8,14,1,14,1,14,1,14,1,14,5,14,962,8,14,10,14,
12,14,965,9,14,1,14,1,14,3,14,969,8,14,1,14,1,14,1,14,3,14,974,8,14,1,14,
5,14,977,8,14,10,14,12,14,980,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
15,1,15,3,15,991,8,15,1,15,3,15,994,8,15,1,15,1,15,3,15,998,8,15,1,15,3,
15,1001,8,15,1,15,1,15,3,15,1005,8,15,1,15,3,15,1008,8,15,1,15,1,15,3,15,
1012,8,15,1,15,3,15,1015,8,15,1,15,3,15,1018,8,15,1,15,1,15,3,15,1022,8,
15,1,15,3,15,1025,8,15,1,15,1,15,3,15,1029,8,15,1,15,1,15,1,16,1,16,3,16,
1035,8,16,1,16,1,16,1,16,1,16,3,16,1041,8,16,1,16,1,16,5,16,1045,8,16,10,
16,12,16,1048,9,16,1,16,1,16,5,16,1052,8,16,10,16,12,16,1055,9,16,1,16,1,
16,1,17,1,17,3,17,1061,8,17,1,17,3,17,1064,8,17,1,17,1,17,3,17,1068,8,17,
1,17,1,17,1,17,3,17,1073,8,17,1,17,1,17,5,17,1077,8,17,10,17,12,17,1080,
9,17,1,17,1,17,1,17,1,17,5,17,1086,8,17,10,17,12,17,1089,9,17,1,17,1,17,
3,17,1093,8,17,1,18,1,18,1,18,3,18,1098,8,18,1,18,1,18,1,18,5,18,1103,8,
18,10,18,12,18,1106,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,5,19,1120,8,19,10,19,12,19,1123,9,19,1,19,1,19,1,20,1,20,3,
20,1129,8,20,1,20,1,20,3,20,1133,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,3,20,1143,8,20,1,20,1,20,3,20,1147,8,20,1,20,1,20,3,20,1151,8,20,1,
20,1,20,3,20,1155,8,20,1,20,1,20,3,20,1159,8,20,1,20,5,20,1162,8,20,10,20,
12,20,1165,9,20,3,20,1167,8,20,1,20,3,20,1170,8,20,1,20,3,20,1173,8,20,1,
20,3,20,1176,8,20,1,20,1,20,1,20,1,20,3,20,1182,8,20,1,20,1,20,3,20,1186,
8,20,1,20,1,20,1,20,1,20,3,20,1192,8,20,1,20,5,20,1195,8,20,10,20,12,20,
1198,9,20,3,20,1200,8,20,1,20,3,20,1203,8,20,3,20,1205,8,20,1,21,1,21,1,
21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1216,8,21,1,21,1,21,3,21,1220,8,21,
1,21,3,21,1223,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
22,1,22,3,22,1237,8,22,1,22,3,22,1240,8,22,1,22,1,22,3,22,1244,8,22,1,22,
3,22,1247,8,22,1,22,1,22,3,22,1251,8,22,1,22,3,22,1254,8,22,1,22,1,22,3,
22,1258,8,22,1,22,3,22,1261,8,22,1,22,1,22,3,22,1265,8,22,1,22,3,22,1268,
8,22,1,22,3,22,1271,8,22,1,22,1,22,3,22,1275,8,22,1,22,3,22,1278,8,22,1,
22,1,22,3,22,1282,8,22,1,22,1,22,1,23,1,23,3,23,1288,8,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1301,8,23,1,23,1,23,1,24,1,
24,3,24,1307,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,5,25,1316,8,25,10,25,
12,25,1319,9,25,1,25,1,25,3,25,1323,8,25,1,25,1,25,1,25,1,25,1,25,1,25,3,
25,1331,8,25,1,26,1,26,1,27,1,27,1,28,1,28,3,28,1339,8,28,1,28,1,28,1,28,
3,28,1344,8,28,1,28,3,28,1347,8,28,1,28,1,28,1,28,3,28,1352,8,28,1,28,1,
28,1,28,1,28,1,28,1,28,3,28,1360,8,28,1,28,1,28,1,28,3,28,1365,8,28,1,28,
1,28,1,28,1,28,3,28,1371,8,28,1,28,1,28,1,28,3,28,1376,8,28,1,28,1,28,3,
28,1380,8,28,3,28,1382,8,28,1,29,3,29,1385,8,29,1,29,1,29,3,29,1389,8,29,
1,29,1,29,3,29,1393,8,29,1,29,3,29,1396,8,29,1,29,1,29,3,29,1400,8,29,1,
29,1,29,3,29,1404,8,29,1,29,1,29,3,29,1408,8,29,1,29,1,29,1,29,1,29,3,29,
1414,8,29,1,29,3,29,1417,8,29,1,30,1,30,1,30,1,30,1,30,3,30,1424,8,30,1,
31,1,31,1,31,3,31,1429,8,31,1,32,1,32,1,32,1,32,3,32,1435,8,32,1,33,1,33,
1,33,5,33,1440,8,33,10,33,12,33,1443,9,33,1,33,1,33,1,33,3,33,1448,8,33,
1,33,1,33,1,33,1,33,5,33,1454,8,33,10,33,12,33,1457,9,33,3,33,1459,8,33,
1,33,1,33,1,33,5,33,1464,8,33,10,33,12,33,1467,9,33,3,33,1469,8,33,3,33,
1471,8,33,1,34,1,34,1,34,1,34,3,34,1477,8,34,1,35,1,35,1,35,1,35,3,35,1483,
8,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
36,1,36,3,36,1500,8,36,1,37,1,37,1,37,1,37,1,37,3,37,1507,8,37,1,38,1,38,
1,38,1,39,1,39,3,39,1514,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
39,1,39,3,39,1526,8,39,1,39,1,39,1,39,3,39,1531,8,39,1,39,3,39,1534,8,39,
1,40,3,40,1537,8,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,
42,3,42,1550,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
3,42,1563,8,42,1,42,1,42,1,42,3,42,1568,8,42,1,43,1,43,1,43,1,43,1,43,1,
43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1584,8,43,1,44,1,44,1,44,
1,44,5,44,1590,8,44,10,44,12,44,1593,9,44,1,44,1,44,1,45,1,45,1,45,1,45,
1,45,3,45,1602,8,45,1,45,3,45,1605,8,45,1,45,3,45,1608,8,45,1,46,1,46,5,
46,1612,8,46,10,46,12,46,1615,9,46,1,46,3,46,1618,8,46,1,46,3,46,1621,8,
46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1632,8,47,1,47,3,47,
1635,8,47,1,47,1,47,1,47,3,47,1640,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
47,1,47,1,47,1,47,1,47,3,47,1653,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1660,
8,47,1,47,1,47,1,47,1,47,1,47,3,47,1667,8,47,3,47,1669,8,47,1,47,1,47,1,
47,1,47,1,47,3,47,1676,8,47,1,48,1,48,3,48,1680,8,48,3,48,1682,8,48,1,48,
1,48,1,48,3,48,1687,8,48,1,48,3,48,1690,8,48,1,48,1,48,5,48,1694,8,48,10,
48,12,48,1697,9,48,1,48,1,48,3,48,1701,8,48,3,48,1703,8,48,1,48,1,48,3,48,
1707,8,48,1,48,3,48,1710,8,48,1,48,3,48,1713,8,48,1,48,1,48,5,48,1717,8,
48,10,48,12,48,1720,9,48,1,48,1,48,3,48,1724,8,48,3,48,1726,8,48,1,48,1,
48,1,48,3,48,1731,8,48,1,48,1,48,1,48,1,48,1,48,3,48,1738,8,48,3,48,1740,
8,48,1,48,1,48,1,48,1,48,1,48,3,48,1747,8,48,1,49,1,49,1,49,3,49,1752,8,
49,1,49,1,49,3,49,1756,8,49,1,49,3,49,1759,8,49,1,50,1,50,1,50,1,50,1,50,
1,50,3,50,1767,8,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1775,8,50,3,50,1777,
8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1787,8,51,1,52,1,52,3,
52,1791,8,52,1,52,3,52,1794,8,52,1,52,1,52,5,52,1798,8,52,10,52,12,52,1801,
9,52,1,52,1,52,3,52,1805,8,52,1,52,3,52,1808,8,52,1,52,1,52,5,52,1812,8,
52,10,52,12,52,1815,9,52,3,52,1817,8,52,1,53,1,53,3,53,1821,8,53,1,53,3,
53,1824,8,53,1,53,1,53,3,53,1828,8,53,1,53,1,53,1,53,3,53,1833,8,53,1,53,
1,53,1,53,3,53,1838,8,53,1,53,1,53,1,53,3,53,1843,8,53,1,53,1,53,3,53,1847,
8,53,1,53,1,53,3,53,1851,8,53,1,53,1,53,3,53,1855,8,53,1,53,1,53,3,53,1859,
8,53,1,53,1,53,3,53,1863,8,53,1,53,1,53,3,53,1867,8,53,1,53,1,53,1,53,3,
53,1872,8,53,1,53,1,53,1,53,3,53,1877,8,53,1,53,1,53,1,53,3,53,1882,8,53,
1,53,1,53,1,53,1,53,3,53,1888,8,53,1,53,1,53,1,53,3,53,1893,8,53,1,53,1,
53,1,53,3,53,1898,8,53,1,53,1,53,1,53,3,53,1903,8,53,1,53,1,53,1,53,3,53,
1908,8,53,1,53,1,53,1,53,3,53,1913,8,53,1,53,1,53,1,53,1,53,3,53,1919,8,
53,1,53,1,53,1,53,3,53,1924,8,53,1,53,1,53,1,53,3,53,1929,8,53,1,53,1,53,
1,53,3,53,1934,8,53,1,53,1,53,1,53,3,53,1939,8,53,1,53,1,53,1,53,3,53,1944,
8,53,1,53,1,53,1,53,3,53,1949,8,53,1,53,1,53,1,53,3,53,1954,8,53,1,53,1,
53,1,53,1,53,1,53,3,53,1961,8,53,1,53,1,53,1,53,3,53,1966,8,53,1,53,1,53,
1,53,3,53,1971,8,53,1,53,1,53,1,53,3,53,1976,8,53,1,53,1,53,3,53,1980,8,
53,1,53,1,53,1,53,3,53,1985,8,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,1993,
8,53,1,53,1,53,1,53,3,53,1998,8,53,1,53,1,53,1,53,1,53,3,53,2004,8,53,1,
54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,3,56,2016,8,56,1,56,1,56,
1,56,1,56,1,56,3,56,2023,8,56,3,56,2025,8,56,1,56,1,56,1,56,1,56,5,56,2031,
8,56,10,56,12,56,2034,9,56,1,56,1,56,3,56,2038,8,56,1,57,3,57,2041,8,57,
1,57,1,57,1,57,1,57,1,57,1,57,3,57,2049,8,57,1,57,1,57,1,57,1,57,3,57,2055,
8,57,1,57,1,57,3,57,2059,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,3,57,2072,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
1,57,3,57,2084,8,57,3,57,2086,8,57,1,58,3,58,2089,8,58,1,58,1,58,1,58,1,
58,1,58,1,58,3,58,2097,8,58,1,58,1,58,1,58,1,58,3,58,2103,8,58,1,58,1,58,
1,58,1,58,3,58,2109,8,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,
59,2120,8,59,10,59,12,59,2123,9,59,1,59,1,59,5,59,2127,8,59,10,59,12,59,
2130,9,59,1,59,1,59,1,59,1,59,5,59,2136,8,59,10,59,12,59,2139,9,59,1,59,
1,59,3,59,2143,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2152,8,59,10,
59,12,59,2155,9,59,1,59,1,59,1,59,1,59,5,59,2161,8,59,10,59,12,59,2164,9,
59,1,59,1,59,3,59,2168,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,
2178,8,59,10,59,12,59,2181,9,59,1,59,1,59,5,59,2185,8,59,10,59,12,59,2188,
9,59,1,59,1,59,1,59,1,59,5,59,2194,8,59,10,59,12,59,2197,9,59,1,59,1,59,
3,59,2201,8,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,2211,8,59,10,
59,12,59,2214,9,59,1,59,1,59,5,59,2218,8,59,10,59,12,59,2221,9,59,1,59,1,
59,1,59,1,59,5,59,2227,8,59,10,59,12,59,2230,9,59,1,59,1,59,3,59,2234,8,
59,1,59,1,59,1,59,5,59,2239,8,59,10,59,12,59,2242,9,59,1,59,1,59,1,59,1,
59,5,59,2248,8,59,10,59,12,59,2251,9,59,1,59,1,59,3,59,2255,8,59,3,59,2257,
8,59,1,60,1,60,1,60,3,60,2262,8,60,1,61,1,61,1,61,1,61,4,61,2268,8,61,11,
61,12,61,2269,1,61,1,61,1,62,1,62,1,62,5,62,2277,8,62,10,62,12,62,2280,9,
62,1,63,3,63,2283,8,63,1,63,3,63,2286,8,63,1,63,1,63,3,63,2290,8,63,1,63,
1,63,1,63,3,63,2295,8,63,1,63,1,63,1,63,1,63,3,63,2301,8,63,1,63,1,63,1,
63,1,63,3,63,2307,8,63,1,63,1,63,1,63,3,63,2312,8,63,1,63,1,63,1,63,3,63,
2317,8,63,1,63,1,63,1,63,3,63,2322,8,63,1,63,1,63,1,63,3,63,2327,8,63,1,
63,3,63,2330,8,63,1,64,1,64,1,64,3,64,2335,8,64,1,64,4,64,2338,8,64,11,64,
12,64,2339,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,2350,8,64,1,65,1,
65,3,65,2354,8,65,1,65,1,65,1,65,1,65,1,65,3,65,2361,8,65,1,65,1,65,1,65,
3,65,2366,8,65,1,65,3,65,2369,8,65,1,65,1,65,1,65,3,65,2374,8,65,1,65,3,
65,2377,8,65,1,65,1,65,3,65,2381,8,65,1,65,1,65,3,65,2385,8,65,1,66,1,66,
1,66,1,66,5,66,2391,8,66,10,66,12,66,2394,9,66,1,67,1,67,1,67,1,67,1,67,
1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,2412,8,68,1,
68,3,68,2415,8,68,1,68,3,68,2418,8,68,1,68,1,68,3,68,2422,8,68,1,68,1,68,
1,69,1,69,1,69,1,69,5,69,2430,8,69,10,69,12,69,2433,9,69,1,70,1,70,1,70,
1,70,1,70,1,70,1,70,1,70,5,70,2443,8,70,10,70,12,70,2446,9,70,1,70,1,70,
1,71,1,71,3,71,2452,8,71,1,71,3,71,2455,8,71,1,71,1,71,1,71,3,71,2460,8,
71,1,71,1,71,1,71,5,71,2465,8,71,10,71,12,71,2468,9,71,3,71,2470,8,71,1,
71,3,71,2473,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2484,
8,72,1,72,3,72,2487,8,72,1,72,1,72,3,72,2491,8,72,1,72,1,72,1,73,1,73,1,
73,1,73,3,73,2499,8,73,1,73,3,73,2502,8,73,1,73,1,73,1,73,3,73,2507,8,73,
1,73,1,73,1,73,1,73,1,73,1,73,3,73,2515,8,73,1,73,1,73,1,73,1,73,3,73,2521,
8,73,1,73,1,73,3,73,2525,8,73,1,74,1,74,3,74,2529,8,74,1,74,5,74,2532,8,
74,10,74,12,74,2535,9,74,1,74,1,74,3,74,2539,8,74,1,74,1,74,1,74,1,74,1,
74,3,74,2546,8,74,1,74,1,74,3,74,2550,8,74,1,74,1,74,1,74,1,74,1,74,1,74,
1,74,5,74,2559,8,74,10,74,12,74,2562,9,74,1,74,1,74,1,74,1,74,1,74,3,74,
2569,8,74,1,74,3,74,2572,8,74,1,74,1,74,5,74,2576,8,74,10,74,12,74,2579,
9,74,1,74,1,74,1,74,3,74,2584,8,74,3,74,2586,8,74,1,74,1,74,1,74,3,74,2591,
8,74,1,74,3,74,2594,8,74,1,74,1,74,5,74,2598,8,74,10,74,12,74,2601,9,74,
1,74,1,74,1,74,3,74,2606,8,74,3,74,2608,8,74,1,74,1,74,3,74,2612,8,74,1,
74,3,74,2615,8,74,1,74,3,74,2618,8,74,1,74,1,74,5,74,2622,8,74,10,74,12,
74,2625,9,74,1,74,1,74,1,74,3,74,2630,8,74,1,74,3,74,2633,8,74,1,74,1,74,
5,74,2637,8,74,10,74,12,74,2640,9,74,1,74,1,74,1,74,3,74,2645,8,74,3,74,
2647,8,74,1,74,1,74,1,74,3,74,2652,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,
74,2660,8,74,3,74,2662,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2671,
8,74,1,74,3,74,2674,8,74,1,74,3,74,2677,8,74,1,74,1,74,1,74,3,74,2682,8,
74,3,74,2684,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2693,8,74,1,74,
3,74,2696,8,74,1,74,3,74,2699,8,74,1,74,1,74,1,74,3,74,2704,8,74,3,74,2706,
8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2715,8,74,1,74,1,74,1,74,3,
74,2720,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2728,8,74,1,74,1,74,3,74,
2732,8,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2740,8,74,1,74,1,74,1,74,1,
74,1,74,1,74,1,74,1,74,3,74,2750,8,74,1,74,1,74,1,74,3,74,2755,8,74,1,74,
1,74,1,74,1,74,1,74,3,74,2762,8,74,1,74,1,74,3,74,2766,8,74,1,74,1,74,3,
74,2770,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
1,74,1,74,1,74,1,74,1,74,3,74,2789,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
74,1,74,3,74,2799,8,74,1,74,1,74,1,74,1,74,3,74,2805,8,74,1,74,1,74,1,74,
1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2822,8,
74,1,74,1,74,3,74,2826,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,
2836,8,74,1,74,1,74,1,74,3,74,2841,8,74,1,74,3,74,2844,8,74,1,74,1,74,1,
74,1,74,1,74,1,74,1,74,3,74,2853,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
1,74,1,74,3,74,2864,8,74,1,74,1,74,1,74,1,74,5,74,2870,8,74,10,74,12,74,
2873,9,74,1,74,1,74,1,74,3,74,2878,8,74,1,75,1,75,1,75,1,75,1,75,1,75,5,
75,2886,8,75,10,75,12,75,2889,9,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
75,1,75,3,75,2900,8,75,1,75,1,75,1,75,1,75,1,75,3,75,2907,8,75,1,75,1,75,
1,75,1,75,1,75,3,75,2914,8,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
75,1,75,1,75,5,75,2927,8,75,10,75,12,75,2930,9,75,1,75,1,75,1,75,1,75,1,
75,1,75,1,75,1,75,1,75,1,75,3,75,2942,8,75,1,75,1,75,1,75,1,75,3,75,2948,
8,75,1,75,1,75,1,75,1,75,3,75,2954,8,75,1,75,1,75,1,75,1,75,3,75,2960,8,
75,1,75,1,75,1,75,1,75,3,75,2966,8,75,1,75,1,75,1,75,1,75,3,75,2972,8,75,
1,75,1,75,1,75,1,75,3,75,2978,8,75,1,76,1,76,1,76,3,76,2983,8,76,1,76,1,
76,1,77,1,77,1,77,3,77,2990,8,77,1,77,1,77,1,78,1,78,1,78,3,78,2997,8,78,
1,78,1,78,1,78,1,78,1,78,3,78,3004,8,78,1,78,1,78,1,78,3,78,3009,8,78,1,
78,5,78,3012,8,78,10,78,12,78,3015,9,78,1,79,1,79,1,79,1,79,1,79,1,79,1,
79,1,79,1,80,1,80,1,80,3,80,3028,8,80,1,80,1,80,1,81,1,81,1,81,3,81,3035,
8,81,1,81,1,81,1,82,1,82,1,82,3,82,3042,8,82,1,82,1,82,1,83,1,83,3,83,3048,
8,83,1,83,1,83,3,83,3052,8,83,1,83,1,83,3,83,3056,8,83,1,84,1,84,1,84,1,
84,1,84,3,84,3063,8,84,1,84,3,84,3066,8,84,1,85,1,85,1,85,3,85,3071,8,85,
1,85,1,85,1,86,1,86,1,86,3,86,3078,8,86,1,86,1,86,1,86,5,86,3083,8,86,10,
86,12,86,3086,9,86,1,86,3,86,3089,8,86,1,87,1,87,1,87,3,87,3094,8,87,1,87,
1,87,1,87,5,87,3099,8,87,10,87,12,87,3102,9,87,1,88,1,88,1,88,1,88,1,88,
1,88,1,88,1,88,5,88,3112,8,88,10,88,12,88,3115,9,88,3,88,3117,8,88,1,88,
1,88,1,88,3,88,3122,8,88,1,88,1,88,1,88,3,88,3127,8,88,5,88,3129,8,88,10,
88,12,88,3132,9,88,1,88,1,88,1,88,3,88,3137,8,88,1,89,1,89,1,89,1,89,1,89,
5,89,3144,8,89,10,89,12,89,3147,9,89,1,90,1,90,1,90,1,90,1,91,1,91,3,91,
3155,8,91,1,91,1,91,1,92,1,92,1,92,1,92,1,92,3,92,3164,8,92,1,92,3,92,3167,
8,92,1,93,1,93,3,93,3171,8,93,1,94,1,94,1,94,1,95,1,95,1,95,1,95,3,95,3180,
8,95,1,96,1,96,3,96,3184,8,96,1,96,3,96,3187,8,96,1,96,3,96,3190,8,96,1,
96,1,96,1,96,1,96,3,96,3196,8,96,1,96,3,96,3199,8,96,1,96,1,96,3,96,3203,
8,96,1,96,3,96,3206,8,96,1,96,1,96,3,96,3210,8,96,1,96,3,96,3213,8,96,1,
96,1,96,1,96,1,96,5,96,3219,8,96,10,96,12,96,3222,9,96,3,96,3224,8,96,1,
96,1,96,1,96,1,96,1,96,1,96,1,96,5,96,3233,8,96,10,96,12,96,3236,9,96,3,
96,3238,8,96,1,97,1,97,1,97,3,97,3243,8,97,1,97,3,97,3246,8,97,1,97,1,97,
1,97,3,97,3251,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,3261,8,
97,1,97,1,97,1,97,3,97,3266,8,97,1,97,1,97,4,97,3270,8,97,11,97,12,97,3271,
3,97,3274,8,97,1,97,1,97,4,97,3278,8,97,11,97,12,97,3279,3,97,3282,8,97,
1,97,1,97,1,97,1,97,3,97,3288,8,97,1,97,1,97,1,97,1,97,5,97,3294,8,97,10,
97,12,97,3297,9,97,1,97,1,97,3,97,3301,8,97,1,97,1,97,1,97,1,97,5,97,3307,
8,97,10,97,12,97,3310,9,97,3,97,3312,8,97,1,98,1,98,1,98,3,98,3317,8,98,
1,98,3,98,3320,8,98,1,98,1,98,1,98,3,98,3325,8,98,1,98,1,98,1,98,1,98,1,
98,1,98,3,98,3333,8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,3341,8,98,1,98,
1,98,1,98,1,98,3,98,3347,8,98,1,98,1,98,1,98,1,98,5,98,3353,8,98,10,98,12,
98,3356,9,98,1,98,1,98,3,98,3360,8,98,1,98,1,98,1,98,1,98,5,98,3366,8,98,
10,98,12,98,3369,9,98,3,98,3371,8,98,1,99,1,99,3,99,3375,8,99,1,99,3,99,
3378,8,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,3386,8,99,1,99,1,99,1,99,1,
99,3,99,3392,8,99,1,99,1,99,1,99,1,99,1,99,5,99,3399,8,99,10,99,12,99,3402,
9,99,3,99,3404,8,99,1,100,1,100,3,100,3408,8,100,1,100,1,100,3,100,3412,
8,100,1,100,1,100,3,100,3416,8,100,1,100,4,100,3419,8,100,11,100,12,100,
3420,1,100,1,100,3,100,3425,8,100,1,100,1,100,3,100,3429,8,100,3,100,3431,
8,100,1,100,3,100,3434,8,100,1,100,3,100,3437,8,100,1,100,3,100,3440,8,100,
1,100,1,100,4,100,3444,8,100,11,100,12,100,3445,1,100,1,100,3,100,3450,8,
100,1,100,3,100,3453,8,100,1,100,3,100,3456,8,100,1,100,3,100,3459,8,100,
1,100,3,100,3462,8,100,1,100,1,100,1,100,4,100,3467,8,100,11,100,12,100,
3468,3,100,3471,8,100,1,101,1,101,3,101,3475,8,101,1,102,1,102,1,102,3,102,
3480,8,102,1,102,1,102,1,102,1,102,3,102,3486,8,102,1,102,5,102,3489,8,102,
10,102,12,102,3492,9,102,1,103,1,103,1,103,1,103,3,103,3498,8,103,1,103,
1,103,1,103,1,103,3,103,3504,8,103,1,103,5,103,3507,8,103,10,103,12,103,
3510,9,103,3,103,3512,8,103,1,104,1,104,1,104,1,104,3,104,3518,8,104,1,105,
1,105,3,105,3522,8,105,1,106,1,106,1,106,1,106,1,106,1,106,3,106,3530,8,
106,1,107,1,107,3,107,3534,8,107,1,107,3,107,3537,8,107,1,107,3,107,3540,
8,107,1,107,1,107,1,107,3,107,3545,8,107,1,107,3,107,3548,8,107,1,107,1,
107,1,107,1,107,1,107,3,107,3555,8,107,1,107,1,107,3,107,3559,8,107,1,107,
3,107,3562,8,107,1,107,1,107,3,107,3566,8,107,1,108,1,108,3,108,3570,8,108,
1,108,3,108,3573,8,108,1,108,3,108,3576,8,108,1,108,1,108,1,108,3,108,3581,
8,108,1,108,1,108,1,108,1,108,3,108,3587,8,108,5,108,3589,8,108,10,108,12,
108,3592,9,108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,3601,8,108,
1,108,1,108,1,108,1,108,3,108,3607,8,108,5,108,3609,8,108,10,108,12,108,
3612,9,108,1,108,1,108,1,108,3,108,3617,8,108,1,108,1,108,3,108,3621,8,108,
1,109,1,109,1,109,1,109,3,109,3627,8,109,1,109,3,109,3630,8,109,1,110,1,
110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,1,110,3,110,3642,8,110,1,110,
1,110,3,110,3646,8,110,1,110,1,110,3,110,3650,8,110,1,111,1,111,1,111,1,
111,1,111,1,111,3,111,3658,8,111,1,111,1,111,3,111,3662,8,111,1,112,1,112,
1,112,1,112,1,113,1,113,3,113,3670,8,113,1,113,3,113,3673,8,113,1,113,1,
113,3,113,3677,8,113,1,113,3,113,3680,8,113,1,113,1,113,1,113,1,113,5,113,
3686,8,113,10,113,12,113,3689,9,113,1,113,1,113,3,113,3693,8,113,1,113,3,
113,3696,8,113,1,113,3,113,3699,8,113,1,114,1,114,3,114,3703,8,114,1,114,
3,114,3706,8,114,1,114,1,114,1,114,1,114,1,114,5,114,3713,8,114,10,114,12,
114,3716,9,114,1,114,1,114,3,114,3720,8,114,1,115,1,115,1,115,1,115,1,115,
5,115,3727,8,115,10,115,12,115,3730,9,115,1,116,1,116,3,116,3734,8,116,1,
117,1,117,1,117,5,117,3739,8,117,10,117,12,117,3742,9,117,1,118,1,118,5,
118,3746,8,118,10,118,12,118,3749,9,118,1,118,1,118,1,118,5,118,3754,8,118,
10,118,12,118,3757,9,118,1,118,1,118,1,118,3,118,3762,8,118,1,119,1,119,
1,119,1,119,1,119,1,119,3,119,3770,8,119,1,119,3,119,3773,8,119,1,119,3,
119,3776,8,119,1,119,1,119,1,119,5,119,3781,8,119,10,119,12,119,3784,9,119,
3,119,3786,8,119,1,119,1,119,1,119,1,119,1,119,3,119,3793,8,119,1,119,3,
119,3796,8,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,3804,8,119,1,120,
1,120,1,120,1,120,3,120,3810,8,120,1,120,1,120,1,120,1,120,1,121,1,121,1,
121,1,121,1,121,3,121,3821,8,121,1,122,3,122,3824,8,122,1,122,1,122,3,122,
3828,8,122,1,122,1,122,5,122,3832,8,122,10,122,12,122,3835,9,122,1,122,1,
122,1,122,1,122,5,122,3841,8,122,10,122,12,122,3844,9,122,1,122,1,122,3,
122,3848,8,122,1,122,1,122,3,122,3852,8,122,1,122,1,122,5,122,3856,8,122,
10,122,12,122,3859,9,122,1,122,1,122,1,122,3,122,3864,8,122,3,122,3866,8,
122,1,122,1,122,3,122,3870,8,122,1,123,1,123,1,123,1,123,1,123,1,123,1,123,
3,123,3879,8,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,3889,
8,124,1,125,1,125,1,125,1,125,1,125,1,125,1,125,1,125,3,125,3899,8,125,1,
126,1,126,5,126,3903,8,126,10,126,12,126,3906,9,126,1,126,1,126,3,126,3910,
8,126,1,126,1,126,3,126,3914,8,126,1,126,3,126,3917,8,126,1,126,3,126,3920,
8,126,1,126,3,126,3923,8,126,1,126,3,126,3926,8,126,1,126,1,126,5,126,3930,
8,126,10,126,12,126,3933,9,126,1,126,1,126,1,126,3,126,3938,8,126,1,126,
3,126,3941,8,126,1,126,3,126,3944,8,126,1,126,3,126,3947,8,126,1,126,3,126,
3950,8,126,1,126,3,126,3953,8,126,3,126,3955,8,126,1,127,1,127,5,127,3959,
8,127,10,127,12,127,3962,9,127,1,127,1,127,1,127,3,127,3967,8,127,1,127,
3,127,3970,8,127,1,127,3,127,3973,8,127,1,127,3,127,3976,8,127,1,127,3,127,
3979,8,127,1,128,1,128,3,128,3983,8,128,1,128,1,128,1,129,1,129,3,129,3989,
8,129,1,129,1,129,3,129,3993,8,129,1,130,1,130,1,130,1,130,1,130,1,130,3,
130,4001,8,130,1,130,1,130,3,130,4005,8,130,1,130,3,130,4008,8,130,3,130,
4010,8,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,
131,3,131,4023,8,131,1,131,3,131,4026,8,131,1,132,1,132,1,132,5,132,4031,
8,132,10,132,12,132,4034,9,132,1,133,1,133,1,133,1,133,1,133,1,133,1,133,
3,133,4043,8,133,1,133,3,133,4046,8,133,1,133,1,133,1,133,3,133,4051,8,133,
3,133,4053,8,133,1,133,1,133,3,133,4057,8,133,1,133,1,133,1,133,1,133,1,
133,1,133,3,133,4065,8,133,1,134,1,134,1,134,1,134,3,134,4071,8,134,1,134,
1,134,1,134,1,135,1,135,1,135,1,135,3,135,4080,8,135,1,135,1,135,1,135,1,
136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,4093,8,136,1,137,1,137,
3,137,4097,8,137,1,137,1,137,5,137,4101,8,137,10,137,12,137,4104,9,137,1,
138,1,138,1,138,1,138,1,138,1,138,3,138,4112,8,138,1,138,3,138,4115,8,138,
1,138,1,138,3,138,4119,8,138,1,138,3,138,4122,8,138,1,138,1,138,3,138,4126,
8,138,1,138,1,138,3,138,4130,8,138,1,138,3,138,4133,8,138,3,138,4135,8,138,
1,139,1,139,1,139,1,139,5,139,4141,8,139,10,139,12,139,4144,9,139,1,139,
1,139,1,139,1,139,1,139,1,139,1,139,1,139,1,139,3,139,4155,8,139,1,139,1,
139,4,139,4159,8,139,11,139,12,139,4160,3,139,4163,8,139,1,139,1,139,4,139,
4167,8,139,11,139,12,139,4168,3,139,4171,8,139,3,139,4173,8,139,1,140,1,
140,1,140,1,140,3,140,4179,8,140,1,140,1,140,1,140,1,140,1,140,1,140,3,140,
4187,8,140,1,141,1,141,1,141,1,141,1,141,1,141,3,141,4195,8,141,1,142,1,
142,3,142,4199,8,142,1,142,1,142,3,142,4203,8,142,1,143,1,143,1,143,1,143,
1,143,5,143,4210,8,143,10,143,12,143,4213,9,143,1,143,1,143,3,143,4217,8,
143,1,144,1,144,1,144,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,145,1,
145,1,145,1,145,1,145,1,145,5,145,4235,8,145,10,145,12,145,4238,9,145,1,
146,1,146,3,146,4242,8,146,1,147,1,147,1,147,1,147,3,147,4248,8,147,1,147,
1,147,1,147,1,147,1,147,3,147,4255,8,147,1,148,1,148,1,148,3,148,4260,8,
148,1,149,1,149,1,149,1,149,1,149,5,149,4267,8,149,10,149,12,149,4270,9,
149,3,149,4272,8,149,1,150,1,150,3,150,4276,8,150,1,151,1,151,3,151,4280,
8,151,1,151,1,151,3,151,4284,8,151,1,151,3,151,4287,8,151,1,151,3,151,4290,
8,151,1,151,3,151,4293,8,151,1,152,1,152,3,152,4297,8,152,1,152,1,152,3,
152,4301,8,152,1,152,3,152,4304,8,152,1,152,3,152,4307,8,152,1,152,3,152,
4310,8,152,1,153,1,153,1,153,1,154,1,154,3,154,4317,8,154,1,154,1,154,3,
154,4321,8,154,1,154,1,154,1,155,1,155,1,155,1,155,1,156,1,156,1,156,1,156,
1,156,5,156,4334,8,156,10,156,12,156,4337,9,156,1,156,3,156,4340,8,156,1,
157,1,157,1,157,1,158,1,158,1,158,1,158,1,158,1,159,1,159,3,159,4352,8,159,
1,159,1,159,1,159,1,159,5,159,4358,8,159,10,159,12,159,4361,9,159,1,160,
1,160,1,160,1,160,1,160,1,160,1,160,3,160,4370,8,160,1,161,1,161,3,161,4374,
8,161,1,161,3,161,4377,8,161,1,161,1,161,1,162,1,162,3,162,4383,8,162,1,
162,3,162,4386,8,162,1,162,3,162,4389,8,162,1,163,1,163,1,163,1,163,1,163,
1,163,1,163,3,163,4398,8,163,1,164,1,164,1,164,1,164,1,164,1,164,1,164,3,
164,4407,8,164,1,165,1,165,1,165,1,165,1,165,1,165,5,165,4415,8,165,10,165,
12,165,4418,9,165,1,165,3,165,4421,8,165,1,166,1,166,1,166,1,166,1,166,1,
166,5,166,4429,8,166,10,166,12,166,4432,9,166,1,167,1,167,1,167,1,167,1,
167,1,167,1,167,3,167,4441,8,167,1,168,1,168,1,168,1,169,1,169,1,169,3,169,
4449,8,169,1,169,3,169,4452,8,169,1,170,1,170,1,170,1,170,1,170,5,170,4459,
8,170,10,170,12,170,4462,9,170,3,170,4464,8,170,1,170,1,170,3,170,4468,8,
170,1,170,5,170,4471,8,170,10,170,12,170,4474,9,170,1,170,3,170,4477,8,170,
1,171,1,171,1,171,1,171,1,171,5,171,4484,8,171,10,171,12,171,4487,9,171,
3,171,4489,8,171,1,172,1,172,1,172,1,173,1,173,1,173,1,174,1,174,1,174,1,
174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,
174,1,174,1,174,1,174,1,174,1,174,5,174,4518,8,174,10,174,12,174,4521,9,
174,3,174,4523,8,174,1,174,3,174,4526,8,174,1,175,1,175,1,176,1,176,1,177,
1,177,1,178,1,178,1,178,1,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,5,179,
4580,8,179,10,179,12,179,4583,9,179,1,179,1,179,3,179,4587,8,179,1,180,1,
180,1,180,1,180,1,180,1,180,1,181,1,181,1,182,1,182,1,182,1,182,1,182,1,
182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,
182,3,182,4615,8,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,1,183,
1,183,1,183,1,183,3,183,4629,8,183,1,184,1,184,1,184,5,184,4634,8,184,10,
184,12,184,4637,9,184,1,184,3,184,4640,8,184,1,185,1,185,1,185,1,185,3,185,
4646,8,185,1,186,1,186,1,186,1,186,1,186,1,186,3,186,4654,8,186,3,186,4656,
8,186,1,187,1,187,1,187,1,187,1,188,1,188,1,188,1,188,1,188,3,188,4667,8,
188,1,189,1,189,1,189,1,189,1,190,1,190,1,190,1,190,3,190,4677,8,190,1,191,
1,191,1,191,1,191,1,191,3,191,4684,8,191,1,192,1,192,1,192,1,192,3,192,4690,
8,192,1,193,1,193,1,193,1,193,1,194,1,194,3,194,4698,8,194,1,195,1,195,1,
195,3,195,4703,8,195,1,195,1,195,1,195,1,195,5,195,4709,8,195,10,195,12,
195,4712,9,195,1,195,1,195,1,195,5,195,4717,8,195,10,195,12,195,4720,9,195,
1,195,1,195,1,195,5,195,4725,8,195,10,195,12,195,4728,9,195,1,195,1,195,
1,195,5,195,4733,8,195,10,195,12,195,4736,9,195,1,195,5,195,4739,8,195,10,
195,12,195,4742,9,195,1,195,1,195,3,195,4746,8,195,1,196,1,196,1,196,3,196,
4751,8,196,1,196,4,196,4754,8,196,11,196,12,196,4755,1,196,1,196,4,196,4760,
8,196,11,196,12,196,4761,3,196,4764,8,196,1,196,1,196,1,196,1,197,1,197,
1,197,1,197,4,197,4773,8,197,11,197,12,197,4774,1,197,5,197,4778,8,197,10,
197,12,197,4781,9,197,1,197,1,197,4,197,4785,8,197,11,197,12,197,4786,3,
197,4789,8,197,1,197,1,197,1,197,1,198,1,198,1,198,1,199,1,199,1,199,1,200,
1,200,1,200,3,200,4803,8,200,1,200,1,200,4,200,4807,8,200,11,200,12,200,
4808,1,200,1,200,1,200,3,200,4814,8,200,1,201,1,201,1,201,3,201,4819,8,201,
1,201,1,201,4,201,4823,8,201,11,201,12,201,4824,1,201,1,201,1,201,1,201,
1,201,3,201,4832,8,201,1,202,1,202,1,202,1,203,1,203,1,203,3,203,4840,8,
203,1,203,1,203,1,203,1,203,4,203,4846,8,203,11,203,12,203,4847,1,203,1,
203,1,203,3,203,4853,8,203,1,204,1,204,1,204,1,204,3,204,4859,8,204,1,204,
3,204,4862,8,204,1,204,1,204,1,204,1,204,1,204,1,204,3,204,4870,8,204,1,
205,1,205,1,205,1,205,1,205,3,205,4877,8,205,1,206,1,206,1,206,1,206,1,206,
1,206,1,206,3,206,4886,8,206,1,206,3,206,4889,8,206,1,207,1,207,1,207,1,
207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,208,1,208,5,208,4904,8,208,
10,208,12,208,4907,9,208,1,208,1,208,1,209,1,209,1,209,3,209,4914,8,209,
1,209,1,209,1,209,1,209,1,209,1,209,3,209,4922,8,209,1,210,1,210,3,210,4926,
8,210,1,210,1,210,1,211,1,211,1,211,3,211,4933,8,211,1,211,1,211,4,211,4937,
8,211,11,211,12,211,4938,1,212,1,212,1,212,1,212,4,212,4945,8,212,11,212,
12,212,4946,1,213,1,213,1,213,1,213,1,213,5,213,4954,8,213,10,213,12,213,
4957,9,213,1,213,1,213,1,213,3,213,4962,8,213,1,213,1,213,1,213,5,213,4967,
8,213,10,213,12,213,4970,9,213,1,213,1,213,1,213,1,213,3,213,4976,8,213,
1,213,5,213,4979,8,213,10,213,12,213,4982,9,213,3,213,4984,8,213,3,213,4986,
8,213,1,213,1,213,4,213,4990,8,213,11,213,12,213,4991,3,213,4994,8,213,1,
213,1,213,5,213,4998,8,213,10,213,12,213,5001,9,213,1,213,1,213,1,213,1,
213,3,213,5007,8,213,1,213,1,213,1,213,3,213,5012,8,213,1,213,1,213,3,213,
5016,8,213,1,213,1,213,1,213,1,213,3,213,5022,8,213,1,214,1,214,1,214,1,
214,1,214,5,214,5029,8,214,10,214,12,214,5032,9,214,1,214,1,214,1,214,3,
214,5037,8,214,1,214,1,214,1,214,5,214,5042,8,214,10,214,12,214,5045,9,214,
1,214,1,214,1,214,3,214,5050,8,214,1,214,1,214,1,214,1,214,3,214,5056,8,
214,1,214,5,214,5059,8,214,10,214,12,214,5062,9,214,3,214,5064,8,214,3,214,
5066,8,214,1,214,1,214,4,214,5070,8,214,11,214,12,214,5071,3,214,5074,8,
214,1,214,1,214,5,214,5078,8,214,10,214,12,214,5081,9,214,1,214,1,214,1,
214,1,214,3,214,5087,8,214,3,214,5089,8,214,1,215,1,215,1,215,3,215,5094,
8,215,1,215,1,215,1,215,5,215,5099,8,215,10,215,12,215,5102,9,215,1,216,
1,216,1,216,1,216,5,216,5108,8,216,10,216,12,216,5111,9,216,1,216,1,216,
3,216,5115,8,216,1,216,1,216,1,216,1,216,1,216,5,216,5122,8,216,10,216,12,
216,5125,9,216,1,216,1,216,1,216,1,216,3,216,5131,8,216,1,216,5,216,5134,
8,216,10,216,12,216,5137,9,216,3,216,5139,8,216,3,216,5141,8,216,1,216,1,
216,1,216,1,216,5,216,5147,8,216,10,216,12,216,5150,9,216,3,216,5152,8,216,
1,216,1,216,1,216,1,216,1,216,1,216,3,216,5160,8,216,1,216,1,216,1,216,3,
216,5165,8,216,1,216,1,216,1,216,3,216,5170,8,216,5,216,5172,8,216,10,216,
12,216,5175,9,216,1,216,1,216,1,216,3,216,5180,8,216,1,216,1,216,1,216,3,
216,5185,8,216,5,216,5187,8,216,10,216,12,216,5190,9,216,1,216,1,216,1,216,
3,216,5195,8,216,3,216,5197,8,216,1,217,1,217,1,217,1,217,1,217,1,217,1,
217,5,217,5206,8,217,10,217,12,217,5209,9,217,3,217,5211,8,217,1,217,1,217,
1,217,5,217,5216,8,217,10,217,12,217,5219,9,217,3,217,5221,8,217,1,218,1,
218,1,218,1,218,1,218,1,218,1,218,1,218,5,218,5231,8,218,10,218,12,218,5234,
9,218,1,218,1,218,1,218,3,218,5239,8,218,1,219,1,219,1,219,1,219,1,219,5,
219,5246,8,219,10,219,12,219,5249,9,219,1,220,1,220,1,220,1,220,5,220,5255,
8,220,10,220,12,220,5258,9,220,1,220,1,220,3,220,5262,8,220,1,220,1,220,
1,220,1,220,1,220,5,220,5269,8,220,10,220,12,220,5272,9,220,1,220,1,220,
1,220,3,220,5277,8,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,5,220,5286,
8,220,10,220,12,220,5289,9,220,1,220,1,220,1,220,3,220,5294,8,220,1,220,
1,220,1,220,3,220,5299,8,220,5,220,5301,8,220,10,220,12,220,5304,9,220,1,
220,1,220,1,220,3,220,5309,8,220,1,220,1,220,1,220,3,220,5314,8,220,5,220,
5316,8,220,10,220,12,220,5319,9,220,3,220,5321,8,220,1,221,1,221,1,221,1,
221,1,221,1,221,1,221,1,221,5,221,5331,8,221,10,221,12,221,5334,9,221,1,
222,1,222,1,222,1,222,3,222,5340,8,222,1,222,1,222,1,222,3,222,5345,8,222,
1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
1,224,1,224,1,224,1,224,3,224,5375,8,224,1,225,1,225,3,225,5379,8,225,1,
225,1,225,1,225,3,225,5384,8,225,1,226,1,226,1,226,1,226,1,226,3,226,5391,
8,226,1,226,3,226,5394,8,226,1,226,1,226,1,226,1,226,3,226,5400,8,226,1,
227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,5410,8,227,1,228,1,228,
1,228,1,228,1,228,1,228,1,228,1,228,3,228,5420,8,228,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,3,229,5430,8,229,1,229,1,229,1,229,1,229,3,229,
5436,8,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,3,229,5445,8,229,1,
229,1,229,1,229,1,229,3,229,5451,8,229,1,229,1,229,1,229,1,229,1,229,3,229,
5458,8,229,3,229,5460,8,229,1,230,1,230,1,230,1,231,1,231,1,231,1,231,1,
231,3,231,5470,8,231,1,232,1,232,3,232,5474,8,232,1,232,1,232,3,232,5478,
8,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,3,232,5488,8,232,1,
232,1,232,1,232,3,232,5493,8,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,1,232,
1,232,1,232,1,232,3,232,5565,8,232,1,233,1,233,1,233,1,233,1,233,1,233,1,
233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,1,233,3,233,5583,8,233,
1,234,1,234,1,234,1,234,1,235,1,235,3,235,5591,8,235,1,235,1,235,1,235,1,
235,1,235,1,235,1,235,1,235,5,235,5601,8,235,10,235,12,235,5604,9,235,1,
235,1,235,1,235,1,235,3,235,5610,8,235,3,235,5612,8,235,1,235,1,235,1,235,
1,235,1,235,1,235,5,235,5620,8,235,10,235,12,235,5623,9,235,3,235,5625,8,
235,1,236,1,236,1,236,1,236,5,236,5631,8,236,10,236,12,236,5634,9,236,1,
237,1,237,1,237,1,237,3,237,5640,8,237,1,238,1,238,3,238,5644,8,238,1,238,
1,238,1,238,1,239,1,239,3,239,5651,8,239,1,239,1,239,1,239,3,239,5656,8,
239,1,239,3,239,5659,8,239,1,239,3,239,5662,8,239,1,240,1,240,1,240,1,240,
1,240,1,240,1,240,3,240,5671,8,240,1,241,1,241,3,241,5675,8,241,1,241,1,
241,3,241,5679,8,241,1,241,1,241,1,241,1,241,1,241,1,241,1,242,1,242,1,242,
1,242,1,242,1,242,1,243,1,243,1,243,1,243,1,244,1,244,1,244,1,244,1,244,
3,244,5702,8,244,1,244,1,244,1,244,1,244,1,244,3,244,5709,8,244,5,244,5711,
8,244,10,244,12,244,5714,9,244,1,244,1,244,1,244,1,244,3,244,5720,8,244,
1,244,1,244,1,244,1,244,1,244,3,244,5727,8,244,1,244,3,244,5730,8,244,1,
244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,1,244,5,
244,5744,8,244,10,244,12,244,5747,9,244,3,244,5749,8,244,1,245,1,245,1,245,
1,245,1,245,1,245,1,245,1,245,3,245,5759,8,245,1,245,1,245,3,245,5763,8,
245,1,245,1,245,1,245,1,245,3,245,5769,8,245,1,245,3,245,5772,8,245,1,245,
1,245,1,245,3,245,5777,8,245,1,245,1,245,3,245,5781,8,245,1,245,1,245,1,
245,1,245,1,245,3,245,5788,8,245,1,245,3,245,5791,8,245,1,245,1,245,1,245,
1,245,3,245,5797,8,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,
245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,
245,1,245,3,245,5821,8,245,1,245,3,245,5824,8,245,1,245,1,245,1,245,1,245,
1,245,1,245,1,245,1,245,1,245,1,245,3,245,5836,8,245,1,245,3,245,5839,8,
245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,5849,8,245,1,245,
1,245,1,245,1,245,1,245,1,245,3,245,5857,8,245,1,245,1,245,3,245,5861,8,
245,1,245,1,245,1,245,1,245,1,245,3,245,5868,8,245,1,245,3,245,5871,8,245,
1,245,1,245,1,245,1,245,1,245,5,245,5878,8,245,10,245,12,245,5881,9,245,
1,245,1,245,1,245,3,245,5886,8,245,1,245,1,245,1,245,1,245,3,245,5892,8,
245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,1,245,3,245,5902,8,245,3,245,
5904,8,245,1,246,1,246,1,246,1,246,3,246,5910,8,246,1,246,3,246,5913,8,246,
1,246,3,246,5916,8,246,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,
247,1,247,3,247,5928,8,247,1,247,3,247,5931,8,247,1,248,1,248,1,248,1,248,
3,248,5937,8,248,1,249,3,249,5940,8,249,1,249,1,249,1,249,1,249,1,249,1,
249,3,249,5948,8,249,1,249,1,249,1,249,1,249,1,249,1,249,3,249,5956,8,249,
1,250,1,250,1,250,1,250,3,250,5962,8,250,1,250,1,250,3,250,5966,8,250,1,
251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,1,251,3,
251,5980,8,251,1,252,1,252,1,252,1,253,1,253,1,253,1,253,1,253,5,253,5990,
8,253,10,253,12,253,5993,9,253,1,253,1,253,1,253,1,253,3,253,5999,8,253,
1,253,3,253,6002,8,253,1,253,1,253,1,253,1,254,1,254,3,254,6009,8,254,1,
254,1,254,1,254,5,254,6014,8,254,10,254,12,254,6017,9,254,1,255,1,255,3,
255,6021,8,255,1,255,1,255,1,256,1,256,1,256,1,256,1,256,1,256,1,256,5,256,
6032,8,256,10,256,12,256,6035,9,256,1,257,1,257,1,257,1,257,1,258,1,258,
1,259,1,259,3,259,6045,8,259,1,259,1,259,1,259,1,259,3,259,6051,8,259,1,
260,1,260,1,260,3,260,6056,8,260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,
1,260,1,260,1,260,1,260,3,260,6069,8,260,3,260,6071,8,260,1,260,1,260,1,
260,3,260,6076,8,260,1,260,1,260,3,260,6080,8,260,1,260,3,260,6083,8,260,
3,260,6085,8,260,1,261,1,261,1,261,1,261,1,261,3,261,6092,8,261,1,262,1,
262,1,262,1,262,1,262,3,262,6099,8,262,1,262,3,262,6102,8,262,1,262,3,262,
6105,8,262,1,262,1,262,1,262,1,262,3,262,6111,8,262,1,262,1,262,3,262,6115,
8,262,1,263,1,263,1,263,1,263,3,263,6121,8,263,1,264,1,264,1,264,1,264,3,
264,6127,8,264,1,264,1,264,1,265,1,265,1,265,1,266,1,266,1,266,1,267,1,267,
1,267,3,267,6140,8,267,1,267,1,267,1,267,3,267,6145,8,267,1,267,1,267,1,
267,1,267,5,267,6151,8,267,10,267,12,267,6154,9,267,3,267,6156,8,267,1,268,
1,268,1,268,3,268,6161,8,268,1,268,1,268,1,268,3,268,6166,8,268,1,268,1,
268,1,268,1,268,5,268,6172,8,268,10,268,12,268,6175,9,268,3,268,6177,8,268,
1,269,1,269,1,269,1,269,1,269,1,269,3,269,6185,8,269,1,270,1,270,3,270,6189,
8,270,1,270,1,270,1,270,5,270,6194,8,270,10,270,12,270,6197,9,270,1,271,
1,271,1,271,3,271,6202,8,271,1,271,3,271,6205,8,271,1,272,1,272,3,272,6209,
8,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,1,272,5,272,6220,8,
272,10,272,12,272,6223,9,272,1,272,1,272,1,272,3,272,6228,8,272,1,272,1,
272,1,272,1,272,1,272,1,272,1,272,1,272,5,272,6238,8,272,10,272,12,272,6241,
9,272,3,272,6243,8,272,1,273,1,273,1,274,1,274,1,274,1,274,1,274,3,274,6252,
8,274,1,274,1,274,1,274,3,274,6257,8,274,1,275,1,275,1,275,1,275,3,275,6263,
8,275,1,276,1,276,1,277,1,277,3,277,6269,8,277,1,278,1,278,1,278,3,278,6274,
8,278,3,278,6276,8,278,1,278,3,278,6279,8,278,1,278,1,278,3,278,6283,8,278,
3,278,6285,8,278,1,279,1,279,3,279,6289,8,279,1,279,1,279,1,279,1,279,3,
279,6295,8,279,1,279,3,279,6298,8,279,1,279,3,279,6301,8,279,1,280,1,280,
1,280,1,280,3,280,6307,8,280,1,281,1,281,1,282,1,282,1,282,1,282,1,282,3,
282,6316,8,282,1,283,1,283,1,284,1,284,1,284,1,284,3,284,6324,8,284,1,285,
1,285,3,285,6328,8,285,1,286,1,286,1,286,3,286,6333,8,286,1,287,1,287,1,
288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,
288,1,288,4,288,6351,8,288,11,288,12,288,6352,1,289,1,289,1,289,1,289,1,
289,3,289,6360,8,289,3,289,6362,8,289,1,290,1,290,1,290,4,290,6367,8,290,
11,290,12,290,6368,3,290,6371,8,290,1,291,1,291,3,291,6375,8,291,1,292,1,
292,1,292,3,292,6380,8,292,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
1,293,3,293,6391,8,293,1,294,1,294,1,294,3,294,6396,8,294,1,295,1,295,1,
296,1,296,3,296,6402,8,296,1,297,3,297,6405,8,297,1,297,1,297,3,297,6409,
8,297,1,297,4,297,6412,8,297,11,297,12,297,6413,1,297,3,297,6417,8,297,1,
297,1,297,3,297,6421,8,297,1,297,1,297,3,297,6425,8,297,3,297,6427,8,297,
1,298,1,298,1,299,3,299,6432,8,299,1,299,1,299,1,300,3,300,6437,8,300,1,
300,1,300,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,1,301,3,301,6450,
8,301,1,301,3,301,6453,8,301,1,302,1,302,3,302,6457,8,302,1,302,3,302,6460,
8,302,1,302,3,302,6463,8,302,1,302,1,302,1,302,3,302,6468,8,302,1,302,1,
302,1,302,3,302,6473,8,302,1,302,1,302,1,302,1,302,3,302,6479,8,302,1,302,
3,302,6482,8,302,1,302,1,302,1,302,3,302,6487,8,302,1,302,3,302,6490,8,302,
1,302,1,302,1,302,3,302,6495,8,302,1,302,3,302,6498,8,302,1,302,1,302,3,
302,6502,8,302,1,302,5,302,6505,8,302,10,302,12,302,6508,9,302,1,302,1,302,
3,302,6512,8,302,1,302,5,302,6515,8,302,10,302,12,302,6518,9,302,1,302,1,
302,3,302,6522,8,302,1,302,3,302,6525,8,302,1,302,5,302,6528,8,302,10,302,
12,302,6531,9,302,1,302,1,302,3,302,6535,8,302,1,302,5,302,6538,8,302,10,
302,12,302,6541,9,302,1,302,1,302,1,302,3,302,6546,8,302,1,302,1,302,1,302,
3,302,6551,8,302,1,302,1,302,1,302,3,302,6556,8,302,1,302,1,302,1,302,3,
302,6561,8,302,1,302,1,302,3,302,6565,8,302,1,302,3,302,6568,8,302,1,302,
1,302,1,302,3,302,6573,8,302,1,302,1,302,3,302,6577,8,302,1,302,1,302,3,
302,6581,8,302,1,303,1,303,1,303,1,303,5,303,6587,8,303,10,303,12,303,6590,
9,303,1,303,1,303,1,304,1,304,3,304,6596,8,304,1,304,1,304,3,304,6600,8,
304,1,304,1,304,1,304,3,304,6605,8,304,1,304,1,304,1,304,3,304,6610,8,304,
1,304,1,304,3,304,6614,8,304,3,304,6616,8,304,1,304,3,304,6619,8,304,1,305,
1,305,1,305,1,305,1,306,1,306,1,306,1,306,1,306,1,306,1,307,1,307,1,307,
1,307,3,307,6635,8,307,1,307,1,307,1,308,1,308,1,308,5,308,6642,8,308,10,
308,12,308,6645,9,308,1,309,1,309,1,309,5,309,6650,8,309,10,309,12,309,6653,
9,309,1,310,1,310,1,310,5,310,6658,8,310,10,310,12,310,6661,9,310,1,311,
1,311,1,311,1,311,5,311,6667,8,311,10,311,12,311,6670,9,311,1,311,1,311,
1,312,1,312,1,312,5,312,6677,8,312,10,312,12,312,6680,9,312,1,313,1,313,
1,313,5,313,6685,8,313,10,313,12,313,6688,9,313,1,314,1,314,1,314,5,314,
6693,8,314,10,314,12,314,6696,9,314,1,315,1,315,1,315,5,315,6701,8,315,10,
315,12,315,6704,9,315,1,316,1,316,1,316,5,316,6709,8,316,10,316,12,316,6712,
9,316,1,317,1,317,1,317,1,317,1,317,1,317,1,317,1,317,1,317,3,317,6723,8,
317,1,317,1,317,1,317,1,317,1,317,3,317,6730,8,317,1,317,1,317,1,317,1,317,
1,317,1,317,1,317,1,317,3,317,6740,8,317,1,318,1,318,1,318,3,318,6745,8,
318,1,318,3,318,6748,8,318,1,318,1,318,1,318,3,318,6753,8,318,1,318,3,318,
6756,8,318,1,319,1,319,3,319,6760,8,319,1,320,1,320,1,320,1,321,1,321,1,
321,1,321,1,322,1,322,1,322,1,323,1,323,1,323,3,323,6775,8,323,1,324,1,324,
1,324,1,324,1,324,1,324,3,324,6783,8,324,1,324,1,324,1,324,1,324,1,324,3,
324,6790,8,324,1,324,1,324,1,324,3,324,6795,8,324,1,325,1,325,1,325,3,325,
6800,8,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,
325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,
325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,4,325,6832,8,325,11,325,12,
325,6833,1,325,1,325,3,325,6838,8,325,1,325,1,325,1,325,1,325,4,325,6844,
8,325,11,325,12,325,6845,1,325,1,325,3,325,6850,8,325,1,325,1,325,1,325,
1,325,1,325,1,325,1,325,3,325,6859,8,325,1,325,1,325,1,325,1,325,1,325,1,
325,3,325,6867,8,325,1,325,1,325,1,325,3,325,6872,8,325,1,325,1,325,1,325,
1,325,1,325,1,325,3,325,6880,8,325,1,325,1,325,1,325,3,325,6885,8,325,1,
325,1,325,1,325,3,325,6890,8,325,3,325,6892,8,325,1,325,1,325,1,325,1,325,
1,325,1,325,1,325,3,325,6901,8,325,1,325,1,325,1,325,3,325,6906,8,325,1,
325,1,325,1,325,1,325,1,325,1,325,3,325,6914,8,325,1,325,1,325,1,325,3,325,
6919,8,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,6927,8,325,1,325,1,
325,1,325,1,325,1,325,1,325,3,325,6935,8,325,1,325,3,325,6938,8,325,1,325,
1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,6948,8,325,1,325,1,325,1,
325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,325,1,
325,1,325,3,325,6966,8,325,1,325,3,325,6969,8,325,1,325,3,325,6972,8,325,
1,325,1,325,3,325,6976,8,325,1,326,1,326,1,326,1,326,1,326,1,327,1,327,1,
327,1,327,5,327,6987,8,327,10,327,12,327,6990,9,327,1,327,1,327,1,327,1,
327,1,327,3,327,6997,8,327,1,328,1,328,3,328,7001,8,328,1,329,1,329,1,329,
3,329,7006,8,329,1,329,1,329,1,329,3,329,7011,8,329,1,329,1,329,1,329,1,
329,3,329,7017,8,329,1,329,1,329,1,329,3,329,7022,8,329,1,329,1,329,3,329,
7026,8,329,1,329,1,329,1,329,3,329,7031,8,329,1,329,1,329,1,329,3,329,7036,
8,329,1,329,1,329,1,329,3,329,7041,8,329,1,329,1,329,1,329,1,329,1,329,1,
329,5,329,7049,8,329,10,329,12,329,7052,9,329,3,329,7054,8,329,1,329,1,329,
3,329,7058,8,329,1,329,1,329,3,329,7062,8,329,1,330,1,330,1,330,1,330,1,
330,3,330,7069,8,330,1,330,1,330,3,330,7073,8,330,1,330,1,330,1,330,1,330,
1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,3,330,
7102,8,330,1,331,1,331,1,331,1,331,1,331,1,331,3,331,7110,8,331,1,332,3,
332,7113,8,332,1,332,3,332,7116,8,332,1,332,3,332,7119,8,332,1,332,3,332,
7122,8,332,1,333,1,333,1,334,1,334,1,334,1,335,1,335,1,336,1,336,3,336,7133,
8,336,1,337,1,337,1,337,1,337,1,337,1,338,1,338,1,338,1,338,1,338,1,338,
1,338,3,338,7147,8,338,1,339,1,339,1,339,1,339,1,339,5,339,7154,8,339,10,
339,12,339,7157,9,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,
340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,
340,1,340,1,340,1,340,3,340,7183,8,340,1,341,1,341,1,341,1,341,1,341,1,342,
1,342,1,342,1,342,3,342,7194,8,342,1,342,1,342,1,342,1,342,1,342,3,342,7201,
8,342,5,342,7203,8,342,10,342,12,342,7206,9,342,1,343,1,343,1,343,1,343,
3,343,7212,8,343,1,344,1,344,1,344,1,344,1,344,1,344,3,344,7220,8,344,1,
344,1,344,1,344,3,344,7225,8,344,1,344,1,344,1,344,1,344,5,344,7231,8,344,
10,344,12,344,7234,9,344,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,
1,345,3,345,7245,8,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,
345,1,345,1,345,3,345,7258,8,345,1,345,1,345,1,345,1,345,3,345,7264,8,345,
1,345,1,345,1,345,1,345,3,345,7270,8,345,1,345,1,345,1,345,1,345,1,345,1,
345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,1,345,3,345,7286,8,345,1,345,
1,345,1,345,1,345,3,345,7292,8,345,1,345,1,345,1,345,1,345,1,345,1,345,1,
345,5,345,7301,8,345,10,345,12,345,7304,9,345,1,346,1,346,1,346,1,346,1,
346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,
346,5,346,7323,8,346,10,346,12,346,7326,9,346,1,346,1,346,1,346,1,346,1,
346,1,346,1,346,4,346,7335,8,346,11,346,12,346,7336,1,346,1,346,1,346,1,
346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,3,
346,7354,8,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,
1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,1,346,5,346,7375,8,346,10,
346,12,346,7378,9,346,1,347,1,347,1,348,1,348,1,348,1,348,1,348,1,348,1,
348,1,348,1,348,1,348,1,348,1,348,1,348,1,348,3,348,7396,8,348,1,349,1,349,
1,349,1,349,1,349,1,349,1,349,3,349,7405,8,349,1,350,1,350,1,350,1,350,1,
350,1,350,1,350,3,350,7414,8,350,1,351,1,351,1,352,1,352,1,353,1,353,1,353,
1,353,1,353,3,353,7425,8,353,1,354,1,354,1,355,1,355,1,356,1,356,1,357,1,
357,1,358,1,358,1,359,1,359,1,360,1,360,1,360,0,3,688,690,692,361,0,2,4,
6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,
248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,
284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,
320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,
356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,
392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,
428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,
464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,
500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,
536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,
572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,604,606,
608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,
644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,
680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,712,714,
716,718,720,0,144,2,0,39,39,150,150,2,0,531,531,537,537,3,0,69,69,159,159,
181,181,3,0,42,42,384,384,454,454,4,0,42,42,419,419,529,529,611,611,2,0,
514,514,1148,1148,2,0,78,78,141,141,2,0,15,15,334,334,3,0,44,44,85,85,184,
184,2,0,434,434,558,558,3,0,506,506,650,650,658,658,2,0,392,392,460,460,
2,0,352,352,474,474,2,0,42,42,1138,1139,2,0,350,350,443,443,2,0,459,459,
673,673,3,0,80,80,84,84,125,125,3,0,42,42,402,402,431,431,3,0,42,42,398,
398,792,792,2,0,637,637,672,672,2,0,81,81,91,91,3,0,436,436,548,548,613,
613,2,0,69,69,159,159,1,0,356,357,1,0,1138,1139,2,0,1148,1148,1156,1156,
2,0,81,81,388,388,2,0,545,545,1148,1148,2,0,546,546,1148,1148,3,0,430,430,
469,469,521,521,7,0,42,42,370,370,372,372,402,402,431,431,573,573,1156,1156,
2,0,514,514,530,530,1,0,1139,1140,2,0,5,5,51,51,4,0,42,42,384,384,454,454,
458,458,2,0,26,26,30,30,2,0,12,12,175,175,2,0,192,192,677,677,2,0,21,21,
144,144,3,0,43,43,75,75,106,106,2,0,106,106,374,374,2,0,365,365,427,427,
2,0,101,101,601,601,2,0,43,43,106,106,2,0,6,6,49,49,2,0,188,188,669,669,
4,0,430,430,469,469,520,520,562,562,2,0,430,430,520,520,2,0,13,13,45,45,
3,0,66,66,78,78,186,186,2,0,34,34,83,83,2,0,97,97,148,148,2,0,6,6,49,50,
1,0,626,627,2,0,172,172,742,742,2,0,439,439,609,609,2,0,226,226,477,477,
5,0,107,107,482,483,485,485,489,497,575,575,4,0,479,480,484,484,486,487,
576,576,3,0,108,108,478,478,488,488,2,0,462,462,628,628,2,0,622,622,624,
624,2,0,344,344,629,629,2,0,90,90,591,591,2,0,51,51,390,390,3,0,31,31,61,
61,179,179,3,0,131,131,172,172,437,437,3,0,12,12,19,19,187,187,2,0,42,42,
121,121,2,0,103,103,182,182,2,0,360,360,614,614,2,0,40,40,671,671,2,0,115,
115,474,474,2,0,422,422,568,568,4,0,206,206,208,208,214,214,638,638,2,0,
1108,1108,1124,1124,2,0,345,345,577,577,2,0,68,68,80,80,6,0,131,131,172,
172,177,177,415,415,437,437,671,671,2,0,513,513,634,634,2,0,412,412,675,
675,2,0,131,131,437,437,3,0,81,81,92,92,452,452,3,0,439,439,474,474,609,
609,2,0,634,634,670,670,2,0,376,376,567,567,6,0,226,226,409,409,411,411,
438,438,574,574,615,615,2,0,45,46,62,62,3,0,422,422,550,550,885,885,2,0,
466,466,652,652,10,0,359,359,367,367,378,380,387,387,507,507,515,515,639,
639,646,646,836,836,1005,1005,2,0,35,35,168,168,2,0,117,117,996,996,11,0,
359,359,367,367,378,380,387,387,507,507,515,515,592,592,639,639,646,646,
836,836,1005,1005,2,0,1137,1137,1158,1159,1,0,1159,1160,2,0,375,375,787,
798,3,0,1138,1140,1149,1149,1151,1151,2,0,63,63,178,178,2,0,116,116,1152,
1152,5,0,25,25,222,224,231,231,233,236,518,518,2,0,25,25,222,222,2,0,25,
25,222,223,1,0,196,207,3,0,183,183,195,195,612,612,2,0,211,216,431,431,6,
0,217,217,228,228,230,230,232,232,239,239,348,349,4,0,218,221,226,227,229,
229,346,346,2,0,153,153,237,237,2,0,466,466,803,811,2,0,226,226,518,518,
5,0,200,200,206,206,217,218,220,220,466,466,1,0,214,215,2,0,183,183,612,
612,2,0,200,200,206,206,2,0,315,316,322,322,3,0,150,150,313,316,331,331,
1,0,325,326,3,0,17,17,95,95,176,176,2,0,222,222,226,226,2,0,217,218,220,
220,3,0,13,13,45,45,994,994,3,0,286,286,298,299,309,309,3,0,287,289,305,
308,310,312,2,0,295,295,297,297,2,0,293,293,296,296,2,0,291,292,302,304,
2,0,133,133,601,601,2,0,433,433,559,559,2,0,535,535,551,551,2,0,114,114,
1127,1127,3,0,63,63,178,178,662,662,2,0,137,137,149,149,3,0,6,6,337,337,
618,618,3,0,114,114,1120,1121,1127,1128,2,0,1117,1119,1122,1123,1,0,1120,
1121,2,0,226,226,746,786,1,0,799,802,5,0,708,709,725,727,733,733,739,740,
742,742,1,0,689,696,3,0,217,221,234,234,237,237,59,0,11,11,14,14,18,18,29,
29,35,35,37,37,42,42,48,48,55,55,57,57,59,59,73,73,79,79,94,94,117,117,121,
121,124,124,130,130,158,158,168,168,239,239,283,290,294,294,298,299,305,
312,332,385,387,403,405,405,407,432,434,450,452,458,460,521,523,523,527,
544,547,558,560,589,591,592,594,606,608,636,638,672,674,675,677,682,684,
688,697,697,699,707,710,712,717,718,720,724,728,732,734,734,736,738,741,
741,743,745,792,792,836,836,875,875,1000,1000,1005,1005,1088,1088,23,0,39,
39,97,97,148,148,150,150,217,219,221,221,251,282,290,293,295,297,300,304,
324,324,459,459,673,673,689,696,736,736,803,803,806,835,837,874,876,999,
1001,1004,1006,1087,1089,1107,1123,1123,8759,0,723,1,0,0,0,2,742,1,0,0,0,
4,763,1,0,0,0,6,765,1,0,0,0,8,805,1,0,0,0,10,820,1,0,0,0,12,831,1,0,0,0,
14,848,1,0,0,0,16,853,1,0,0,0,18,865,1,0,0,0,20,892,1,0,0,0,22,901,1,0,0,
0,24,903,1,0,0,0,26,915,1,0,0,0,28,945,1,0,0,0,30,981,1,0,0,0,32,1032,1,
0,0,0,34,1058,1,0,0,0,36,1094,1,0,0,0,38,1107,1,0,0,0,40,1204,1,0,0,0,42,
1206,1,0,0,0,44,1224,1,0,0,0,46,1285,1,0,0,0,48,1304,1,0,0,0,50,1310,1,0,
0,0,52,1332,1,0,0,0,54,1334,1,0,0,0,56,1336,1,0,0,0,58,1416,1,0,0,0,60,1423,
1,0,0,0,62,1425,1,0,0,0,64,1430,1,0,0,0,66,1470,1,0,0,0,68,1476,1,0,0,0,
70,1478,1,0,0,0,72,1499,1,0,0,0,74,1506,1,0,0,0,76,1508,1,0,0,0,78,1533,
1,0,0,0,80,1536,1,0,0,0,82,1541,1,0,0,0,84,1567,1,0,0,0,86,1583,1,0,0,0,
88,1585,1,0,0,0,90,1607,1,0,0,0,92,1609,1,0,0,0,94,1675,1,0,0,0,96,1746,
1,0,0,0,98,1748,1,0,0,0,100,1776,1,0,0,0,102,1786,1,0,0,0,104,1816,1,0,0,
0,106,2003,1,0,0,0,108,2005,1,0,0,0,110,2007,1,0,0,0,112,2010,1,0,0,0,114,
2085,1,0,0,0,116,2108,1,0,0,0,118,2256,1,0,0,0,120,2261,1,0,0,0,122,2263,
1,0,0,0,124,2273,1,0,0,0,126,2329,1,0,0,0,128,2349,1,0,0,0,130,2351,1,0,
0,0,132,2386,1,0,0,0,134,2395,1,0,0,0,136,2402,1,0,0,0,138,2425,1,0,0,0,
140,2434,1,0,0,0,142,2449,1,0,0,0,144,2474,1,0,0,0,146,2494,1,0,0,0,148,
2877,1,0,0,0,150,2977,1,0,0,0,152,2979,1,0,0,0,154,2986,1,0,0,0,156,2993,
1,0,0,0,158,3016,1,0,0,0,160,3024,1,0,0,0,162,3031,1,0,0,0,164,3038,1,0,
0,0,166,3045,1,0,0,0,168,3057,1,0,0,0,170,3067,1,0,0,0,172,3074,1,0,0,0,
174,3090,1,0,0,0,176,3136,1,0,0,0,178,3138,1,0,0,0,180,3148,1,0,0,0,182,
3152,1,0,0,0,184,3158,1,0,0,0,186,3170,1,0,0,0,188,3172,1,0,0,0,190,3179,
1,0,0,0,192,3181,1,0,0,0,194,3239,1,0,0,0,196,3313,1,0,0,0,198,3372,1,0,
0,0,200,3470,1,0,0,0,202,3474,1,0,0,0,204,3476,1,0,0,0,206,3511,1,0,0,0,
208,3513,1,0,0,0,210,3521,1,0,0,0,212,3529,1,0,0,0,214,3531,1,0,0,0,216,
3567,1,0,0,0,218,3622,1,0,0,0,220,3631,1,0,0,0,222,3651,1,0,0,0,224,3663,
1,0,0,0,226,3667,1,0,0,0,228,3700,1,0,0,0,230,3721,1,0,0,0,232,3731,1,0,
0,0,234,3735,1,0,0,0,236,3761,1,0,0,0,238,3803,1,0,0,0,240,3805,1,0,0,0,
242,3820,1,0,0,0,244,3869,1,0,0,0,246,3878,1,0,0,0,248,3888,1,0,0,0,250,
3898,1,0,0,0,252,3954,1,0,0,0,254,3956,1,0,0,0,256,3980,1,0,0,0,258,3986,
1,0,0,0,260,3994,1,0,0,0,262,4011,1,0,0,0,264,4027,1,0,0,0,266,4064,1,0,
0,0,268,4070,1,0,0,0,270,4079,1,0,0,0,272,4092,1,0,0,0,274,4096,1,0,0,0,
276,4134,1,0,0,0,278,4172,1,0,0,0,280,4186,1,0,0,0,282,4194,1,0,0,0,284,
4198,1,0,0,0,286,4204,1,0,0,0,288,4218,1,0,0,0,290,4221,1,0,0,0,292,4239,
1,0,0,0,294,4243,1,0,0,0,296,4259,1,0,0,0,298,4261,1,0,0,0,300,4273,1,0,
0,0,302,4277,1,0,0,0,304,4294,1,0,0,0,306,4311,1,0,0,0,308,4314,1,0,0,0,
310,4324,1,0,0,0,312,4328,1,0,0,0,314,4341,1,0,0,0,316,4344,1,0,0,0,318,
4349,1,0,0,0,320,4369,1,0,0,0,322,4371,1,0,0,0,324,4388,1,0,0,0,326,4397,
1,0,0,0,328,4406,1,0,0,0,330,4408,1,0,0,0,332,4422,1,0,0,0,334,4433,1,0,
0,0,336,4442,1,0,0,0,338,4445,1,0,0,0,340,4453,1,0,0,0,342,4478,1,0,0,0,
344,4490,1,0,0,0,346,4493,1,0,0,0,348,4525,1,0,0,0,350,4527,1,0,0,0,352,
4529,1,0,0,0,354,4531,1,0,0,0,356,4533,1,0,0,0,358,4586,1,0,0,0,360,4588,
1,0,0,0,362,4594,1,0,0,0,364,4614,1,0,0,0,366,4628,1,0,0,0,368,4639,1,0,
0,0,370,4641,1,0,0,0,372,4647,1,0,0,0,374,4657,1,0,0,0,376,4661,1,0,0,0,
378,4668,1,0,0,0,380,4672,1,0,0,0,382,4678,1,0,0,0,384,4685,1,0,0,0,386,
4691,1,0,0,0,388,4697,1,0,0,0,390,4702,1,0,0,0,392,4747,1,0,0,0,394,4768,
1,0,0,0,396,4793,1,0,0,0,398,4796,1,0,0,0,400,4802,1,0,0,0,402,4818,1,0,
0,0,404,4833,1,0,0,0,406,4839,1,0,0,0,408,4869,1,0,0,0,410,4871,1,0,0,0,
412,4878,1,0,0,0,414,4890,1,0,0,0,416,4896,1,0,0,0,418,4921,1,0,0,0,420,
4925,1,0,0,0,422,4929,1,0,0,0,424,4940,1,0,0,0,426,5021,1,0,0,0,428,5088,
1,0,0,0,430,5090,1,0,0,0,432,5196,1,0,0,0,434,5220,1,0,0,0,436,5222,1,0,
0,0,438,5240,1,0,0,0,440,5320,1,0,0,0,442,5322,1,0,0,0,444,5335,1,0,0,0,
446,5346,1,0,0,0,448,5374,1,0,0,0,450,5378,1,0,0,0,452,5399,1,0,0,0,454,
5409,1,0,0,0,456,5419,1,0,0,0,458,5459,1,0,0,0,460,5461,1,0,0,0,462,5464,
1,0,0,0,464,5564,1,0,0,0,466,5582,1,0,0,0,468,5584,1,0,0,0,470,5588,1,0,
0,0,472,5626,1,0,0,0,474,5635,1,0,0,0,476,5641,1,0,0,0,478,5648,1,0,0,0,
480,5670,1,0,0,0,482,5672,1,0,0,0,484,5686,1,0,0,0,486,5692,1,0,0,0,488,
5748,1,0,0,0,490,5903,1,0,0,0,492,5915,1,0,0,0,494,5930,1,0,0,0,496,5936,
1,0,0,0,498,5955,1,0,0,0,500,5965,1,0,0,0,502,5979,1,0,0,0,504,5981,1,0,
0,0,506,5984,1,0,0,0,508,6006,1,0,0,0,510,6018,1,0,0,0,512,6024,1,0,0,0,
514,6036,1,0,0,0,516,6040,1,0,0,0,518,6042,1,0,0,0,520,6084,1,0,0,0,522,
6091,1,0,0,0,524,6093,1,0,0,0,526,6116,1,0,0,0,528,6122,1,0,0,0,530,6130,
1,0,0,0,532,6133,1,0,0,0,534,6136,1,0,0,0,536,6157,1,0,0,0,538,6178,1,0,
0,0,540,6186,1,0,0,0,542,6198,1,0,0,0,544,6206,1,0,0,0,546,6244,1,0,0,0,
548,6256,1,0,0,0,550,6258,1,0,0,0,552,6264,1,0,0,0,554,6268,1,0,0,0,556,
6284,1,0,0,0,558,6297,1,0,0,0,560,6306,1,0,0,0,562,6308,1,0,0,0,564,6315,
1,0,0,0,566,6317,1,0,0,0,568,6323,1,0,0,0,570,6327,1,0,0,0,572,6332,1,0,
0,0,574,6334,1,0,0,0,576,6336,1,0,0,0,578,6354,1,0,0,0,580,6370,1,0,0,0,
582,6374,1,0,0,0,584,6379,1,0,0,0,586,6390,1,0,0,0,588,6395,1,0,0,0,590,
6397,1,0,0,0,592,6401,1,0,0,0,594,6426,1,0,0,0,596,6428,1,0,0,0,598,6431,
1,0,0,0,600,6436,1,0,0,0,602,6452,1,0,0,0,604,6580,1,0,0,0,606,6582,1,0,
0,0,608,6615,1,0,0,0,610,6620,1,0,0,0,612,6624,1,0,0,0,614,6630,1,0,0,0,
616,6638,1,0,0,0,618,6646,1,0,0,0,620,6654,1,0,0,0,622,6662,1,0,0,0,624,
6673,1,0,0,0,626,6681,1,0,0,0,628,6689,1,0,0,0,630,6697,1,0,0,0,632,6705,
1,0,0,0,634,6739,1,0,0,0,636,6755,1,0,0,0,638,6759,1,0,0,0,640,6761,1,0,
0,0,642,6764,1,0,0,0,644,6768,1,0,0,0,646,6774,1,0,0,0,648,6794,1,0,0,0,
650,6975,1,0,0,0,652,6977,1,0,0,0,654,6996,1,0,0,0,656,6998,1,0,0,0,658,
7061,1,0,0,0,660,7101,1,0,0,0,662,7103,1,0,0,0,664,7112,1,0,0,0,666,7123,
1,0,0,0,668,7125,1,0,0,0,670,7128,1,0,0,0,672,7132,1,0,0,0,674,7134,1,0,
0,0,676,7146,1,0,0,0,678,7148,1,0,0,0,680,7182,1,0,0,0,682,7184,1,0,0,0,
684,7193,1,0,0,0,686,7211,1,0,0,0,688,7224,1,0,0,0,690,7235,1,0,0,0,692,
7353,1,0,0,0,694,7379,1,0,0,0,696,7395,1,0,0,0,698,7404,1,0,0,0,700,7413,
1,0,0,0,702,7415,1,0,0,0,704,7417,1,0,0,0,706,7424,1,0,0,0,708,7426,1,0,
0,0,710,7428,1,0,0,0,712,7430,1,0,0,0,714,7432,1,0,0,0,716,7434,1,0,0,0,
718,7436,1,0,0,0,720,7438,1,0,0,0,722,724,3,2,1,0,723,722,1,0,0,0,723,724,
1,0,0,0,724,727,1,0,0,0,725,726,5,1121,0,0,726,728,5,1121,0,0,727,725,1,
0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,730,5,0,0,1,730,1,1,0,0,0,731,
734,3,4,2,0,732,733,5,1121,0,0,733,735,5,1121,0,0,734,732,1,0,0,0,734,735,
1,0,0,0,735,737,1,0,0,0,736,738,5,1136,0,0,737,736,1,0,0,0,737,738,1,0,0,
0,738,741,1,0,0,0,739,741,3,6,3,0,740,731,1,0,0,0,740,739,1,0,0,0,741,744,
1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,754,1,0,0,0,744,742,1,0,0,0,
745,751,3,4,2,0,746,747,5,1121,0,0,747,749,5,1121,0,0,748,746,1,0,0,0,748,
749,1,0,0,0,749,750,1,0,0,0,750,752,5,1136,0,0,751,748,1,0,0,0,751,752,1,
0,0,0,752,755,1,0,0,0,753,755,3,6,3,0,754,745,1,0,0,0,754,753,1,0,0,0,755,
3,1,0,0,0,756,764,3,8,4,0,757,764,3,10,5,0,758,764,3,12,6,0,759,764,3,14,
7,0,760,764,3,16,8,0,761,764,3,20,10,0,762,764,3,22,11,0,763,756,1,0,0,0,
763,757,1,0,0,0,763,758,1,0,0,0,763,759,1,0,0,0,763,760,1,0,0,0,763,761,
1,0,0,0,763,762,1,0,0,0,764,5,1,0,0,0,765,766,5,1136,0,0,766,7,1,0,0,0,767,
806,3,24,12,0,768,806,3,26,13,0,769,806,3,28,14,0,770,806,3,30,15,0,771,
806,3,32,16,0,772,806,3,34,17,0,773,806,3,38,19,0,774,806,3,40,20,0,775,
806,3,42,21,0,776,806,3,44,22,0,777,806,3,46,23,0,778,806,3,56,28,0,779,
806,3,36,18,0,780,806,3,128,64,0,781,806,3,130,65,0,782,806,3,132,66,0,783,
806,3,134,67,0,784,806,3,136,68,0,785,806,3,138,69,0,786,806,3,140,70,0,
787,806,3,142,71,0,788,806,3,144,72,0,789,806,3,146,73,0,790,806,3,152,76,
0,791,806,3,154,77,0,792,806,3,156,78,0,793,806,3,158,79,0,794,806,3,160,
80,0,795,806,3,162,81,0,796,806,3,164,82,0,797,806,3,166,83,0,798,806,3,
168,84,0,799,806,3,170,85,0,800,806,3,172,86,0,801,806,3,174,87,0,802,806,
3,176,88,0,803,806,3,178,89,0,804,806,3,182,91,0,805,767,1,0,0,0,805,768,
1,0,0,0,805,769,1,0,0,0,805,770,1,0,0,0,805,771,1,0,0,0,805,772,1,0,0,0,
805,773,1,0,0,0,805,774,1,0,0,0,805,775,1,0,0,0,805,776,1,0,0,0,805,777,
1,0,0,0,805,778,1,0,0,0,805,779,1,0,0,0,805,780,1,0,0,0,805,781,1,0,0,0,
805,782,1,0,0,0,805,783,1,0,0,0,805,784,1,0,0,0,805,785,1,0,0,0,805,786,
1,0,0,0,805,787,1,0,0,0,805,788,1,0,0,0,805,789,1,0,0,0,805,790,1,0,0,0,
805,791,1,0,0,0,805,792,1,0,0,0,805,793,1,0,0,0,805,794,1,0,0,0,805,795,
1,0,0,0,805,796,1,0,0,0,805,797,1,0,0,0,805,798,1,0,0,0,805,799,1,0,0,0,
805,800,1,0,0,0,805,801,1,0,0,0,805,802,1,0,0,0,805,803,1,0,0,0,805,804,
1,0,0,0,806,9,1,0,0,0,807,821,3,200,100,0,808,821,3,192,96,0,809,821,3,202,
101,0,810,821,3,186,93,0,811,821,3,198,99,0,812,821,3,184,92,0,813,821,3,
194,97,0,814,821,3,196,98,0,815,821,3,188,94,0,816,821,3,190,95,0,817,821,
3,204,102,0,818,821,3,540,270,0,819,821,3,542,271,0,820,807,1,0,0,0,820,
808,1,0,0,0,820,809,1,0,0,0,820,810,1,0,0,0,820,811,1,0,0,0,820,812,1,0,
0,0,820,813,1,0,0,0,820,814,1,0,0,0,820,815,1,0,0,0,820,816,1,0,0,0,820,
817,1,0,0,0,820,818,1,0,0,0,820,819,1,0,0,0,821,11,1,0,0,0,822,832,3,298,
149,0,823,832,3,300,150,0,824,832,3,302,151,0,825,832,3,304,152,0,826,832,
3,306,153,0,827,832,3,308,154,0,828,832,3,310,155,0,829,832,3,312,156,0,
830,832,3,314,157,0,831,822,1,0,0,0,831,823,1,0,0,0,831,824,1,0,0,0,831,
825,1,0,0,0,831,826,1,0,0,0,831,827,1,0,0,0,831,828,1,0,0,0,831,829,1,0,
0,0,831,830,1,0,0,0,832,13,1,0,0,0,833,849,3,330,165,0,834,849,3,332,166,
0,835,849,3,334,167,0,836,849,3,336,168,0,837,849,3,338,169,0,838,849,3,
340,170,0,839,849,3,342,171,0,840,849,3,344,172,0,841,849,3,346,173,0,842,
849,3,370,185,0,843,849,3,372,186,0,844,849,3,374,187,0,845,849,3,376,188,
0,846,849,3,378,189,0,847,849,3,380,190,0,848,833,1,0,0,0,848,834,1,0,0,
0,848,835,1,0,0,0,848,836,1,0,0,0,848,837,1,0,0,0,848,838,1,0,0,0,848,839,
1,0,0,0,848,840,1,0,0,0,848,841,1,0,0,0,848,842,1,0,0,0,848,843,1,0,0,0,
848,844,1,0,0,0,848,845,1,0,0,0,848,846,1,0,0,0,848,847,1,0,0,0,849,15,1,
0,0,0,850,854,3,382,191,0,851,854,3,384,192,0,852,854,3,386,193,0,853,850,
1,0,0,0,853,851,1,0,0,0,853,852,1,0,0,0,854,17,1,0,0,0,855,866,3,390,195,
0,856,866,3,392,196,0,857,866,3,394,197,0,858,866,3,398,199,0,859,866,3,
400,200,0,860,866,3,402,201,0,861,866,3,406,203,0,862,866,3,396,198,0,863,
866,3,404,202,0,864,866,3,408,204,0,865,855,1,0,0,0,865,856,1,0,0,0,865,
857,1,0,0,0,865,858,1,0,0,0,865,859,1,0,0,0,865,860,1,0,0,0,865,861,1,0,
0,0,865,862,1,0,0,0,865,863,1,0,0,0,865,864,1,0,0,0,866,19,1,0,0,0,867,893,
3,426,213,0,868,893,3,428,214,0,869,893,3,430,215,0,870,893,3,432,216,0,
871,893,3,436,218,0,872,893,3,438,219,0,873,893,3,440,220,0,874,893,3,442,
221,0,875,893,3,470,235,0,876,893,3,472,236,0,877,893,3,474,237,0,878,893,
3,476,238,0,879,893,3,478,239,0,880,893,3,482,241,0,881,893,3,484,242,0,
882,893,3,486,243,0,883,893,3,488,244,0,884,893,3,490,245,0,885,893,3,504,
252,0,886,893,3,506,253,0,887,893,3,508,254,0,888,893,3,510,255,0,889,893,
3,512,256,0,890,893,3,514,257,0,891,893,3,516,258,0,892,867,1,0,0,0,892,
868,1,0,0,0,892,869,1,0,0,0,892,870,1,0,0,0,892,871,1,0,0,0,892,872,1,0,
0,0,892,873,1,0,0,0,892,874,1,0,0,0,892,875,1,0,0,0,892,876,1,0,0,0,892,
877,1,0,0,0,892,878,1,0,0,0,892,879,1,0,0,0,892,880,1,0,0,0,892,881,1,0,
0,0,892,882,1,0,0,0,892,883,1,0,0,0,892,884,1,0,0,0,892,885,1,0,0,0,892,
886,1,0,0,0,892,887,1,0,0,0,892,888,1,0,0,0,892,889,1,0,0,0,892,890,1,0,
0,0,892,891,1,0,0,0,893,21,1,0,0,0,894,902,3,526,263,0,895,902,3,528,264,
0,896,902,3,530,265,0,897,902,3,532,266,0,898,902,3,534,267,0,899,902,3,
536,268,0,900,902,3,544,272,0,901,894,1,0,0,0,901,895,1,0,0,0,901,896,1,
0,0,0,901,897,1,0,0,0,901,898,1,0,0,0,901,899,1,0,0,0,901,900,1,0,0,0,902,
23,1,0,0,0,903,904,5,33,0,0,904,906,7,0,0,0,905,907,3,642,321,0,906,905,
1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,0,908,912,3,584,292,0,909,911,3,58,
29,0,910,909,1,0,0,0,911,914,1,0,0,0,912,910,1,0,0,0,912,913,1,0,0,0,913,
25,1,0,0,0,914,912,1,0,0,0,915,917,5,33,0,0,916,918,3,64,32,0,917,916,1,
0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,921,5,415,0,0,920,922,3,642,321,
0,921,920,1,0,0,0,921,922,1,0,0,0,922,923,1,0,0,0,923,924,3,550,275,0,924,
925,5,118,0,0,925,926,5,605,0,0,926,933,3,66,33,0,927,928,5,118,0,0,928,
930,5,371,0,0,929,931,5,114,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,
1,0,0,0,932,934,5,561,0,0,933,927,1,0,0,0,933,934,1,0,0,0,934,936,1,0,0,
0,935,937,3,74,37,0,936,935,1,0,0,0,936,937,1,0,0,0,937,940,1,0,0,0,938,
939,5,368,0,0,939,941,5,1148,0,0,940,938,1,0,0,0,940,941,1,0,0,0,941,942,
1,0,0,0,942,943,5,399,0,0,943,944,3,388,194,0,944,27,1,0,0,0,945,947,5,33,
0,0,946,948,7,1,0,0,947,946,1,0,0,0,947,948,1,0,0,0,948,950,1,0,0,0,949,
951,7,2,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,952,1,0,0,0,952,953,5,81,
0,0,953,955,3,584,292,0,954,956,3,76,38,0,955,954,1,0,0,0,955,956,1,0,0,
0,956,957,1,0,0,0,957,958,5,118,0,0,958,959,3,552,276,0,959,963,3,622,311,
0,960,962,3,78,39,0,961,960,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,0,963,
964,1,0,0,0,964,978,1,0,0,0,965,963,1,0,0,0,966,968,5,336,0,0,967,969,5,
1124,0,0,968,967,1,0,0,0,968,969,1,0,0,0,969,970,1,0,0,0,970,977,7,3,0,0,
971,973,5,103,0,0,972,974,5,1124,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,
975,1,0,0,0,975,977,7,4,0,0,976,966,1,0,0,0,976,971,1,0,0,0,977,980,1,0,
0,0,978,976,1,0,0,0,978,979,1,0,0,0,979,29,1,0,0,0,980,978,1,0,0,0,981,982,
5,33,0,0,982,983,5,475,0,0,983,984,5,73,0,0,984,985,3,584,292,0,985,986,
5,5,0,0,986,987,5,659,0,0,987,993,5,1148,0,0,988,990,5,453,0,0,989,991,5,
1124,0,0,990,989,1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,994,3,592,296,
0,993,988,1,0,0,0,993,994,1,0,0,0,994,1000,1,0,0,0,995,997,5,660,0,0,996,
998,5,1124,0,0,997,996,1,0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1001,
3,592,296,0,1000,995,1,0,0,0,1000,1001,1,0,0,0,1001,1007,1,0,0,0,1002,1004,
5,572,0,0,1003,1005,5,1124,0,0,1004,1003,1,0,0,0,1004,1005,1,0,0,0,1005,
1006,1,0,0,0,1006,1008,3,592,296,0,1007,1002,1,0,0,0,1007,1008,1,0,0,0,1008,
1014,1,0,0,0,1009,1011,5,528,0,0,1010,1012,5,1124,0,0,1011,1010,1,0,0,0,
1011,1012,1,0,0,0,1012,1013,1,0,0,0,1013,1015,3,584,292,0,1014,1009,1,0,
0,0,1014,1015,1,0,0,0,1015,1017,1,0,0,0,1016,1018,5,674,0,0,1017,1016,1,
0,0,0,1017,1018,1,0,0,0,1018,1024,1,0,0,0,1019,1021,5,368,0,0,1020,1022,
5,1124,0,0,1021,1020,1,0,0,0,1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1025,
5,1148,0,0,1024,1019,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,1026,1028,
5,409,0,0,1027,1029,5,1124,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,
1030,1,0,0,0,1030,1031,3,572,286,0,1031,31,1,0,0,0,1032,1034,5,33,0,0,1033,
1035,3,64,32,0,1034,1033,1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,0,0,1036,
1037,5,131,0,0,1037,1038,3,550,275,0,1038,1040,5,1133,0,0,1039,1041,3,80,
40,0,1040,1039,1,0,0,0,1040,1041,1,0,0,0,1041,1046,1,0,0,0,1042,1043,5,1135,
0,0,1043,1045,3,80,40,0,1044,1042,1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,
0,0,0,1046,1047,1,0,0,0,1047,1049,1,0,0,0,1048,1046,1,0,0,0,1049,1053,5,
1134,0,0,1050,1052,3,84,42,0,1051,1050,1,0,0,0,1052,1055,1,0,0,0,1053,1051,
1,0,0,0,1053,1054,1,0,0,0,1054,1056,1,0,0,0,1055,1053,1,0,0,0,1056,1057,
3,388,194,0,1057,33,1,0,0,0,1058,1060,5,33,0,0,1059,1061,3,64,32,0,1060,
1059,1,0,0,0,1060,1061,1,0,0,0,1061,1063,1,0,0,0,1062,1064,5,335,0,0,1063,
1062,1,0,0,0,1063,1064,1,0,0,0,1064,1065,1,0,0,0,1065,1067,5,437,0,0,1066,
1068,3,642,321,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,
1070,3,550,275,0,1070,1072,5,1133,0,0,1071,1073,3,82,41,0,1072,1071,1,0,
0,0,1072,1073,1,0,0,0,1073,1078,1,0,0,0,1074,1075,5,1135,0,0,1075,1077,3,
82,41,0,1076,1074,1,0,0,0,1077,1080,1,0,0,0,1078,1076,1,0,0,0,1078,1079,
1,0,0,0,1079,1081,1,0,0,0,1080,1078,1,0,0,0,1081,1082,5,1134,0,0,1082,1083,
5,594,0,0,1083,1087,3,604,302,0,1084,1086,3,84,42,0,1085,1084,1,0,0,0,1086,
1089,1,0,0,0,1087,1085,1,0,0,0,1087,1088,1,0,0,0,1088,1092,1,0,0,0,1089,
1087,1,0,0,0,1090,1093,3,388,194,0,1091,1093,3,404,202,0,1092,1090,1,0,0,
0,1092,1091,1,0,0,0,1093,35,1,0,0,0,1094,1095,5,33,0,0,1095,1097,5,596,0,
0,1096,1098,3,642,321,0,1097,1096,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,
0,0,0,1099,1104,3,554,277,0,1100,1101,5,1135,0,0,1101,1103,3,554,277,0,1102,
1100,1,0,0,0,1103,1106,1,0,0,0,1104,1102,1,0,0,0,1104,1105,1,0,0,0,1105,
37,1,0,0,0,1106,1104,1,0,0,0,1107,1108,5,33,0,0,1108,1109,5,608,0,0,1109,
1110,3,584,292,0,1110,1111,5,67,0,0,1111,1112,5,388,0,0,1112,1113,5,679,
0,0,1113,1114,7,5,0,0,1114,1115,5,541,0,0,1115,1116,5,1133,0,0,1116,1121,
3,86,43,0,1117,1118,5,1135,0,0,1118,1120,3,86,43,0,1119,1117,1,0,0,0,1120,
1123,1,0,0,0,1121,1119,1,0,0,0,1121,1122,1,0,0,0,1122,1124,1,0,0,0,1123,
1121,1,0,0,0,1124,1125,5,1134,0,0,1125,39,1,0,0,0,1126,1128,5,33,0,0,1127,
1129,5,649,0,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1130,1,0,0,0,1130,
1132,5,172,0,0,1131,1133,3,642,321,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,
1133,1134,1,0,0,0,1134,1142,3,552,276,0,1135,1136,5,98,0,0,1136,1143,3,552,
276,0,1137,1138,5,1133,0,0,1138,1139,5,98,0,0,1139,1140,3,552,276,0,1140,
1141,5,1134,0,0,1141,1143,1,0,0,0,1142,1135,1,0,0,0,1142,1137,1,0,0,0,1143,
1205,1,0,0,0,1144,1146,5,33,0,0,1145,1147,5,649,0,0,1146,1145,1,0,0,0,1146,
1147,1,0,0,0,1147,1148,1,0,0,0,1148,1150,5,172,0,0,1149,1151,3,642,321,0,
1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,1152,1154,3,552,276,
0,1153,1155,3,88,44,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,1166,1,0,
0,0,1156,1163,3,106,53,0,1157,1159,5,1135,0,0,1158,1157,1,0,0,0,1158,1159,
1,0,0,0,1159,1160,1,0,0,0,1160,1162,3,106,53,0,1161,1158,1,0,0,0,1162,1165,
1,0,0,0,1163,1161,1,0,0,0,1163,1164,1,0,0,0,1164,1167,1,0,0,0,1165,1163,
1,0,0,0,1166,1156,1,0,0,0,1166,1167,1,0,0,0,1167,1169,1,0,0,0,1168,1170,
3,112,56,0,1169,1168,1,0,0,0,1169,1170,1,0,0,0,1170,1172,1,0,0,0,1171,1173,
7,6,0,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,1173,1175,1,0,0,0,1174,1176,
5,12,0,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,0,1177,1178,
3,200,100,0,1178,1205,1,0,0,0,1179,1181,5,33,0,0,1180,1182,5,649,0,0,1181,
1180,1,0,0,0,1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1185,5,172,0,0,1184,
1186,3,642,321,0,1185,1184,1,0,0,0,1185,1186,1,0,0,0,1186,1187,1,0,0,0,1187,
1188,3,552,276,0,1188,1199,3,88,44,0,1189,1196,3,106,53,0,1190,1192,5,1135,
0,0,1191,1190,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,1193,1195,3,106,
53,0,1194,1191,1,0,0,0,1195,1198,1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,
0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1199,1189,1,0,0,0,1199,1200,1,0,
0,0,1200,1202,1,0,0,0,1201,1203,3,112,56,0,1202,1201,1,0,0,0,1202,1203,1,
0,0,0,1203,1205,1,0,0,0,1204,1126,1,0,0,0,1204,1144,1,0,0,0,1204,1179,1,
0,0,0,1205,41,1,0,0,0,1206,1207,5,33,0,0,1207,1208,5,647,0,0,1208,1209,3,
584,292,0,1209,1210,5,5,0,0,1210,1211,5,389,0,0,1211,1215,5,1148,0,0,1212,
1213,5,428,0,0,1213,1214,5,1124,0,0,1214,1216,3,592,296,0,1215,1212,1,0,
0,0,1215,1216,1,0,0,0,1216,1222,1,0,0,0,1217,1219,5,409,0,0,1218,1220,5,
1124,0,0,1219,1218,1,0,0,0,1219,1220,1,0,0,0,1220,1221,1,0,0,0,1221,1223,
3,572,286,0,1222,1217,1,0,0,0,1222,1223,1,0,0,0,1223,43,1,0,0,0,1224,1225,
5,33,0,0,1225,1226,5,647,0,0,1226,1227,3,584,292,0,1227,1228,5,5,0,0,1228,
1229,5,389,0,0,1229,1230,5,1148,0,0,1230,1231,5,186,0,0,1231,1232,5,475,
0,0,1232,1233,5,73,0,0,1233,1239,3,584,292,0,1234,1236,5,423,0,0,1235,1237,
5,1124,0,0,1236,1235,1,0,0,0,1236,1237,1,0,0,0,1237,1238,1,0,0,0,1238,1240,
3,592,296,0,1239,1234,1,0,0,0,1239,1240,1,0,0,0,1240,1246,1,0,0,0,1241,1243,
5,453,0,0,1242,1244,5,1124,0,0,1243,1242,1,0,0,0,1243,1244,1,0,0,0,1244,
1245,1,0,0,0,1245,1247,3,592,296,0,1246,1241,1,0,0,0,1246,1247,1,0,0,0,1247,
1253,1,0,0,0,1248,1250,5,341,0,0,1249,1251,5,1124,0,0,1250,1249,1,0,0,0,
1250,1251,1,0,0,0,1251,1252,1,0,0,0,1252,1254,3,592,296,0,1253,1248,1,0,
0,0,1253,1254,1,0,0,0,1254,1260,1,0,0,0,1255,1257,5,501,0,0,1256,1258,5,
1124,0,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1261,
3,592,296,0,1260,1255,1,0,0,0,1260,1261,1,0,0,0,1261,1267,1,0,0,0,1262,1264,
5,528,0,0,1263,1265,5,1124,0,0,1264,1263,1,0,0,0,1264,1265,1,0,0,0,1265,
1266,1,0,0,0,1266,1268,3,584,292,0,1267,1262,1,0,0,0,1267,1268,1,0,0,0,1268,
1270,1,0,0,0,1269,1271,5,674,0,0,1270,1269,1,0,0,0,1270,1271,1,0,0,0,1271,
1277,1,0,0,0,1272,1274,5,368,0,0,1273,1275,5,1124,0,0,1274,1273,1,0,0,0,
1274,1275,1,0,0,0,1275,1276,1,0,0,0,1276,1278,5,1148,0,0,1277,1272,1,0,0,
0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1281,5,409,0,0,1280,1282,5,1124,
0,0,1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1284,3,572,
286,0,1284,45,1,0,0,0,1285,1287,5,33,0,0,1286,1288,3,64,32,0,1287,1286,1,
0,0,0,1287,1288,1,0,0,0,1288,1289,1,0,0,0,1289,1290,5,177,0,0,1290,1291,
3,550,275,0,1291,1292,7,7,0,0,1292,1293,7,8,0,0,1293,1294,5,118,0,0,1294,
1295,3,552,276,0,1295,1296,5,65,0,0,1296,1297,5,52,0,0,1297,1300,5,600,0,
0,1298,1299,7,9,0,0,1299,1301,3,550,275,0,1300,1298,1,0,0,0,1300,1301,1,
0,0,0,1301,1302,1,0,0,0,1302,1303,3,388,194,0,1303,47,1,0,0,0,1304,1306,
5,192,0,0,1305,1307,5,571,0,0,1306,1305,1,0,0,0,1306,1307,1,0,0,0,1307,1308,
1,0,0,0,1308,1309,3,50,25,0,1309,49,1,0,0,0,1310,1322,3,52,26,0,1311,1312,
5,1133,0,0,1312,1317,3,54,27,0,1313,1314,5,1135,0,0,1314,1316,3,54,27,0,
1315,1313,1,0,0,0,1316,1319,1,0,0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,
1318,1320,1,0,0,0,1319,1317,1,0,0,0,1320,1321,5,1134,0,0,1321,1323,1,0,0,
0,1322,1311,1,0,0,0,1322,1323,1,0,0,0,1323,1324,1,0,0,0,1324,1325,5,12,0,
0,1325,1326,5,1133,0,0,1326,1327,3,10,5,0,1327,1330,5,1134,0,0,1328,1329,
5,1135,0,0,1329,1331,3,50,25,0,1330,1328,1,0,0,0,1330,1331,1,0,0,0,1331,
51,1,0,0,0,1332,1333,3,584,292,0,1333,53,1,0,0,0,1334,1335,3,584,292,0,1335,
55,1,0,0,0,1336,1338,5,33,0,0,1337,1339,3,644,322,0,1338,1337,1,0,0,0,1338,
1339,1,0,0,0,1339,1343,1,0,0,0,1340,1341,5,336,0,0,1341,1342,5,1124,0,0,
1342,1344,7,10,0,0,1343,1340,1,0,0,0,1343,1344,1,0,0,0,1344,1346,1,0,0,0,
1345,1347,3,64,32,0,1346,1345,1,0,0,0,1346,1347,1,0,0,0,1347,1351,1,0,0,
0,1348,1349,5,160,0,0,1349,1350,5,606,0,0,1350,1352,7,11,0,0,1351,1348,1,
0,0,0,1351,1352,1,0,0,0,1352,1353,1,0,0,0,1353,1354,5,671,0,0,1354,1359,
3,550,275,0,1355,1356,5,1133,0,0,1356,1357,3,616,308,0,1357,1358,5,1134,
0,0,1358,1360,1,0,0,0,1359,1355,1,0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,
0,0,1361,1381,5,12,0,0,1362,1364,5,1133,0,0,1363,1365,3,48,24,0,1364,1363,
1,0,0,0,1364,1365,1,0,0,0,1365,1366,1,0,0,0,1366,1367,3,200,100,0,1367,1368,
5,1134,0,0,1368,1382,1,0,0,0,1369,1371,3,48,24,0,1370,1369,1,0,0,0,1370,
1371,1,0,0,0,1371,1372,1,0,0,0,1372,1379,3,200,100,0,1373,1375,5,192,0,0,
1374,1376,7,12,0,0,1375,1374,1,0,0,0,1375,1376,1,0,0,0,1376,1377,1,0,0,0,
1377,1378,5,26,0,0,1378,1380,5,120,0,0,1379,1373,1,0,0,0,1379,1380,1,0,0,
0,1380,1382,1,0,0,0,1381,1362,1,0,0,0,1381,1370,1,0,0,0,1382,57,1,0,0,0,
1383,1385,5,42,0,0,1384,1383,1,0,0,0,1384,1385,1,0,0,0,1385,1386,1,0,0,0,
1386,1388,3,60,30,0,1387,1389,5,1124,0,0,1388,1387,1,0,0,0,1388,1389,1,0,
0,0,1389,1392,1,0,0,0,1390,1393,3,568,284,0,1391,1393,5,42,0,0,1392,1390,
1,0,0,0,1392,1391,1,0,0,0,1393,1417,1,0,0,0,1394,1396,5,42,0,0,1395,1394,
1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,0,0,1397,1399,5,27,0,0,1398,1400,
5,1124,0,0,1399,1398,1,0,0,0,1399,1400,1,0,0,0,1400,1401,1,0,0,0,1401,1417,
3,570,285,0,1402,1404,5,42,0,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,
1405,1,0,0,0,1405,1407,5,405,0,0,1406,1408,5,1124,0,0,1407,1406,1,0,0,0,
1407,1408,1,0,0,0,1408,1409,1,0,0,0,1409,1417,5,1148,0,0,1410,1411,5,134,
0,0,1411,1413,5,538,0,0,1412,1414,5,1124,0,0,1413,1412,1,0,0,0,1413,1414,
1,0,0,0,1414,1415,1,0,0,0,1415,1417,7,13,0,0,1416,1384,1,0,0,0,1416,1395,
1,0,0,0,1416,1403,1,0,0,0,1416,1410,1,0,0,0,1417,59,1,0,0,0,1418,1419,5,
25,0,0,1419,1424,5,153,0,0,1420,1424,5,841,0,0,1421,1422,5,222,0,0,1422,
1424,5,153,0,0,1423,1418,1,0,0,0,1423,1420,1,0,0,0,1423,1421,1,0,0,0,1424,
61,1,0,0,0,1425,1428,5,37,0,0,1426,1427,5,1133,0,0,1427,1429,5,1134,0,0,
1428,1426,1,0,0,0,1428,1429,1,0,0,0,1429,63,1,0,0,0,1430,1431,5,392,0,0,
1431,1434,5,1124,0,0,1432,1435,3,564,282,0,1433,1435,3,62,31,0,1434,1432,
1,0,0,0,1434,1433,1,0,0,0,1435,65,1,0,0,0,1436,1437,5,338,0,0,1437,1441,
3,68,34,0,1438,1440,3,70,35,0,1439,1438,1,0,0,0,1440,1443,1,0,0,0,1441,1439,
1,0,0,0,1441,1442,1,0,0,0,1442,1471,1,0,0,0,1443,1441,1,0,0,0,1444,1447,
5,417,0,0,1445,1448,3,590,295,0,1446,1448,3,688,344,0,1447,1445,1,0,0,0,
1447,1446,1,0,0,0,1448,1449,1,0,0,0,1449,1458,3,72,36,0,1450,1451,5,630,
0,0,1451,1455,3,68,34,0,1452,1454,3,70,35,0,1453,1452,1,0,0,0,1454,1457,
1,0,0,0,1455,1453,1,0,0,0,1455,1456,1,0,0,0,1456,1459,1,0,0,0,1457,1455,
1,0,0,0,1458,1450,1,0,0,0,1458,1459,1,0,0,0,1459,1468,1,0,0,0,1460,1461,
5,408,0,0,1461,1465,3,68,34,0,1462,1464,3,70,35,0,1463,1462,1,0,0,0,1464,
1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,1469,1,0,0,0,1467,
1465,1,0,0,0,1468,1460,1,0,0,0,1468,1469,1,0,0,0,1469,1471,1,0,0,0,1470,
1436,1,0,0,0,1470,1444,1,0,0,0,1471,67,1,0,0,0,1472,1477,5,315,0,0,1473,
1477,3,594,297,0,1474,1477,3,590,295,0,1475,1477,3,688,344,0,1476,1472,1,
0,0,0,1476,1473,1,0,0,0,1476,1474,1,0,0,0,1476,1475,1,0,0,0,1477,69,1,0,
0,0,1478,1479,5,1120,0,0,1479,1482,5,86,0,0,1480,1483,3,590,295,0,1481,1483,
3,688,344,0,1482,1480,1,0,0,0,1482,1481,1,0,0,0,1483,1484,1,0,0,0,1484,1485,
3,72,36,0,1485,71,1,0,0,0,1486,1500,3,714,357,0,1487,1500,5,221,0,0,1488,
1500,5,240,0,0,1489,1500,5,241,0,0,1490,1500,5,242,0,0,1491,1500,5,243,0,
0,1492,1500,5,244,0,0,1493,1500,5,245,0,0,1494,1500,5,246,0,0,1495,1500,
5,247,0,0,1496,1500,5,248,0,0,1497,1500,5,249,0,0,1498,1500,5,250,0,0,1499,
1486,1,0,0,0,1499,1487,1,0,0,0,1499,1488,1,0,0,0,1499,1489,1,0,0,0,1499,
1490,1,0,0,0,1499,1491,1,0,0,0,1499,1492,1,0,0,0,1499,1493,1,0,0,0,1499,
1494,1,0,0,0,1499,1495,1,0,0,0,1499,1496,1,0,0,0,1499,1497,1,0,0,0,1499,
1498,1,0,0,0,1500,73,1,0,0,0,1501,1507,5,403,0,0,1502,1507,5,396,0,0,1503,
1504,5,396,0,0,1504,1505,5,118,0,0,1505,1507,5,614,0,0,1506,1501,1,0,0,0,
1506,1502,1,0,0,0,1506,1503,1,0,0,0,1507,75,1,0,0,0,1508,1509,5,187,0,0,
1509,1510,7,14,0,0,1510,77,1,0,0,0,1511,1513,5,467,0,0,1512,1514,5,1124,
0,0,1513,1512,1,0,0,0,1513,1514,1,0,0,0,1514,1515,1,0,0,0,1515,1534,3,592,
296,0,1516,1534,3,76,38,0,1517,1518,5,192,0,0,1518,1519,5,547,0,0,1519,1534,
3,584,292,0,1520,1521,5,368,0,0,1521,1534,5,1148,0,0,1522,1534,7,15,0,0,
1523,1525,5,875,0,0,1524,1526,5,1124,0,0,1525,1524,1,0,0,0,1525,1526,1,0,
0,0,1526,1527,1,0,0,0,1527,1534,5,1148,0,0,1528,1530,5,1000,0,0,1529,1531,
5,1124,0,0,1530,1529,1,0,0,0,1530,1531,1,0,0,0,1531,1532,1,0,0,0,1532,1534,
5,1148,0,0,1533,1511,1,0,0,0,1533,1516,1,0,0,0,1533,1517,1,0,0,0,1533,1520,
1,0,0,0,1533,1522,1,0,0,0,1533,1523,1,0,0,0,1533,1528,1,0,0,0,1534,79,1,
0,0,0,1535,1537,7,16,0,0,1536,1535,1,0,0,0,1536,1537,1,0,0,0,1537,1538,1,
0,0,0,1538,1539,3,584,292,0,1539,1540,3,604,302,0,1540,81,1,0,0,0,1541,1542,
3,584,292,0,1542,1543,3,604,302,0,1543,83,1,0,0,0,1544,1545,5,368,0,0,1545,
1568,5,1148,0,0,1546,1547,5,468,0,0,1547,1568,5,160,0,0,1548,1550,5,114,
0,0,1549,1548,1,0,0,0,1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,1568,5,47,
0,0,1552,1553,5,381,0,0,1553,1563,5,160,0,0,1554,1555,5,521,0,0,1555,1563,
5,160,0,0,1556,1557,5,135,0,0,1557,1558,5,160,0,0,1558,1563,5,388,0,0,1559,
1560,5,112,0,0,1560,1561,5,160,0,0,1561,1563,5,388,0,0,1562,1552,1,0,0,0,
1562,1554,1,0,0,0,1562,1556,1,0,0,0,1562,1559,1,0,0,0,1563,1568,1,0,0,0,
1564,1565,5,160,0,0,1565,1566,5,606,0,0,1566,1568,7,11,0,0,1567,1544,1,0,
0,0,1567,1546,1,0,0,0,1567,1549,1,0,0,0,1567,1562,1,0,0,0,1567,1564,1,0,
0,0,1568,85,1,0,0,0,1569,1570,5,446,0,0,1570,1584,5,1148,0,0,1571,1572,5,
39,0,0,1572,1584,5,1148,0,0,1573,1574,5,665,0,0,1574,1584,5,1148,0,0,1575,
1576,5,551,0,0,1576,1584,5,1148,0,0,1577,1578,5,617,0,0,1578,1584,5,1148,
0,0,1579,1580,5,542,0,0,1580,1584,5,1148,0,0,1581,1582,5,557,0,0,1582,1584,
3,590,295,0,1583,1569,1,0,0,0,1583,1571,1,0,0,0,1583,1573,1,0,0,0,1583,1575,
1,0,0,0,1583,1577,1,0,0,0,1583,1579,1,0,0,0,1583,1581,1,0,0,0,1584,87,1,
0,0,0,1585,1586,5,1133,0,0,1586,1591,3,90,45,0,1587,1588,5,1135,0,0,1588,
1590,3,90,45,0,1589,1587,1,0,0,0,1590,1593,1,0,0,0,1591,1589,1,0,0,0,1591,
1592,1,0,0,0,1592,1594,1,0,0,0,1593,1591,1,0,0,0,1594,1595,5,1134,0,0,1595,
89,1,0,0,0,1596,1597,3,556,278,0,1597,1598,3,92,46,0,1598,1608,1,0,0,0,1599,
1601,3,96,48,0,1600,1602,5,114,0,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,
1604,1,0,0,0,1603,1605,5,57,0,0,1604,1603,1,0,0,0,1604,1605,1,0,0,0,1605,
1608,1,0,0,0,1606,1608,3,104,52,0,1607,1596,1,0,0,0,1607,1599,1,0,0,0,1607,
1606,1,0,0,0,1608,91,1,0,0,0,1609,1613,3,604,302,0,1610,1612,3,94,47,0,1611,
1610,1,0,0,0,1612,1615,1,0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,
1617,1,0,0,0,1615,1613,1,0,0,0,1616,1618,5,114,0,0,1617,1616,1,0,0,0,1617,
1618,1,0,0,0,1618,1620,1,0,0,0,1619,1621,5,57,0,0,1620,1619,1,0,0,0,1620,
1621,1,0,0,0,1621,93,1,0,0,0,1622,1676,3,600,300,0,1623,1624,5,42,0,0,1624,
1676,3,634,317,0,1625,1676,5,673,0,0,1626,1676,5,459,0,0,1627,1632,5,342,
0,0,1628,1629,5,118,0,0,1629,1630,5,184,0,0,1630,1632,3,636,318,0,1631,1627,
1,0,0,0,1631,1628,1,0,0,0,1632,1676,1,0,0,0,1633,1635,5,130,0,0,1634,1633,
1,0,0,0,1634,1635,1,0,0,0,1635,1636,1,0,0,0,1636,1676,5,91,0,0,1637,1639,
5,181,0,0,1638,1640,5,91,0,0,1639,1638,1,0,0,0,1639,1640,1,0,0,0,1640,1676,
1,0,0,0,1641,1642,5,368,0,0,1642,1676,5,1148,0,0,1643,1644,5,366,0,0,1644,
1676,7,17,0,0,1645,1646,5,636,0,0,1646,1676,7,18,0,0,1647,1676,3,98,49,0,
1648,1649,5,27,0,0,1649,1676,3,570,285,0,1650,1651,5,70,0,0,1651,1653,5,
8,0,0,1652,1650,1,0,0,0,1652,1653,1,0,0,0,1653,1654,1,0,0,0,1654,1655,5,
12,0,0,1655,1656,5,1133,0,0,1656,1657,3,688,344,0,1657,1659,5,1134,0,0,1658,
1660,7,19,0,0,1659,1658,1,0,0,0,1659,1660,1,0,0,0,1660,1676,1,0,0,0,1661,
1662,5,239,0,0,1662,1663,5,42,0,0,1663,1676,5,669,0,0,1664,1666,5,30,0,0,
1665,1667,3,584,292,0,1666,1665,1,0,0,0,1666,1667,1,0,0,0,1667,1669,1,0,
0,0,1668,1664,1,0,0,0,1668,1669,1,0,0,0,1669,1670,1,0,0,0,1670,1671,5,26,
0,0,1671,1672,5,1133,0,0,1672,1673,3,688,344,0,1673,1674,5,1134,0,0,1674,
1676,1,0,0,0,1675,1622,1,0,0,0,1675,1623,1,0,0,0,1675,1625,1,0,0,0,1675,
1626,1,0,0,0,1675,1631,1,0,0,0,1675,1634,1,0,0,0,1675,1637,1,0,0,0,1675,
1641,1,0,0,0,1675,1643,1,0,0,0,1675,1645,1,0,0,0,1675,1647,1,0,0,0,1675,
1648,1,0,0,0,1675,1652,1,0,0,0,1675,1661,1,0,0,0,1675,1668,1,0,0,0,1676,
95,1,0,0,0,1677,1679,5,30,0,0,1678,1680,3,584,292,0,1679,1678,1,0,0,0,1679,
1680,1,0,0,0,1680,1682,1,0,0,0,1681,1677,1,0,0,0,1681,1682,1,0,0,0,1682,
1683,1,0,0,0,1683,1684,5,130,0,0,1684,1686,5,91,0,0,1685,1687,3,584,292,
0,1686,1685,1,0,0,0,1686,1687,1,0,0,0,1687,1689,1,0,0,0,1688,1690,3,76,38,
0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,1691,1,0,0,0,1691,1695,3,622,
311,0,1692,1694,3,78,39,0,1693,1692,1,0,0,0,1694,1697,1,0,0,0,1695,1693,
1,0,0,0,1695,1696,1,0,0,0,1696,1747,1,0,0,0,1697,1695,1,0,0,0,1698,1700,
5,30,0,0,1699,1701,3,584,292,0,1700,1699,1,0,0,0,1700,1701,1,0,0,0,1701,
1703,1,0,0,0,1702,1698,1,0,0,0,1702,1703,1,0,0,0,1703,1704,1,0,0,0,1704,
1706,5,181,0,0,1705,1707,7,20,0,0,1706,1705,1,0,0,0,1706,1707,1,0,0,0,1707,
1709,1,0,0,0,1708,1710,3,584,292,0,1709,1708,1,0,0,0,1709,1710,1,0,0,0,1710,
1712,1,0,0,0,1711,1713,3,76,38,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,
1714,1,0,0,0,1714,1718,3,622,311,0,1715,1717,3,78,39,0,1716,1715,1,0,0,0,
1717,1720,1,0,0,0,1718,1716,1,0,0,0,1718,1719,1,0,0,0,1719,1747,1,0,0,0,
1720,1718,1,0,0,0,1721,1723,5,30,0,0,1722,1724,3,584,292,0,1723,1722,1,0,
0,0,1723,1724,1,0,0,0,1724,1726,1,0,0,0,1725,1721,1,0,0,0,1725,1726,1,0,
0,0,1726,1727,1,0,0,0,1727,1728,5,67,0,0,1728,1730,5,91,0,0,1729,1731,3,
584,292,0,1730,1729,1,0,0,0,1730,1731,1,0,0,0,1731,1732,1,0,0,0,1732,1733,
3,622,311,0,1733,1734,3,98,49,0,1734,1747,1,0,0,0,1735,1737,5,30,0,0,1736,
1738,3,584,292,0,1737,1736,1,0,0,0,1737,1738,1,0,0,0,1738,1740,1,0,0,0,1739,
1735,1,0,0,0,1739,1740,1,0,0,0,1740,1741,1,0,0,0,1741,1742,5,26,0,0,1742,
1743,5,1133,0,0,1743,1744,3,688,344,0,1744,1745,5,1134,0,0,1745,1747,1,0,
0,0,1746,1681,1,0,0,0,1746,1702,1,0,0,0,1746,1725,1,0,0,0,1746,1739,1,0,
0,0,1747,97,1,0,0,0,1748,1749,5,136,0,0,1749,1751,3,552,276,0,1750,1752,
3,622,311,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,1755,1,0,0,0,1753,1754,
5,109,0,0,1754,1756,7,21,0,0,1755,1753,1,0,0,0,1755,1756,1,0,0,0,1756,1758,
1,0,0,0,1757,1759,3,100,50,0,1758,1757,1,0,0,0,1758,1759,1,0,0,0,1759,99,
1,0,0,0,1760,1761,5,118,0,0,1761,1762,5,44,0,0,1762,1766,3,102,51,0,1763,
1764,5,118,0,0,1764,1765,5,184,0,0,1765,1767,3,102,51,0,1766,1763,1,0,0,
0,1766,1767,1,0,0,0,1767,1777,1,0,0,0,1768,1769,5,118,0,0,1769,1770,5,184,
0,0,1770,1774,3,102,51,0,1771,1772,5,118,0,0,1772,1773,5,44,0,0,1773,1775,
3,102,51,0,1774,1771,1,0,0,0,1774,1775,1,0,0,0,1775,1777,1,0,0,0,1776,1760,
1,0,0,0,1776,1768,1,0,0,0,1777,101,1,0,0,0,1778,1787,5,144,0,0,1779,1787,
5,21,0,0,1780,1781,5,153,0,0,1781,1787,5,116,0,0,1782,1783,5,521,0,0,1783,
1787,5,333,0,0,1784,1785,5,153,0,0,1785,1787,5,42,0,0,1786,1778,1,0,0,0,
1786,1779,1,0,0,0,1786,1780,1,0,0,0,1786,1782,1,0,0,0,1786,1784,1,0,0,0,
1787,103,1,0,0,0,1788,1790,7,20,0,0,1789,1791,3,584,292,0,1790,1789,1,0,
0,0,1790,1791,1,0,0,0,1791,1793,1,0,0,0,1792,1794,3,76,38,0,1793,1792,1,
0,0,0,1793,1794,1,0,0,0,1794,1795,1,0,0,0,1795,1799,3,622,311,0,1796,1798,
3,78,39,0,1797,1796,1,0,0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,
1,0,0,0,1800,1817,1,0,0,0,1801,1799,1,0,0,0,1802,1804,7,22,0,0,1803,1805,
7,20,0,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,1805,1807,1,0,0,0,1806,1808,
3,584,292,0,1807,1806,1,0,0,0,1807,1808,1,0,0,0,1808,1809,1,0,0,0,1809,1813,
3,622,311,0,1810,1812,3,78,39,0,1811,1810,1,0,0,0,1812,1815,1,0,0,0,1813,
1811,1,0,0,0,1813,1814,1,0,0,0,1814,1817,1,0,0,0,1815,1813,1,0,0,0,1816,
1788,1,0,0,0,1816,1802,1,0,0,0,1817,105,1,0,0,0,1818,1820,5,409,0,0,1819,
1821,5,1124,0,0,1820,1819,1,0,0,0,1820,1821,1,0,0,0,1821,1823,1,0,0,0,1822,
1824,3,572,286,0,1823,1822,1,0,0,0,1823,1824,1,0,0,0,1824,2004,1,0,0,0,1825,
1827,5,875,0,0,1826,1828,5,1124,0,0,1827,1826,1,0,0,0,1827,1828,1,0,0,0,
1828,1829,1,0,0,0,1829,2004,5,1148,0,0,1830,1832,5,341,0,0,1831,1833,5,1124,
0,0,1832,1831,1,0,0,0,1832,1833,1,0,0,0,1833,1834,1,0,0,0,1834,2004,3,590,
295,0,1835,1837,5,342,0,0,1836,1838,5,1124,0,0,1837,1836,1,0,0,0,1837,1838,
1,0,0,0,1838,1839,1,0,0,0,1839,2004,3,590,295,0,1840,1842,5,343,0,0,1841,
1843,5,1124,0,0,1842,1841,1,0,0,0,1842,1843,1,0,0,0,1843,1844,1,0,0,0,1844,
2004,3,590,295,0,1845,1847,5,42,0,0,1846,1845,1,0,0,0,1846,1847,1,0,0,0,
1847,1848,1,0,0,0,1848,1850,3,60,30,0,1849,1851,5,1124,0,0,1850,1849,1,0,
0,0,1850,1851,1,0,0,0,1851,1854,1,0,0,0,1852,1855,3,568,284,0,1853,1855,
5,42,0,0,1854,1852,1,0,0,0,1854,1853,1,0,0,0,1855,2004,1,0,0,0,1856,1858,
7,23,0,0,1857,1859,5,1124,0,0,1858,1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,
1,0,0,0,1860,2004,7,24,0,0,1861,1863,5,42,0,0,1862,1861,1,0,0,0,1862,1863,
1,0,0,0,1863,1864,1,0,0,0,1864,1866,5,27,0,0,1865,1867,5,1124,0,0,1866,1865,
1,0,0,0,1866,1867,1,0,0,0,1867,1868,1,0,0,0,1868,2004,3,570,285,0,1869,1871,
5,368,0,0,1870,1872,5,1124,0,0,1871,1870,1,0,0,0,1871,1872,1,0,0,0,1872,
1873,1,0,0,0,1873,2004,5,1148,0,0,1874,1876,5,373,0,0,1875,1877,5,1124,0,
0,1876,1875,1,0,0,0,1876,1877,1,0,0,0,1877,1878,1,0,0,0,1878,2004,7,25,0,
0,1879,1881,5,376,0,0,1880,1882,5,1124,0,0,1881,1880,1,0,0,0,1881,1882,1,
0,0,0,1882,1883,1,0,0,0,1883,2004,5,1148,0,0,1884,1885,7,26,0,0,1885,1887,
5,395,0,0,1886,1888,5,1124,0,0,1887,1886,1,0,0,0,1887,1888,1,0,0,0,1888,
1889,1,0,0,0,1889,2004,5,1148,0,0,1890,1892,5,393,0,0,1891,1893,5,1124,0,
0,1892,1891,1,0,0,0,1892,1893,1,0,0,0,1893,1894,1,0,0,0,1894,2004,7,24,0,
0,1895,1897,5,405,0,0,1896,1898,5,1124,0,0,1897,1896,1,0,0,0,1897,1898,1,
0,0,0,1898,1899,1,0,0,0,1899,2004,5,1148,0,0,1900,1902,7,27,0,0,1901,1903,
5,1124,0,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,1903,1904,1,0,0,0,1904,2004,
7,24,0,0,1905,1907,7,28,0,0,1906,1908,5,1124,0,0,1907,1906,1,0,0,0,1907,
1908,1,0,0,0,1908,1909,1,0,0,0,1909,2004,3,590,295,0,1910,1912,5,406,0,0,
1911,1913,5,1124,0,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,1914,1,0,0,
0,1914,2004,3,590,295,0,1915,1916,5,81,0,0,1916,1918,5,395,0,0,1917,1919,
5,1124,0,0,1918,1917,1,0,0,0,1918,1919,1,0,0,0,1919,1920,1,0,0,0,1920,2004,
5,1148,0,0,1921,1923,5,455,0,0,1922,1924,5,1124,0,0,1923,1922,1,0,0,0,1923,
1924,1,0,0,0,1924,1925,1,0,0,0,1925,2004,7,29,0,0,1926,1928,5,467,0,0,1927,
1929,5,1124,0,0,1928,1927,1,0,0,0,1928,1929,1,0,0,0,1929,1930,1,0,0,0,1930,
2004,3,592,296,0,1931,1933,5,500,0,0,1932,1934,5,1124,0,0,1933,1932,1,0,
0,0,1933,1934,1,0,0,0,1934,1935,1,0,0,0,1935,2004,3,590,295,0,1936,1938,
5,510,0,0,1937,1939,5,1124,0,0,1938,1937,1,0,0,0,1938,1939,1,0,0,0,1939,
1940,1,0,0,0,1940,2004,3,590,295,0,1941,1943,5,543,0,0,1942,1944,5,1124,
0,0,1943,1942,1,0,0,0,1943,1944,1,0,0,0,1944,1945,1,0,0,0,1945,2004,7,13,
0,0,1946,1948,5,551,0,0,1947,1949,5,1124,0,0,1948,1947,1,0,0,0,1948,1949,
1,0,0,0,1949,1950,1,0,0,0,1950,2004,5,1148,0,0,1951,1953,5,602,0,0,1952,
1954,5,1124,0,0,1953,1952,1,0,0,0,1953,1954,1,0,0,0,1954,1955,1,0,0,0,1955,
2004,7,30,0,0,1956,1957,5,629,0,0,1957,2004,5,653,0,0,1958,1960,5,1000,0,
0,1959,1961,5,1124,0,0,1960,1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,0,
0,0,1962,2004,5,1148,0,0,1963,1965,5,631,0,0,1964,1966,5,1124,0,0,1965,1964,
1,0,0,0,1965,1966,1,0,0,0,1966,1967,1,0,0,0,1967,2004,7,13,0,0,1968,1970,
5,632,0,0,1969,1971,5,1124,0,0,1970,1969,1,0,0,0,1970,1971,1,0,0,0,1971,
1972,1,0,0,0,1972,2004,7,13,0,0,1973,1975,5,633,0,0,1974,1976,5,1124,0,0,
1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,1979,1,0,0,0,1977,1980,5,42,0,0,
1978,1980,3,590,295,0,1979,1977,1,0,0,0,1979,1978,1,0,0,0,1980,2004,1,0,
0,0,1981,1982,5,647,0,0,1982,1984,3,584,292,0,1983,1985,3,110,55,0,1984,
1983,1,0,0,0,1984,1985,1,0,0,0,1985,2004,1,0,0,0,1986,1987,5,648,0,0,1987,
1988,5,1124,0,0,1988,2004,3,108,54,0,1989,2004,3,110,55,0,1990,1992,5,654,
0,0,1991,1993,5,1124,0,0,1992,1991,1,0,0,0,1992,1993,1,0,0,0,1993,1994,1,
0,0,0,1994,2004,7,24,0,0,1995,1997,5,180,0,0,1996,1998,5,1124,0,0,1997,1996,
1,0,0,0,1997,1998,1,0,0,0,1998,1999,1,0,0,0,1999,2000,5,1133,0,0,2000,2001,
3,620,310,0,2001,2002,5,1134,0,0,2002,2004,1,0,0,0,2003,1818,1,0,0,0,2003,
1825,1,0,0,0,2003,1830,1,0,0,0,2003,1835,1,0,0,0,2003,1840,1,0,0,0,2003,
1846,1,0,0,0,2003,1856,1,0,0,0,2003,1862,1,0,0,0,2003,1869,1,0,0,0,2003,
1874,1,0,0,0,2003,1879,1,0,0,0,2003,1884,1,0,0,0,2003,1890,1,0,0,0,2003,
1895,1,0,0,0,2003,1900,1,0,0,0,2003,1905,1,0,0,0,2003,1910,1,0,0,0,2003,
1915,1,0,0,0,2003,1921,1,0,0,0,2003,1926,1,0,0,0,2003,1931,1,0,0,0,2003,
1936,1,0,0,0,2003,1941,1,0,0,0,2003,1946,1,0,0,0,2003,1951,1,0,0,0,2003,
1956,1,0,0,0,2003,1958,1,0,0,0,2003,1963,1,0,0,0,2003,1968,1,0,0,0,2003,
1973,1,0,0,0,2003,1981,1,0,0,0,2003,1986,1,0,0,0,2003,1989,1,0,0,0,2003,
1990,1,0,0,0,2003,1995,1,0,0,0,2004,107,1,0,0,0,2005,2006,7,31,0,0,2006,
109,1,0,0,0,2007,2008,5,636,0,0,2008,2009,7,18,0,0,2009,111,1,0,0,0,2010,
2011,5,129,0,0,2011,2012,5,19,0,0,2012,2015,3,114,57,0,2013,2014,5,550,0,
0,2014,2016,3,590,295,0,2015,2013,1,0,0,0,2015,2016,1,0,0,0,2016,2024,1,
0,0,0,2017,2018,5,641,0,0,2018,2019,5,19,0,0,2019,2022,3,116,58,0,2020,2021,
5,642,0,0,2021,2023,3,590,295,0,2022,2020,1,0,0,0,2022,2023,1,0,0,0,2023,
2025,1,0,0,0,2024,2017,1,0,0,0,2024,2025,1,0,0,0,2025,2037,1,0,0,0,2026,
2027,5,1133,0,0,2027,2032,3,118,59,0,2028,2029,5,1135,0,0,2029,2031,3,118,
59,0,2030,2028,1,0,0,0,2031,2034,1,0,0,0,2032,2030,1,0,0,0,2032,2033,1,0,
0,0,2033,2035,1,0,0,0,2034,2032,1,0,0,0,2035,2036,5,1134,0,0,2036,2038,1,
0,0,0,2037,2026,1,0,0,0,2037,2038,1,0,0,0,2038,113,1,0,0,0,2039,2041,5,100,
0,0,2040,2039,1,0,0,0,2040,2041,1,0,0,0,2041,2042,1,0,0,0,2042,2043,5,443,
0,0,2043,2044,5,1133,0,0,2044,2045,3,688,344,0,2045,2046,5,1134,0,0,2046,
2086,1,0,0,0,2047,2049,5,100,0,0,2048,2047,1,0,0,0,2048,2049,1,0,0,0,2049,
2050,1,0,0,0,2050,2054,5,91,0,0,2051,2052,5,336,0,0,2052,2053,5,1124,0,0,
2053,2055,7,32,0,0,2054,2051,1,0,0,0,2054,2055,1,0,0,0,2055,2056,1,0,0,0,
2056,2058,5,1133,0,0,2057,2059,3,616,308,0,2058,2057,1,0,0,0,2058,2059,1,
0,0,0,2059,2060,1,0,0,0,2060,2086,5,1134,0,0,2061,2071,5,133,0,0,2062,2063,
5,1133,0,0,2063,2064,3,688,344,0,2064,2065,5,1134,0,0,2065,2072,1,0,0,0,
2066,2067,5,365,0,0,2067,2068,5,1133,0,0,2068,2069,3,616,308,0,2069,2070,
5,1134,0,0,2070,2072,1,0,0,0,2071,2062,1,0,0,0,2071,2066,1,0,0,0,2072,2086,
1,0,0,0,2073,2083,5,473,0,0,2074,2075,5,1133,0,0,2075,2076,3,688,344,0,2076,
2077,5,1134,0,0,2077,2084,1,0,0,0,2078,2079,5,365,0,0,2079,2080,5,1133,0,
0,2080,2081,3,616,308,0,2081,2082,5,1134,0,0,2082,2084,1,0,0,0,2083,2074,
1,0,0,0,2083,2078,1,0,0,0,2084,2086,1,0,0,0,2085,2040,1,0,0,0,2085,2048,
1,0,0,0,2085,2061,1,0,0,0,2085,2073,1,0,0,0,2086,115,1,0,0,0,2087,2089,5,
100,0,0,2088,2087,1,0,0,0,2088,2089,1,0,0,0,2089,2090,1,0,0,0,2090,2091,
5,443,0,0,2091,2092,5,1133,0,0,2092,2093,3,688,344,0,2093,2094,5,1134,0,
0,2094,2109,1,0,0,0,2095,2097,5,100,0,0,2096,2095,1,0,0,0,2096,2097,1,0,
0,0,2097,2098,1,0,0,0,2098,2102,5,91,0,0,2099,2100,5,336,0,0,2100,2101,5,
1124,0,0,2101,2103,7,32,0,0,2102,2099,1,0,0,0,2102,2103,1,0,0,0,2103,2104,
1,0,0,0,2104,2105,5,1133,0,0,2105,2106,3,616,308,0,2106,2107,5,1134,0,0,
2107,2109,1,0,0,0,2108,2088,1,0,0,0,2108,2096,1,0,0,0,2109,117,1,0,0,0,2110,
2111,5,129,0,0,2111,2112,3,584,292,0,2112,2113,5,188,0,0,2113,2114,5,471,
0,0,2114,2115,5,651,0,0,2115,2116,5,1133,0,0,2116,2121,3,120,60,0,2117,2118,
5,1135,0,0,2118,2120,3,120,60,0,2119,2117,1,0,0,0,2120,2123,1,0,0,0,2121,
2119,1,0,0,0,2121,2122,1,0,0,0,2122,2124,1,0,0,0,2123,2121,1,0,0,0,2124,
2128,5,1134,0,0,2125,2127,3,126,63,0,2126,2125,1,0,0,0,2127,2130,1,0,0,0,
2128,2126,1,0,0,0,2128,2129,1,0,0,0,2129,2142,1,0,0,0,2130,2128,1,0,0,0,
2131,2132,5,1133,0,0,2132,2137,3,124,62,0,2133,2134,5,1135,0,0,2134,2136,
3,124,62,0,2135,2133,1,0,0,0,2136,2139,1,0,0,0,2137,2135,1,0,0,0,2137,2138,
1,0,0,0,2138,2140,1,0,0,0,2139,2137,1,0,0,0,2140,2141,5,1134,0,0,2141,2143,
1,0,0,0,2142,2131,1,0,0,0,2142,2143,1,0,0,0,2143,2257,1,0,0,0,2144,2145,
5,129,0,0,2145,2146,3,584,292,0,2146,2147,5,188,0,0,2147,2148,5,471,0,0,
2148,2149,5,651,0,0,2149,2153,3,120,60,0,2150,2152,3,126,63,0,2151,2150,
1,0,0,0,2152,2155,1,0,0,0,2153,2151,1,0,0,0,2153,2154,1,0,0,0,2154,2167,
1,0,0,0,2155,2153,1,0,0,0,2156,2157,5,1133,0,0,2157,2162,3,124,62,0,2158,
2159,5,1135,0,0,2159,2161,3,124,62,0,2160,2158,1,0,0,0,2161,2164,1,0,0,0,
2162,2160,1,0,0,0,2162,2163,1,0,0,0,2163,2165,1,0,0,0,2164,2162,1,0,0,0,
2165,2166,5,1134,0,0,2166,2168,1,0,0,0,2167,2156,1,0,0,0,2167,2168,1,0,0,
0,2168,2257,1,0,0,0,2169,2170,5,129,0,0,2170,2171,3,584,292,0,2171,2172,
5,188,0,0,2172,2173,5,80,0,0,2173,2174,5,1133,0,0,2174,2179,3,120,60,0,2175,
2176,5,1135,0,0,2176,2178,3,120,60,0,2177,2175,1,0,0,0,2178,2181,1,0,0,0,
2179,2177,1,0,0,0,2179,2180,1,0,0,0,2180,2182,1,0,0,0,2181,2179,1,0,0,0,
2182,2186,5,1134,0,0,2183,2185,3,126,63,0,2184,2183,1,0,0,0,2185,2188,1,
0,0,0,2186,2184,1,0,0,0,2186,2187,1,0,0,0,2187,2200,1,0,0,0,2188,2186,1,
0,0,0,2189,2190,5,1133,0,0,2190,2195,3,124,62,0,2191,2192,5,1135,0,0,2192,
2194,3,124,62,0,2193,2191,1,0,0,0,2194,2197,1,0,0,0,2195,2193,1,0,0,0,2195,
2196,1,0,0,0,2196,2198,1,0,0,0,2197,2195,1,0,0,0,2198,2199,5,1134,0,0,2199,
2201,1,0,0,0,2200,2189,1,0,0,0,2200,2201,1,0,0,0,2201,2257,1,0,0,0,2202,
2203,5,129,0,0,2203,2204,3,584,292,0,2204,2205,5,188,0,0,2205,2206,5,80,
0,0,2206,2207,5,1133,0,0,2207,2212,3,122,61,0,2208,2209,5,1135,0,0,2209,
2211,3,122,61,0,2210,2208,1,0,0,0,2211,2214,1,0,0,0,2212,2210,1,0,0,0,2212,
2213,1,0,0,0,2213,2215,1,0,0,0,2214,2212,1,0,0,0,2215,2219,5,1134,0,0,2216,
2218,3,126,63,0,2217,2216,1,0,0,0,2218,2221,1,0,0,0,2219,2217,1,0,0,0,2219,
2220,1,0,0,0,2220,2233,1,0,0,0,2221,2219,1,0,0,0,2222,2223,5,1133,0,0,2223,
2228,3,124,62,0,2224,2225,5,1135,0,0,2225,2227,3,124,62,0,2226,2224,1,0,
0,0,2227,2230,1,0,0,0,2228,2226,1,0,0,0,2228,2229,1,0,0,0,2229,2231,1,0,
0,0,2230,2228,1,0,0,0,2231,2232,5,1134,0,0,2232,2234,1,0,0,0,2233,2222,1,
0,0,0,2233,2234,1,0,0,0,2234,2257,1,0,0,0,2235,2236,5,129,0,0,2236,2240,
3,584,292,0,2237,2239,3,126,63,0,2238,2237,1,0,0,0,2239,2242,1,0,0,0,2240,
2238,1,0,0,0,2240,2241,1,0,0,0,2241,2254,1,0,0,0,2242,2240,1,0,0,0,2243,
2244,5,1133,0,0,2244,2249,3,124,62,0,2245,2246,5,1135,0,0,2246,2248,3,124,
62,0,2247,2245,1,0,0,0,2248,2251,1,0,0,0,2249,2247,1,0,0,0,2249,2250,1,0,
0,0,2250,2252,1,0,0,0,2251,2249,1,0,0,0,2252,2253,5,1134,0,0,2253,2255,1,
0,0,0,2254,2243,1,0,0,0,2254,2255,1,0,0,0,2255,2257,1,0,0,0,2256,2110,1,
0,0,0,2256,2144,1,0,0,0,2256,2169,1,0,0,0,2256,2202,1,0,0,0,2256,2235,1,
0,0,0,2257,119,1,0,0,0,2258,2262,3,602,301,0,2259,2262,3,688,344,0,2260,
2262,5,110,0,0,2261,2258,1,0,0,0,2261,2259,1,0,0,0,2261,2260,1,0,0,0,2262,
121,1,0,0,0,2263,2264,5,1133,0,0,2264,2267,3,120,60,0,2265,2266,5,1135,0,
0,2266,2268,3,120,60,0,2267,2265,1,0,0,0,2268,2269,1,0,0,0,2269,2267,1,0,
0,0,2269,2270,1,0,0,0,2270,2271,1,0,0,0,2271,2272,5,1134,0,0,2272,123,1,
0,0,0,2273,2274,5,641,0,0,2274,2278,3,584,292,0,2275,2277,3,126,63,0,2276,
2275,1,0,0,0,2277,2280,1,0,0,0,2278,2276,1,0,0,0,2278,2279,1,0,0,0,2279,
125,1,0,0,0,2280,2278,1,0,0,0,2281,2283,5,42,0,0,2282,2281,1,0,0,0,2282,
2283,1,0,0,0,2283,2285,1,0,0,0,2284,2286,5,636,0,0,2285,2284,1,0,0,0,2285,
2286,1,0,0,0,2286,2287,1,0,0,0,2287,2289,5,409,0,0,2288,2290,5,1124,0,0,
2289,2288,1,0,0,0,2289,2290,1,0,0,0,2290,2291,1,0,0,0,2291,2330,3,572,286,
0,2292,2294,5,368,0,0,2293,2295,5,1124,0,0,2294,2293,1,0,0,0,2294,2295,1,
0,0,0,2295,2296,1,0,0,0,2296,2330,5,1148,0,0,2297,2298,5,388,0,0,2298,2300,
5,395,0,0,2299,2301,5,1124,0,0,2300,2299,1,0,0,0,2300,2301,1,0,0,0,2301,
2302,1,0,0,0,2302,2330,5,1148,0,0,2303,2304,5,81,0,0,2304,2306,5,395,0,0,
2305,2307,5,1124,0,0,2306,2305,1,0,0,0,2306,2307,1,0,0,0,2307,2308,1,0,0,
0,2308,2330,5,1148,0,0,2309,2311,5,500,0,0,2310,2312,5,1124,0,0,2311,2310,
1,0,0,0,2311,2312,1,0,0,0,2312,2313,1,0,0,0,2313,2330,3,590,295,0,2314,2316,
5,510,0,0,2315,2317,5,1124,0,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,2317,
2318,1,0,0,0,2318,2330,3,590,295,0,2319,2321,5,647,0,0,2320,2322,5,1124,
0,0,2321,2320,1,0,0,0,2321,2322,1,0,0,0,2322,2323,1,0,0,0,2323,2330,3,584,
292,0,2324,2326,5,528,0,0,2325,2327,5,1124,0,0,2326,2325,1,0,0,0,2326,2327,
1,0,0,0,2327,2328,1,0,0,0,2328,2330,3,584,292,0,2329,2282,1,0,0,0,2329,2292,
1,0,0,0,2329,2297,1,0,0,0,2329,2303,1,0,0,0,2329,2309,1,0,0,0,2329,2314,
1,0,0,0,2329,2319,1,0,0,0,2329,2324,1,0,0,0,2330,127,1,0,0,0,2331,2332,5,
7,0,0,2332,2334,7,0,0,0,2333,2335,3,584,292,0,2334,2333,1,0,0,0,2334,2335,
1,0,0,0,2335,2337,1,0,0,0,2336,2338,3,58,29,0,2337,2336,1,0,0,0,2338,2339,
1,0,0,0,2339,2337,1,0,0,0,2339,2340,1,0,0,0,2340,2350,1,0,0,0,2341,2342,
5,7,0,0,2342,2343,7,0,0,0,2343,2344,3,584,292,0,2344,2345,5,664,0,0,2345,
2346,5,388,0,0,2346,2347,5,395,0,0,2347,2348,5,516,0,0,2348,2350,1,0,0,0,
2349,2331,1,0,0,0,2349,2341,1,0,0,0,2350,129,1,0,0,0,2351,2353,5,7,0,0,2352,
2354,3,64,32,0,2353,2352,1,0,0,0,2353,2354,1,0,0,0,2354,2355,1,0,0,0,2355,
2356,5,415,0,0,2356,2360,3,550,275,0,2357,2358,5,118,0,0,2358,2359,5,605,
0,0,2359,2361,3,66,33,0,2360,2357,1,0,0,0,2360,2361,1,0,0,0,2361,2368,1,
0,0,0,2362,2363,5,118,0,0,2363,2365,5,371,0,0,2364,2366,5,114,0,0,2365,2364,
1,0,0,0,2365,2366,1,0,0,0,2366,2367,1,0,0,0,2367,2369,5,561,0,0,2368,2362,
1,0,0,0,2368,2369,1,0,0,0,2369,2373,1,0,0,0,2370,2371,5,139,0,0,2371,2372,
5,175,0,0,2372,2374,3,550,275,0,2373,2370,1,0,0,0,2373,2374,1,0,0,0,2374,
2376,1,0,0,0,2375,2377,3,74,37,0,2376,2375,1,0,0,0,2376,2377,1,0,0,0,2377,
2380,1,0,0,0,2378,2379,5,368,0,0,2379,2381,5,1148,0,0,2380,2378,1,0,0,0,
2380,2381,1,0,0,0,2381,2384,1,0,0,0,2382,2383,5,399,0,0,2383,2385,3,388,
194,0,2384,2382,1,0,0,0,2384,2385,1,0,0,0,2385,131,1,0,0,0,2386,2387,5,7,
0,0,2387,2388,5,437,0,0,2388,2392,3,550,275,0,2389,2391,3,84,42,0,2390,2389,
1,0,0,0,2391,2394,1,0,0,0,2392,2390,1,0,0,0,2392,2393,1,0,0,0,2393,133,1,
0,0,0,2394,2392,1,0,0,0,2395,2396,5,7,0,0,2396,2397,5,457,0,0,2397,2398,
5,599,0,0,2398,2399,5,791,0,0,2399,2400,5,477,0,0,2400,2401,5,91,0,0,2401,
135,1,0,0,0,2402,2403,5,7,0,0,2403,2404,5,475,0,0,2404,2405,5,73,0,0,2405,
2406,3,584,292,0,2406,2407,5,5,0,0,2407,2408,5,659,0,0,2408,2414,5,1148,
0,0,2409,2411,5,453,0,0,2410,2412,5,1124,0,0,2411,2410,1,0,0,0,2411,2412,
1,0,0,0,2412,2413,1,0,0,0,2413,2415,3,592,296,0,2414,2409,1,0,0,0,2414,2415,
1,0,0,0,2415,2417,1,0,0,0,2416,2418,5,674,0,0,2417,2416,1,0,0,0,2417,2418,
1,0,0,0,2418,2419,1,0,0,0,2419,2421,5,409,0,0,2420,2422,5,1124,0,0,2421,
2420,1,0,0,0,2421,2422,1,0,0,0,2422,2423,1,0,0,0,2423,2424,3,572,286,0,2424,
137,1,0,0,0,2425,2426,5,7,0,0,2426,2427,5,131,0,0,2427,2431,3,550,275,0,
2428,2430,3,84,42,0,2429,2428,1,0,0,0,2430,2433,1,0,0,0,2431,2429,1,0,0,
0,2431,2432,1,0,0,0,2432,139,1,0,0,0,2433,2431,1,0,0,0,2434,2435,5,7,0,0,
2435,2436,5,608,0,0,2436,2437,3,584,292,0,2437,2438,5,541,0,0,2438,2439,
5,1133,0,0,2439,2444,3,86,43,0,2440,2441,5,1135,0,0,2441,2443,3,86,43,0,
2442,2440,1,0,0,0,2443,2446,1,0,0,0,2444,2442,1,0,0,0,2444,2445,1,0,0,0,
2445,2447,1,0,0,0,2446,2444,1,0,0,0,2447,2448,5,1134,0,0,2448,141,1,0,0,
0,2449,2451,5,7,0,0,2450,2452,7,1,0,0,2451,2450,1,0,0,0,2451,2452,1,0,0,
0,2452,2454,1,0,0,0,2453,2455,5,78,0,0,2454,2453,1,0,0,0,2454,2455,1,0,0,
0,2455,2456,1,0,0,0,2456,2457,5,172,0,0,2457,2459,3,552,276,0,2458,2460,
3,646,323,0,2459,2458,1,0,0,0,2459,2460,1,0,0,0,2460,2469,1,0,0,0,2461,2466,
3,148,74,0,2462,2463,5,1135,0,0,2463,2465,3,148,74,0,2464,2462,1,0,0,0,2465,
2468,1,0,0,0,2466,2464,1,0,0,0,2466,2467,1,0,0,0,2467,2470,1,0,0,0,2468,
2466,1,0,0,0,2469,2461,1,0,0,0,2469,2470,1,0,0,0,2470,2472,1,0,0,0,2471,
2473,3,112,56,0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,143,1,0,0,0,2474,
2475,5,7,0,0,2475,2476,5,647,0,0,2476,2477,3,584,292,0,2477,2478,7,33,0,
0,2478,2479,5,389,0,0,2479,2483,5,1148,0,0,2480,2481,5,453,0,0,2481,2482,
5,1124,0,0,2482,2484,3,592,296,0,2483,2480,1,0,0,0,2483,2484,1,0,0,0,2484,
2486,1,0,0,0,2485,2487,5,674,0,0,2486,2485,1,0,0,0,2486,2487,1,0,0,0,2487,
2488,1,0,0,0,2488,2490,5,409,0,0,2489,2491,5,1124,0,0,2490,2489,1,0,0,0,
2490,2491,1,0,0,0,2491,2492,1,0,0,0,2492,2493,3,572,286,0,2493,145,1,0,0,
0,2494,2498,5,7,0,0,2495,2496,5,336,0,0,2496,2497,5,1124,0,0,2497,2499,7,
10,0,0,2498,2495,1,0,0,0,2498,2499,1,0,0,0,2499,2501,1,0,0,0,2500,2502,3,
64,32,0,2501,2500,1,0,0,0,2501,2502,1,0,0,0,2502,2506,1,0,0,0,2503,2504,
5,160,0,0,2504,2505,5,606,0,0,2505,2507,7,11,0,0,2506,2503,1,0,0,0,2506,
2507,1,0,0,0,2507,2508,1,0,0,0,2508,2509,5,671,0,0,2509,2514,3,550,275,0,
2510,2511,5,1133,0,0,2511,2512,3,616,308,0,2512,2513,5,1134,0,0,2513,2515,
1,0,0,0,2514,2510,1,0,0,0,2514,2515,1,0,0,0,2515,2516,1,0,0,0,2516,2517,
5,12,0,0,2517,2524,3,200,100,0,2518,2520,5,192,0,0,2519,2521,7,12,0,0,2520,
2519,1,0,0,0,2520,2521,1,0,0,0,2521,2522,1,0,0,0,2522,2523,5,26,0,0,2523,
2525,5,120,0,0,2524,2518,1,0,0,0,2524,2525,1,0,0,0,2525,147,1,0,0,0,2526,
2533,3,106,53,0,2527,2529,5,1135,0,0,2528,2527,1,0,0,0,2528,2529,1,0,0,0,
2529,2530,1,0,0,0,2530,2532,3,106,53,0,2531,2528,1,0,0,0,2532,2535,1,0,0,
0,2533,2531,1,0,0,0,2533,2534,1,0,0,0,2534,2878,1,0,0,0,2535,2533,1,0,0,
0,2536,2538,5,5,0,0,2537,2539,5,28,0,0,2538,2537,1,0,0,0,2538,2539,1,0,0,
0,2539,2540,1,0,0,0,2540,2541,3,584,292,0,2541,2545,3,92,46,0,2542,2546,
5,430,0,0,2543,2544,5,334,0,0,2544,2546,3,584,292,0,2545,2542,1,0,0,0,2545,
2543,1,0,0,0,2545,2546,1,0,0,0,2546,2878,1,0,0,0,2547,2549,5,5,0,0,2548,
2550,5,28,0,0,2549,2548,1,0,0,0,2549,2550,1,0,0,0,2550,2551,1,0,0,0,2551,
2552,5,1133,0,0,2552,2553,3,584,292,0,2553,2560,3,92,46,0,2554,2555,5,1135,
0,0,2555,2556,3,584,292,0,2556,2557,3,92,46,0,2557,2559,1,0,0,0,2558,2554,
1,0,0,0,2559,2562,1,0,0,0,2560,2558,1,0,0,0,2560,2561,1,0,0,0,2561,2563,
1,0,0,0,2562,2560,1,0,0,0,2563,2564,5,1134,0,0,2564,2878,1,0,0,0,2565,2566,
5,5,0,0,2566,2568,7,20,0,0,2567,2569,3,584,292,0,2568,2567,1,0,0,0,2568,
2569,1,0,0,0,2569,2571,1,0,0,0,2570,2572,3,76,38,0,2571,2570,1,0,0,0,2571,
2572,1,0,0,0,2572,2573,1,0,0,0,2573,2577,3,622,311,0,2574,2576,3,78,39,0,
2575,2574,1,0,0,0,2576,2579,1,0,0,0,2577,2575,1,0,0,0,2577,2578,1,0,0,0,
2578,2878,1,0,0,0,2579,2577,1,0,0,0,2580,2585,5,5,0,0,2581,2583,5,30,0,0,
2582,2584,3,584,292,0,2583,2582,1,0,0,0,2583,2584,1,0,0,0,2584,2586,1,0,
0,0,2585,2581,1,0,0,0,2585,2586,1,0,0,0,2586,2587,1,0,0,0,2587,2588,5,130,
0,0,2588,2590,5,91,0,0,2589,2591,3,584,292,0,2590,2589,1,0,0,0,2590,2591,
1,0,0,0,2591,2593,1,0,0,0,2592,2594,3,76,38,0,2593,2592,1,0,0,0,2593,2594,
1,0,0,0,2594,2595,1,0,0,0,2595,2599,3,622,311,0,2596,2598,3,78,39,0,2597,
2596,1,0,0,0,2598,2601,1,0,0,0,2599,2597,1,0,0,0,2599,2600,1,0,0,0,2600,
2878,1,0,0,0,2601,2599,1,0,0,0,2602,2607,5,5,0,0,2603,2605,5,30,0,0,2604,
2606,3,584,292,0,2605,2604,1,0,0,0,2605,2606,1,0,0,0,2606,2608,1,0,0,0,2607,
2603,1,0,0,0,2607,2608,1,0,0,0,2608,2609,1,0,0,0,2609,2611,5,181,0,0,2610,
2612,7,20,0,0,2611,2610,1,0,0,0,2611,2612,1,0,0,0,2612,2614,1,0,0,0,2613,
2615,3,584,292,0,2614,2613,1,0,0,0,2614,2615,1,0,0,0,2615,2617,1,0,0,0,2616,
2618,3,76,38,0,2617,2616,1,0,0,0,2617,2618,1,0,0,0,2618,2619,1,0,0,0,2619,
2623,3,622,311,0,2620,2622,3,78,39,0,2621,2620,1,0,0,0,2622,2625,1,0,0,0,
2623,2621,1,0,0,0,2623,2624,1,0,0,0,2624,2878,1,0,0,0,2625,2623,1,0,0,0,
2626,2627,5,5,0,0,2627,2629,7,22,0,0,2628,2630,7,20,0,0,2629,2628,1,0,0,
0,2629,2630,1,0,0,0,2630,2632,1,0,0,0,2631,2633,3,584,292,0,2632,2631,1,
0,0,0,2632,2633,1,0,0,0,2633,2634,1,0,0,0,2634,2638,3,622,311,0,2635,2637,
3,78,39,0,2636,2635,1,0,0,0,2637,2640,1,0,0,0,2638,2636,1,0,0,0,2638,2639,
1,0,0,0,2639,2878,1,0,0,0,2640,2638,1,0,0,0,2641,2646,5,5,0,0,2642,2644,
5,30,0,0,2643,2645,3,584,292,0,2644,2643,1,0,0,0,2644,2645,1,0,0,0,2645,
2647,1,0,0,0,2646,2642,1,0,0,0,2646,2647,1,0,0,0,2647,2648,1,0,0,0,2648,
2649,5,67,0,0,2649,2651,5,91,0,0,2650,2652,3,584,292,0,2651,2650,1,0,0,0,
2651,2652,1,0,0,0,2652,2653,1,0,0,0,2653,2654,3,622,311,0,2654,2655,3,98,
49,0,2655,2878,1,0,0,0,2656,2661,5,5,0,0,2657,2659,5,30,0,0,2658,2660,3,
584,292,0,2659,2658,1,0,0,0,2659,2660,1,0,0,0,2660,2662,1,0,0,0,2661,2657,
1,0,0,0,2661,2662,1,0,0,0,2662,2663,1,0,0,0,2663,2670,5,26,0,0,2664,2671,
3,584,292,0,2665,2671,3,594,297,0,2666,2667,5,1133,0,0,2667,2668,3,688,344,
0,2668,2669,5,1134,0,0,2669,2671,1,0,0,0,2670,2664,1,0,0,0,2670,2665,1,0,
0,0,2670,2666,1,0,0,0,2671,2673,1,0,0,0,2672,2674,5,114,0,0,2673,2672,1,
0,0,0,2673,2674,1,0,0,0,2674,2676,1,0,0,0,2675,2677,5,57,0,0,2676,2675,1,
0,0,0,2676,2677,1,0,0,0,2677,2878,1,0,0,0,2678,2683,5,7,0,0,2679,2681,5,
30,0,0,2680,2682,3,584,292,0,2681,2680,1,0,0,0,2681,2682,1,0,0,0,2682,2684,
1,0,0,0,2683,2679,1,0,0,0,2683,2684,1,0,0,0,2684,2685,1,0,0,0,2685,2692,
5,26,0,0,2686,2693,3,584,292,0,2687,2693,3,594,297,0,2688,2689,5,1133,0,
0,2689,2690,3,688,344,0,2690,2691,5,1134,0,0,2691,2693,1,0,0,0,2692,2686,
1,0,0,0,2692,2687,1,0,0,0,2692,2688,1,0,0,0,2693,2695,1,0,0,0,2694,2696,
5,114,0,0,2695,2694,1,0,0,0,2695,2696,1,0,0,0,2696,2698,1,0,0,0,2697,2699,
5,57,0,0,2698,2697,1,0,0,0,2698,2699,1,0,0,0,2699,2878,1,0,0,0,2700,2705,
5,5,0,0,2701,2703,5,30,0,0,2702,2704,3,584,292,0,2703,2702,1,0,0,0,2703,
2704,1,0,0,0,2704,2706,1,0,0,0,2705,2701,1,0,0,0,2705,2706,1,0,0,0,2706,
2707,1,0,0,0,2707,2708,5,26,0,0,2708,2709,5,1133,0,0,2709,2710,3,688,344,
0,2710,2711,5,1134,0,0,2711,2878,1,0,0,0,2712,2714,5,336,0,0,2713,2715,5,
1124,0,0,2714,2713,1,0,0,0,2714,2715,1,0,0,0,2715,2716,1,0,0,0,2716,2878,
7,34,0,0,2717,2719,5,7,0,0,2718,2720,5,28,0,0,2719,2718,1,0,0,0,2719,2720,
1,0,0,0,2720,2721,1,0,0,0,2721,2727,3,584,292,0,2722,2723,5,153,0,0,2723,
2724,5,42,0,0,2724,2728,3,634,317,0,2725,2726,5,51,0,0,2726,2728,5,42,0,
0,2727,2722,1,0,0,0,2727,2725,1,0,0,0,2728,2878,1,0,0,0,2729,2731,5,24,0,
0,2730,2732,5,28,0,0,2731,2730,1,0,0,0,2731,2732,1,0,0,0,2732,2733,1,0,0,
0,2733,2734,3,584,292,0,2734,2735,3,584,292,0,2735,2739,3,92,46,0,2736,2740,
5,430,0,0,2737,2738,5,334,0,0,2738,2740,3,584,292,0,2739,2736,1,0,0,0,2739,
2737,1,0,0,0,2739,2740,1,0,0,0,2740,2878,1,0,0,0,2741,2742,5,139,0,0,2742,
2743,5,28,0,0,2743,2744,3,584,292,0,2744,2745,5,175,0,0,2745,2746,3,584,
292,0,2746,2878,1,0,0,0,2747,2749,5,103,0,0,2748,2750,5,1124,0,0,2749,2748,
1,0,0,0,2749,2750,1,0,0,0,2750,2751,1,0,0,0,2751,2878,7,4,0,0,2752,2754,
5,512,0,0,2753,2755,5,28,0,0,2754,2753,1,0,0,0,2754,2755,1,0,0,0,2755,2756,
1,0,0,0,2756,2757,3,584,292,0,2757,2761,3,92,46,0,2758,2762,5,430,0,0,2759,
2760,5,334,0,0,2760,2762,3,584,292,0,2761,2758,1,0,0,0,2761,2759,1,0,0,0,
2761,2762,1,0,0,0,2762,2878,1,0,0,0,2763,2765,5,51,0,0,2764,2766,5,28,0,
0,2765,2764,1,0,0,0,2765,2766,1,0,0,0,2766,2767,1,0,0,0,2767,2769,3,584,
292,0,2768,2770,5,144,0,0,2769,2768,1,0,0,0,2769,2770,1,0,0,0,2770,2878,
1,0,0,0,2771,2772,5,51,0,0,2772,2773,7,35,0,0,2773,2878,3,584,292,0,2774,
2775,5,51,0,0,2775,2776,5,130,0,0,2776,2878,5,91,0,0,2777,2778,5,51,0,0,
2778,2779,7,20,0,0,2779,2878,3,584,292,0,2780,2781,5,139,0,0,2781,2782,7,
20,0,0,2782,2783,3,584,292,0,2783,2784,5,175,0,0,2784,2785,3,584,292,0,2785,
2878,1,0,0,0,2786,2788,5,7,0,0,2787,2789,5,28,0,0,2788,2787,1,0,0,0,2788,
2789,1,0,0,0,2789,2790,1,0,0,0,2790,2804,3,584,292,0,2791,2792,5,153,0,0,
2792,2798,5,42,0,0,2793,2799,3,594,297,0,2794,2795,5,1133,0,0,2795,2796,
3,688,344,0,2796,2797,5,1134,0,0,2797,2799,1,0,0,0,2798,2793,1,0,0,0,2798,
2794,1,0,0,0,2799,2805,1,0,0,0,2800,2801,5,153,0,0,2801,2805,7,15,0,0,2802,
2803,5,51,0,0,2803,2805,5,42,0,0,2804,2791,1,0,0,0,2804,2800,1,0,0,0,2804,
2802,1,0,0,0,2805,2878,1,0,0,0,2806,2807,5,7,0,0,2807,2808,5,81,0,0,2808,
2809,3,584,292,0,2809,2810,7,15,0,0,2810,2878,1,0,0,0,2811,2812,5,51,0,0,
2812,2813,5,67,0,0,2813,2814,5,91,0,0,2814,2878,3,584,292,0,2815,2816,5,
396,0,0,2816,2878,5,92,0,0,2817,2818,5,403,0,0,2818,2878,5,92,0,0,2819,2821,
5,139,0,0,2820,2822,7,36,0,0,2821,2820,1,0,0,0,2821,2822,1,0,0,0,2822,2825,
1,0,0,0,2823,2826,3,584,292,0,2824,2826,3,550,275,0,2825,2823,1,0,0,0,2825,
2824,1,0,0,0,2826,2878,1,0,0,0,2827,2828,5,124,0,0,2828,2829,5,19,0,0,2829,
2878,3,616,308,0,2830,2831,5,32,0,0,2831,2835,5,175,0,0,2832,2836,5,841,
0,0,2833,2834,5,25,0,0,2834,2836,5,153,0,0,2835,2832,1,0,0,0,2835,2833,1,
0,0,0,2836,2837,1,0,0,0,2837,2840,3,568,284,0,2838,2839,5,27,0,0,2839,2841,
3,570,285,0,2840,2838,1,0,0,0,2840,2841,1,0,0,0,2841,2878,1,0,0,0,2842,2844,
5,42,0,0,2843,2842,1,0,0,0,2843,2844,1,0,0,0,2844,2845,1,0,0,0,2845,2846,
5,25,0,0,2846,2847,5,153,0,0,2847,2848,5,1124,0,0,2848,2852,3,568,284,0,
2849,2850,5,27,0,0,2850,2851,5,1124,0,0,2851,2853,3,570,285,0,2852,2849,
1,0,0,0,2852,2853,1,0,0,0,2853,2878,1,0,0,0,2854,2855,5,397,0,0,2855,2878,
5,647,0,0,2856,2857,5,450,0,0,2857,2878,5,647,0,0,2858,2878,5,66,0,0,2859,
2860,7,37,0,0,2860,2878,5,668,0,0,2861,2863,5,5,0,0,2862,2864,5,28,0,0,2863,
2862,1,0,0,0,2863,2864,1,0,0,0,2864,2865,1,0,0,0,2865,2866,5,1133,0,0,2866,
2871,3,90,45,0,2867,2868,5,1135,0,0,2868,2870,3,90,45,0,2869,2867,1,0,0,
0,2870,2873,1,0,0,0,2871,2869,1,0,0,0,2871,2872,1,0,0,0,2872,2874,1,0,0,
0,2873,2871,1,0,0,0,2874,2875,5,1134,0,0,2875,2878,1,0,0,0,2876,2878,3,150,
75,0,2877,2526,1,0,0,0,2877,2536,1,0,0,0,2877,2547,1,0,0,0,2877,2565,1,0,
0,0,2877,2580,1,0,0,0,2877,2602,1,0,0,0,2877,2626,1,0,0,0,2877,2641,1,0,
0,0,2877,2656,1,0,0,0,2877,2678,1,0,0,0,2877,2700,1,0,0,0,2877,2712,1,0,
0,0,2877,2717,1,0,0,0,2877,2729,1,0,0,0,2877,2741,1,0,0,0,2877,2747,1,0,
0,0,2877,2752,1,0,0,0,2877,2763,1,0,0,0,2877,2771,1,0,0,0,2877,2774,1,0,
0,0,2877,2777,1,0,0,0,2877,2780,1,0,0,0,2877,2786,1,0,0,0,2877,2806,1,0,
0,0,2877,2811,1,0,0,0,2877,2815,1,0,0,0,2877,2817,1,0,0,0,2877,2819,1,0,
0,0,2877,2827,1,0,0,0,2877,2830,1,0,0,0,2877,2843,1,0,0,0,2877,2854,1,0,
0,0,2877,2856,1,0,0,0,2877,2858,1,0,0,0,2877,2859,1,0,0,0,2877,2861,1,0,
0,0,2877,2876,1,0,0,0,2878,149,1,0,0,0,2879,2880,5,5,0,0,2880,2881,5,129,
0,0,2881,2882,5,1133,0,0,2882,2887,3,118,59,0,2883,2884,5,1135,0,0,2884,
2886,3,118,59,0,2885,2883,1,0,0,0,2886,2889,1,0,0,0,2887,2885,1,0,0,0,2887,
2888,1,0,0,0,2888,2890,1,0,0,0,2889,2887,1,0,0,0,2890,2891,5,1134,0,0,2891,
2978,1,0,0,0,2892,2893,5,51,0,0,2893,2894,5,129,0,0,2894,2978,3,616,308,
0,2895,2896,5,397,0,0,2896,2899,5,129,0,0,2897,2900,3,616,308,0,2898,2900,
5,6,0,0,2899,2897,1,0,0,0,2899,2898,1,0,0,0,2900,2901,1,0,0,0,2901,2978,
5,647,0,0,2902,2903,5,450,0,0,2903,2906,5,129,0,0,2904,2907,3,616,308,0,
2905,2907,5,6,0,0,2906,2904,1,0,0,0,2906,2905,1,0,0,0,2907,2908,1,0,0,0,
2908,2978,5,647,0,0,2909,2910,5,656,0,0,2910,2913,5,129,0,0,2911,2914,3,
616,308,0,2912,2914,5,6,0,0,2913,2911,1,0,0,0,2913,2912,1,0,0,0,2914,2978,
1,0,0,0,2915,2916,5,363,0,0,2916,2917,5,129,0,0,2917,2978,3,590,295,0,2918,
2919,5,579,0,0,2919,2920,5,129,0,0,2920,2921,3,616,308,0,2921,2922,5,87,
0,0,2922,2923,5,1133,0,0,2923,2928,3,118,59,0,2924,2925,5,1135,0,0,2925,
2927,3,118,59,0,2926,2924,1,0,0,0,2927,2930,1,0,0,0,2928,2926,1,0,0,0,2928,
2929,1,0,0,0,2929,2931,1,0,0,0,2930,2928,1,0,0,0,2931,2932,5,1134,0,0,2932,
2978,1,0,0,0,2933,2934,5,418,0,0,2934,2935,5,129,0,0,2935,2936,3,584,292,
0,2936,2937,5,192,0,0,2937,2938,5,172,0,0,2938,2941,3,552,276,0,2939,2940,
7,37,0,0,2940,2942,5,668,0,0,2941,2939,1,0,0,0,2941,2942,1,0,0,0,2942,2978,
1,0,0,0,2943,2944,5,9,0,0,2944,2947,5,129,0,0,2945,2948,3,616,308,0,2946,
2948,5,6,0,0,2947,2945,1,0,0,0,2947,2946,1,0,0,0,2948,2978,1,0,0,0,2949,
2950,5,26,0,0,2950,2953,5,129,0,0,2951,2954,3,616,308,0,2952,2954,5,6,0,
0,2953,2951,1,0,0,0,2953,2952,1,0,0,0,2954,2978,1,0,0,0,2955,2956,5,119,
0,0,2956,2959,5,129,0,0,2957,2960,3,616,308,0,2958,2960,5,6,0,0,2959,2957,
1,0,0,0,2959,2958,1,0,0,0,2960,2978,1,0,0,0,2961,2962,5,569,0,0,2962,2965,
5,129,0,0,2963,2966,3,616,308,0,2964,2966,5,6,0,0,2965,2963,1,0,0,0,2965,
2964,1,0,0,0,2966,2978,1,0,0,0,2967,2968,5,580,0,0,2968,2971,5,129,0,0,2969,
2972,3,616,308,0,2970,2972,5,6,0,0,2971,2969,1,0,0,0,2971,2970,1,0,0,0,2972,
2978,1,0,0,0,2973,2974,5,578,0,0,2974,2978,5,549,0,0,2975,2976,5,664,0,0,
2976,2978,5,549,0,0,2977,2879,1,0,0,0,2977,2892,1,0,0,0,2977,2895,1,0,0,
0,2977,2902,1,0,0,0,2977,2909,1,0,0,0,2977,2915,1,0,0,0,2977,2918,1,0,0,
0,2977,2933,1,0,0,0,2977,2943,1,0,0,0,2977,2949,1,0,0,0,2977,2955,1,0,0,
0,2977,2961,1,0,0,0,2977,2967,1,0,0,0,2977,2973,1,0,0,0,2977,2975,1,0,0,
0,2978,151,1,0,0,0,2979,2980,5,51,0,0,2980,2982,7,0,0,0,2981,2983,3,640,
320,0,2982,2981,1,0,0,0,2982,2983,1,0,0,0,2983,2984,1,0,0,0,2984,2985,3,
584,292,0,2985,153,1,0,0,0,2986,2987,5,51,0,0,2987,2989,5,415,0,0,2988,2990,
3,640,320,0,2989,2988,1,0,0,0,2989,2990,1,0,0,0,2990,2991,1,0,0,0,2991,2992,
3,550,275,0,2992,155,1,0,0,0,2993,2994,5,51,0,0,2994,2996,5,81,0,0,2995,
2997,7,1,0,0,2996,2995,1,0,0,0,2996,2997,1,0,0,0,2997,2998,1,0,0,0,2998,
2999,3,584,292,0,2999,3000,5,118,0,0,3000,3013,3,552,276,0,3001,3003,5,336,
0,0,3002,3004,5,1124,0,0,3003,3002,1,0,0,0,3003,3004,1,0,0,0,3004,3005,1,
0,0,0,3005,3012,7,3,0,0,3006,3008,5,103,0,0,3007,3009,5,1124,0,0,3008,3007,
1,0,0,0,3008,3009,1,0,0,0,3009,3010,1,0,0,0,3010,3012,7,4,0,0,3011,3001,
1,0,0,0,3011,3006,1,0,0,0,3012,3015,1,0,0,0,3013,3011,1,0,0,0,3013,3014,
1,0,0,0,3014,157,1,0,0,0,3015,3013,1,0,0,0,3016,3017,5,51,0,0,3017,3018,
5,475,0,0,3018,3019,5,73,0,0,3019,3020,3,584,292,0,3020,3021,5,409,0,0,3021,
3022,5,1124,0,0,3022,3023,3,572,286,0,3023,159,1,0,0,0,3024,3025,5,51,0,
0,3025,3027,5,131,0,0,3026,3028,3,640,320,0,3027,3026,1,0,0,0,3027,3028,
1,0,0,0,3028,3029,1,0,0,0,3029,3030,3,550,275,0,3030,161,1,0,0,0,3031,3032,
5,51,0,0,3032,3034,5,437,0,0,3033,3035,3,640,320,0,3034,3033,1,0,0,0,3034,
3035,1,0,0,0,3035,3036,1,0,0,0,3036,3037,3,550,275,0,3037,163,1,0,0,0,3038,
3039,5,51,0,0,3039,3041,5,608,0,0,3040,3042,3,640,320,0,3041,3040,1,0,0,
0,3041,3042,1,0,0,0,3042,3043,1,0,0,0,3043,3044,3,584,292,0,3044,165,1,0,
0,0,3045,3047,5,51,0,0,3046,3048,5,649,0,0,3047,3046,1,0,0,0,3047,3048,1,
0,0,0,3048,3049,1,0,0,0,3049,3051,5,172,0,0,3050,3052,3,640,320,0,3051,3050,
1,0,0,0,3051,3052,1,0,0,0,3052,3053,1,0,0,0,3053,3055,3,620,310,0,3054,3056,
7,38,0,0,3055,3054,1,0,0,0,3055,3056,1,0,0,0,3056,167,1,0,0,0,3057,3058,
5,51,0,0,3058,3059,5,647,0,0,3059,3065,3,584,292,0,3060,3062,5,409,0,0,3061,
3063,5,1124,0,0,3062,3061,1,0,0,0,3062,3063,1,0,0,0,3063,3064,1,0,0,0,3064,
3066,3,572,286,0,3065,3060,1,0,0,0,3065,3066,1,0,0,0,3066,169,1,0,0,0,3067,
3068,5,51,0,0,3068,3070,5,177,0,0,3069,3071,3,640,320,0,3070,3069,1,0,0,
0,3070,3071,1,0,0,0,3071,3072,1,0,0,0,3072,3073,3,550,275,0,3073,171,1,0,
0,0,3074,3075,5,51,0,0,3075,3077,5,671,0,0,3076,3078,3,640,320,0,3077,3076,
1,0,0,0,3077,3078,1,0,0,0,3078,3079,1,0,0,0,3079,3084,3,550,275,0,3080,3081,
5,1135,0,0,3081,3083,3,550,275,0,3082,3080,1,0,0,0,3083,3086,1,0,0,0,3084,
3082,1,0,0,0,3084,3085,1,0,0,0,3085,3088,1,0,0,0,3086,3084,1,0,0,0,3087,
3089,7,38,0,0,3088,3087,1,0,0,0,3088,3089,1,0,0,0,3089,173,1,0,0,0,3090,
3091,5,51,0,0,3091,3093,5,596,0,0,3092,3094,3,640,320,0,3093,3092,1,0,0,
0,3093,3094,1,0,0,0,3094,3095,1,0,0,0,3095,3100,3,554,277,0,3096,3097,5,
1135,0,0,3097,3099,3,554,277,0,3098,3096,1,0,0,0,3099,3102,1,0,0,0,3100,
3098,1,0,0,0,3100,3101,1,0,0,0,3101,175,1,0,0,0,3102,3100,1,0,0,0,3103,3104,
5,153,0,0,3104,3105,5,42,0,0,3105,3116,5,596,0,0,3106,3117,5,529,0,0,3107,
3117,5,6,0,0,3108,3113,3,554,277,0,3109,3110,5,1135,0,0,3110,3112,3,554,
277,0,3111,3109,1,0,0,0,3112,3115,1,0,0,0,3113,3111,1,0,0,0,3113,3114,1,
0,0,0,3114,3117,1,0,0,0,3115,3113,1,0,0,0,3116,3106,1,0,0,0,3116,3107,1,
0,0,0,3116,3108,1,0,0,0,3117,3118,1,0,0,0,3118,3121,5,175,0,0,3119,3122,
3,564,282,0,3120,3122,3,584,292,0,3121,3119,1,0,0,0,3121,3120,1,0,0,0,3122,
3130,1,0,0,0,3123,3126,5,1135,0,0,3124,3127,3,564,282,0,3125,3127,3,584,
292,0,3126,3124,1,0,0,0,3126,3125,1,0,0,0,3127,3129,1,0,0,0,3128,3123,1,
0,0,0,3129,3132,1,0,0,0,3130,3128,1,0,0,0,3130,3131,1,0,0,0,3131,3137,1,
0,0,0,3132,3130,1,0,0,0,3133,3134,5,153,0,0,3134,3135,5,596,0,0,3135,3137,
3,434,217,0,3136,3103,1,0,0,0,3136,3133,1,0,0,0,3137,177,1,0,0,0,3138,3139,
5,139,0,0,3139,3140,5,172,0,0,3140,3145,3,180,90,0,3141,3142,5,1135,0,0,
3142,3144,3,180,90,0,3143,3141,1,0,0,0,3144,3147,1,0,0,0,3145,3143,1,0,0,
0,3145,3146,1,0,0,0,3146,179,1,0,0,0,3147,3145,1,0,0,0,3148,3149,3,552,276,
0,3149,3150,5,175,0,0,3150,3151,3,552,276,0,3151,181,1,0,0,0,3152,3154,5,
656,0,0,3153,3155,5,172,0,0,3154,3153,1,0,0,0,3154,3155,1,0,0,0,3155,3156,
1,0,0,0,3156,3157,3,552,276,0,3157,183,1,0,0,0,3158,3159,5,20,0,0,3159,3166,
3,550,275,0,3160,3163,5,1133,0,0,3161,3164,3,628,314,0,3162,3164,3,624,312,
0,3163,3161,1,0,0,0,3163,3162,1,0,0,0,3163,3164,1,0,0,0,3164,3165,1,0,0,
0,3165,3167,5,1134,0,0,3166,3160,1,0,0,0,3166,3167,1,0,0,0,3167,185,1,0,
0,0,3168,3171,3,214,107,0,3169,3171,3,216,108,0,3170,3168,1,0,0,0,3170,3169,
1,0,0,0,3171,187,1,0,0,0,3172,3173,5,399,0,0,3173,3174,3,624,312,0,3174,
189,1,0,0,0,3175,3180,3,218,109,0,3176,3180,3,220,110,0,3177,3180,3,222,
111,0,3178,3180,3,224,112,0,3179,3175,1,0,0,0,3179,3176,1,0,0,0,3179,3177,
1,0,0,0,3179,3178,1,0,0,0,3180,191,1,0,0,0,3181,3183,5,85,0,0,3182,3184,
7,39,0,0,3183,3182,1,0,0,0,3183,3184,1,0,0,0,3184,3186,1,0,0,0,3185,3187,
5,78,0,0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,3187,3189,1,0,0,0,3188,3190,
5,87,0,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,3191,1,0,0,0,3191,3198,
3,552,276,0,3192,3193,5,129,0,0,3193,3195,5,1133,0,0,3194,3196,3,616,308,
0,3195,3194,1,0,0,0,3195,3196,1,0,0,0,3196,3197,1,0,0,0,3197,3199,5,1134,
0,0,3198,3192,1,0,0,0,3198,3199,1,0,0,0,3199,3223,1,0,0,0,3200,3202,5,1133,
0,0,3201,3203,3,618,309,0,3202,3201,1,0,0,0,3202,3203,1,0,0,0,3203,3204,
1,0,0,0,3204,3206,5,1134,0,0,3205,3200,1,0,0,0,3205,3206,1,0,0,0,3206,3207,
1,0,0,0,3207,3212,3,206,103,0,3208,3210,5,12,0,0,3209,3208,1,0,0,0,3209,
3210,1,0,0,0,3210,3211,1,0,0,0,3211,3213,3,584,292,0,3212,3209,1,0,0,0,3212,
3213,1,0,0,0,3213,3224,1,0,0,0,3214,3215,5,153,0,0,3215,3220,3,208,104,0,
3216,3217,5,1135,0,0,3217,3219,3,208,104,0,3218,3216,1,0,0,0,3219,3222,1,
0,0,0,3220,3218,1,0,0,0,3220,3221,1,0,0,0,3221,3224,1,0,0,0,3222,3220,1,
0,0,0,3223,3205,1,0,0,0,3223,3214,1,0,0,0,3224,3237,1,0,0,0,3225,3226,5,
118,0,0,3226,3227,5,401,0,0,3227,3228,5,91,0,0,3228,3229,5,184,0,0,3229,
3234,3,208,104,0,3230,3231,5,1135,0,0,3231,3233,3,208,104,0,3232,3230,1,
0,0,0,3233,3236,1,0,0,0,3234,3232,1,0,0,0,3234,3235,1,0,0,0,3235,3238,1,
0,0,0,3236,3234,1,0,0,0,3237,3225,1,0,0,0,3237,3238,1,0,0,0,3238,193,1,0,
0,0,3239,3240,5,102,0,0,3240,3242,5,388,0,0,3241,3243,7,40,0,0,3242,3241,
1,0,0,0,3242,3243,1,0,0,0,3243,3245,1,0,0,0,3244,3246,5,474,0,0,3245,3244,
1,0,0,0,3245,3246,1,0,0,0,3246,3247,1,0,0,0,3247,3248,5,82,0,0,3248,3250,
5,1148,0,0,3249,3251,7,6,0,0,3250,3249,1,0,0,0,3250,3251,1,0,0,0,3251,3252,
1,0,0,0,3252,3253,5,87,0,0,3253,3254,5,172,0,0,3254,3260,3,552,276,0,3255,
3256,5,129,0,0,3256,3257,5,1133,0,0,3257,3258,3,616,308,0,3258,3259,5,1134,
0,0,3259,3261,1,0,0,0,3260,3255,1,0,0,0,3260,3261,1,0,0,0,3261,3265,1,0,
0,0,3262,3263,5,25,0,0,3263,3264,5,153,0,0,3264,3266,3,568,284,0,3265,3262,
1,0,0,0,3265,3266,1,0,0,0,3266,3273,1,0,0,0,3267,3269,7,41,0,0,3268,3270,
3,280,140,0,3269,3268,1,0,0,0,3270,3271,1,0,0,0,3271,3269,1,0,0,0,3271,3272,
1,0,0,0,3272,3274,1,0,0,0,3273,3267,1,0,0,0,3273,3274,1,0,0,0,3274,3281,
1,0,0,0,3275,3277,5,101,0,0,3276,3278,3,282,141,0,3277,3276,1,0,0,0,3278,
3279,1,0,0,0,3279,3277,1,0,0,0,3279,3280,1,0,0,0,3280,3282,1,0,0,0,3281,
3275,1,0,0,0,3281,3282,1,0,0,0,3282,3287,1,0,0,0,3283,3284,5,78,0,0,3284,
3285,3,590,295,0,3285,3286,7,42,0,0,3286,3288,1,0,0,0,3287,3283,1,0,0,0,
3287,3288,1,0,0,0,3288,3300,1,0,0,0,3289,3290,5,1133,0,0,3290,3295,3,210,
105,0,3291,3292,5,1135,0,0,3292,3294,3,210,105,0,3293,3291,1,0,0,0,3294,
3297,1,0,0,0,3295,3293,1,0,0,0,3295,3296,1,0,0,0,3296,3298,1,0,0,0,3297,
3295,1,0,0,0,3298,3299,5,1134,0,0,3299,3301,1,0,0,0,3300,3289,1,0,0,0,3300,
3301,1,0,0,0,3301,3311,1,0,0,0,3302,3303,5,153,0,0,3303,3308,3,208,104,0,
3304,3305,5,1135,0,0,3305,3307,3,208,104,0,3306,3304,1,0,0,0,3307,3310,1,
0,0,0,3308,3306,1,0,0,0,3308,3309,1,0,0,0,3309,3312,1,0,0,0,3310,3308,1,
0,0,0,3311,3302,1,0,0,0,3311,3312,1,0,0,0,3312,195,1,0,0,0,3313,3314,5,102,
0,0,3314,3316,5,682,0,0,3315,3317,7,40,0,0,3316,3315,1,0,0,0,3316,3317,1,
0,0,0,3317,3319,1,0,0,0,3318,3320,5,474,0,0,3319,3318,1,0,0,0,3319,3320,
1,0,0,0,3320,3321,1,0,0,0,3321,3322,5,82,0,0,3322,3324,5,1148,0,0,3323,3325,
7,6,0,0,3324,3323,1,0,0,0,3324,3325,1,0,0,0,3325,3326,1,0,0,0,3326,3327,
5,87,0,0,3327,3328,5,172,0,0,3328,3332,3,552,276,0,3329,3330,5,25,0,0,3330,
3331,5,153,0,0,3331,3333,3,568,284,0,3332,3329,1,0,0,0,3332,3333,1,0,0,0,
3333,3340,1,0,0,0,3334,3335,5,601,0,0,3335,3336,5,448,0,0,3336,3337,5,19,
0,0,3337,3338,5,1126,0,0,3338,3339,5,1148,0,0,3339,3341,5,1125,0,0,3340,
3334,1,0,0,0,3340,3341,1,0,0,0,3341,3346,1,0,0,0,3342,3343,5,78,0,0,3343,
3344,3,590,295,0,3344,3345,7,42,0,0,3345,3347,1,0,0,0,3346,3342,1,0,0,0,
3346,3347,1,0,0,0,3347,3359,1,0,0,0,3348,3349,5,1133,0,0,3349,3354,3,210,
105,0,3350,3351,5,1135,0,0,3351,3353,3,210,105,0,3352,3350,1,0,0,0,3353,
3356,1,0,0,0,3354,3352,1,0,0,0,3354,3355,1,0,0,0,3355,3357,1,0,0,0,3356,
3354,1,0,0,0,3357,3358,5,1134,0,0,3358,3360,1,0,0,0,3359,3348,1,0,0,0,3359,
3360,1,0,0,0,3360,3370,1,0,0,0,3361,3362,5,153,0,0,3362,3367,3,208,104,0,
3363,3364,5,1135,0,0,3364,3366,3,208,104,0,3365,3363,1,0,0,0,3366,3369,1,
0,0,0,3367,3365,1,0,0,0,3367,3368,1,0,0,0,3368,3371,1,0,0,0,3369,3367,1,
0,0,0,3370,3361,1,0,0,0,3370,3371,1,0,0,0,3371,197,1,0,0,0,3372,3374,5,141,
0,0,3373,3375,7,43,0,0,3374,3373,1,0,0,0,3374,3375,1,0,0,0,3375,3377,1,0,
0,0,3376,3378,5,87,0,0,3377,3376,1,0,0,0,3377,3378,1,0,0,0,3378,3379,1,0,
0,0,3379,3385,3,552,276,0,3380,3381,5,129,0,0,3381,3382,5,1133,0,0,3382,
3383,3,616,308,0,3383,3384,5,1134,0,0,3384,3386,1,0,0,0,3385,3380,1,0,0,
0,3385,3386,1,0,0,0,3386,3403,1,0,0,0,3387,3388,5,1133,0,0,3388,3389,3,616,
308,0,3389,3390,5,1134,0,0,3390,3392,1,0,0,0,3391,3387,1,0,0,0,3391,3392,
1,0,0,0,3392,3393,1,0,0,0,3393,3404,3,206,103,0,3394,3395,5,153,0,0,3395,
3400,3,208,104,0,3396,3397,5,1135,0,0,3397,3399,3,208,104,0,3398,3396,1,
0,0,0,3399,3402,1,0,0,0,3400,3398,1,0,0,0,3400,3401,1,0,0,0,3401,3404,1,
0,0,0,3402,3400,1,0,0,0,3403,3391,1,0,0,0,3403,3394,1,0,0,0,3404,199,1,0,
0,0,3405,3407,3,252,126,0,3406,3408,3,212,106,0,3407,3406,1,0,0,0,3407,3408,
1,0,0,0,3408,3471,1,0,0,0,3409,3411,3,248,124,0,3410,3412,3,212,106,0,3411,
3410,1,0,0,0,3411,3412,1,0,0,0,3412,3471,1,0,0,0,3413,3416,3,254,127,0,3414,
3416,3,250,125,0,3415,3413,1,0,0,0,3415,3414,1,0,0,0,3416,3418,1,0,0,0,3417,
3419,3,258,129,0,3418,3417,1,0,0,0,3419,3420,1,0,0,0,3420,3418,1,0,0,0,3420,
3421,1,0,0,0,3421,3430,1,0,0,0,3422,3424,5,180,0,0,3423,3425,7,44,0,0,3424,
3423,1,0,0,0,3424,3425,1,0,0,0,3425,3428,1,0,0,0,3426,3429,3,252,126,0,3427,
3429,3,248,124,0,3428,3426,1,0,0,0,3428,3427,1,0,0,0,3429,3431,1,0,0,0,3430,
3422,1,0,0,0,3430,3431,1,0,0,0,3431,3433,1,0,0,0,3432,3434,3,230,115,0,3433,
3432,1,0,0,0,3433,3434,1,0,0,0,3434,3436,1,0,0,0,3435,3437,3,294,147,0,3436,
3435,1,0,0,0,3436,3437,1,0,0,0,3437,3439,1,0,0,0,3438,3440,3,212,106,0,3439,
3438,1,0,0,0,3439,3440,1,0,0,0,3440,3471,1,0,0,0,3441,3443,3,250,125,0,3442,
3444,3,256,128,0,3443,3442,1,0,0,0,3444,3445,1,0,0,0,3445,3443,1,0,0,0,3445,
3446,1,0,0,0,3446,3452,1,0,0,0,3447,3449,5,180,0,0,3448,3450,7,44,0,0,3449,
3448,1,0,0,0,3449,3450,1,0,0,0,3450,3451,1,0,0,0,3451,3453,3,248,124,0,3452,
3447,1,0,0,0,3452,3453,1,0,0,0,3453,3455,1,0,0,0,3454,3456,3,230,115,0,3455,
3454,1,0,0,0,3455,3456,1,0,0,0,3456,3458,1,0,0,0,3457,3459,3,294,147,0,3458,
3457,1,0,0,0,3458,3459,1,0,0,0,3459,3461,1,0,0,0,3460,3462,3,212,106,0,3461,
3460,1,0,0,0,3461,3462,1,0,0,0,3462,3471,1,0,0,0,3463,3466,3,254,127,0,3464,
3465,5,1135,0,0,3465,3467,3,260,130,0,3466,3464,1,0,0,0,3467,3468,1,0,0,
0,3468,3466,1,0,0,0,3468,3469,1,0,0,0,3469,3471,1,0,0,0,3470,3405,1,0,0,
0,3470,3409,1,0,0,0,3470,3415,1,0,0,0,3470,3441,1,0,0,0,3470,3463,1,0,0,
0,3471,201,1,0,0,0,3472,3475,3,226,113,0,3473,3475,3,228,114,0,3474,3472,
1,0,0,0,3474,3473,1,0,0,0,3475,203,1,0,0,0,3476,3477,5,188,0,0,3477,3479,
5,1133,0,0,3478,3480,3,626,313,0,3479,3478,1,0,0,0,3479,3480,1,0,0,0,3480,
3481,1,0,0,0,3481,3490,5,1134,0,0,3482,3483,5,1135,0,0,3483,3485,5,1133,
0,0,3484,3486,3,626,313,0,3485,3484,1,0,0,0,3485,3486,1,0,0,0,3486,3487,
1,0,0,0,3487,3489,5,1134,0,0,3488,3482,1,0,0,0,3489,3492,1,0,0,0,3490,3488,
1,0,0,0,3490,3491,1,0,0,0,3491,205,1,0,0,0,3492,3490,1,0,0,0,3493,3512,3,
200,100,0,3494,3495,7,45,0,0,3495,3497,5,1133,0,0,3496,3498,3,626,313,0,
3497,3496,1,0,0,0,3497,3498,1,0,0,0,3498,3499,1,0,0,0,3499,3508,5,1134,0,
0,3500,3501,5,1135,0,0,3501,3503,5,1133,0,0,3502,3504,3,626,313,0,3503,3502,
1,0,0,0,3503,3504,1,0,0,0,3504,3505,1,0,0,0,3505,3507,5,1134,0,0,3506,3500,
1,0,0,0,3507,3510,1,0,0,0,3508,3506,1,0,0,0,3508,3509,1,0,0,0,3509,3512,
1,0,0,0,3510,3508,1,0,0,0,3511,3493,1,0,0,0,3511,3494,1,0,0,0,3512,207,1,
0,0,0,3513,3514,3,556,278,0,3514,3517,5,1124,0,0,3515,3518,3,688,344,0,3516,
3518,5,42,0,0,3517,3515,1,0,0,0,3517,3516,1,0,0,0,3518,209,1,0,0,0,3519,
3522,3,584,292,0,3520,3522,5,1159,0,0,3521,3519,1,0,0,0,3521,3520,1,0,0,
0,3522,211,1,0,0,0,3523,3524,5,65,0,0,3524,3530,5,184,0,0,3525,3526,5,103,
0,0,3526,3527,5,80,0,0,3527,3528,5,610,0,0,3528,3530,5,511,0,0,3529,3523,
1,0,0,0,3529,3525,1,0,0,0,3530,213,1,0,0,0,3531,3533,5,44,0,0,3532,3534,
5,106,0,0,3533,3532,1,0,0,0,3533,3534,1,0,0,0,3534,3536,1,0,0,0,3535,3537,
5,568,0,0,3536,3535,1,0,0,0,3536,3537,1,0,0,0,3537,3539,1,0,0,0,3538,3540,
5,78,0,0,3539,3538,1,0,0,0,3539,3540,1,0,0,0,3540,3541,1,0,0,0,3541,3542,
5,68,0,0,3542,3547,3,552,276,0,3543,3545,5,12,0,0,3544,3543,1,0,0,0,3544,
3545,1,0,0,0,3545,3546,1,0,0,0,3546,3548,3,584,292,0,3547,3544,1,0,0,0,3547,
3548,1,0,0,0,3548,3554,1,0,0,0,3549,3550,5,129,0,0,3550,3551,5,1133,0,0,
3551,3552,3,616,308,0,3552,3553,5,1134,0,0,3553,3555,1,0,0,0,3554,3549,1,
0,0,0,3554,3555,1,0,0,0,3555,3558,1,0,0,0,3556,3557,5,190,0,0,3557,3559,
3,688,344,0,3558,3556,1,0,0,0,3558,3559,1,0,0,0,3559,3561,1,0,0,0,3560,3562,
3,230,115,0,3561,3560,1,0,0,0,3561,3562,1,0,0,0,3562,3565,1,0,0,0,3563,3564,
5,99,0,0,3564,3566,3,296,148,0,3565,3563,1,0,0,0,3565,3566,1,0,0,0,3566,
215,1,0,0,0,3567,3569,5,44,0,0,3568,3570,5,106,0,0,3569,3568,1,0,0,0,3569,
3570,1,0,0,0,3570,3572,1,0,0,0,3571,3573,5,568,0,0,3572,3571,1,0,0,0,3572,
3573,1,0,0,0,3573,3575,1,0,0,0,3574,3576,5,78,0,0,3575,3574,1,0,0,0,3575,
3576,1,0,0,0,3576,3616,1,0,0,0,3577,3580,3,552,276,0,3578,3579,5,1132,0,
0,3579,3581,5,1117,0,0,3580,3578,1,0,0,0,3580,3581,1,0,0,0,3581,3590,1,0,
0,0,3582,3583,5,1135,0,0,3583,3586,3,552,276,0,3584,3585,5,1132,0,0,3585,
3587,5,1117,0,0,3586,3584,1,0,0,0,3586,3587,1,0,0,0,3587,3589,1,0,0,0,3588,
3582,1,0,0,0,3589,3592,1,0,0,0,3590,3588,1,0,0,0,3590,3591,1,0,0,0,3591,
3593,1,0,0,0,3592,3590,1,0,0,0,3593,3594,5,68,0,0,3594,3595,3,234,117,0,
3595,3617,1,0,0,0,3596,3597,5,68,0,0,3597,3600,3,552,276,0,3598,3599,5,1132,
0,0,3599,3601,5,1117,0,0,3600,3598,1,0,0,0,3600,3601,1,0,0,0,3601,3610,1,
0,0,0,3602,3603,5,1135,0,0,3603,3606,3,552,276,0,3604,3605,5,1132,0,0,3605,
3607,5,1117,0,0,3606,3604,1,0,0,0,3606,3607,1,0,0,0,3607,3609,1,0,0,0,3608,
3602,1,0,0,0,3609,3612,1,0,0,0,3610,3608,1,0,0,0,3610,3611,1,0,0,0,3611,
3613,1,0,0,0,3612,3610,1,0,0,0,3613,3614,5,187,0,0,3614,3615,3,234,117,0,
3615,3617,1,0,0,0,3616,3577,1,0,0,0,3616,3596,1,0,0,0,3617,3620,1,0,0,0,
3618,3619,5,190,0,0,3619,3621,3,688,344,0,3620,3618,1,0,0,0,3620,3621,1,
0,0,0,3621,217,1,0,0,0,3622,3623,5,442,0,0,3623,3624,3,552,276,0,3624,3629,
5,539,0,0,3625,3627,5,12,0,0,3626,3625,1,0,0,0,3626,3627,1,0,0,0,3627,3628,
1,0,0,0,3628,3630,3,584,292,0,3629,3626,1,0,0,0,3629,3630,1,0,0,0,3630,219,
1,0,0,0,3631,3632,5,442,0,0,3632,3633,3,552,276,0,3633,3634,5,134,0,0,3634,
3641,3,584,292,0,3635,3636,3,696,348,0,3636,3637,5,1133,0,0,3637,3638,3,
628,314,0,3638,3639,5,1134,0,0,3639,3642,1,0,0,0,3640,3642,7,46,0,0,3641,
3635,1,0,0,0,3641,3640,1,0,0,0,3642,3645,1,0,0,0,3643,3644,5,190,0,0,3644,
3646,3,688,344,0,3645,3643,1,0,0,0,3645,3646,1,0,0,0,3646,3649,1,0,0,0,3647,
3648,5,99,0,0,3648,3650,3,296,148,0,3649,3647,1,0,0,0,3649,3650,1,0,0,0,
3650,221,1,0,0,0,3651,3652,5,442,0,0,3652,3653,3,552,276,0,3653,3654,5,134,
0,0,3654,3657,7,47,0,0,3655,3656,5,190,0,0,3656,3658,3,688,344,0,3657,3655,
1,0,0,0,3657,3658,1,0,0,0,3658,3661,1,0,0,0,3659,3660,5,99,0,0,3660,3662,
3,296,148,0,3661,3659,1,0,0,0,3661,3662,1,0,0,0,3662,223,1,0,0,0,3663,3664,
5,442,0,0,3664,3665,3,552,276,0,3665,3666,5,361,0,0,3666,225,1,0,0,0,3667,
3669,5,184,0,0,3668,3670,5,106,0,0,3669,3668,1,0,0,0,3669,3670,1,0,0,0,3670,
3672,1,0,0,0,3671,3673,5,78,0,0,3672,3671,1,0,0,0,3672,3673,1,0,0,0,3673,
3674,1,0,0,0,3674,3679,3,552,276,0,3675,3677,5,12,0,0,3676,3675,1,0,0,0,
3676,3677,1,0,0,0,3677,3678,1,0,0,0,3678,3680,3,584,292,0,3679,3676,1,0,
0,0,3679,3680,1,0,0,0,3680,3681,1,0,0,0,3681,3682,5,153,0,0,3682,3687,3,
208,104,0,3683,3684,5,1135,0,0,3684,3686,3,208,104,0,3685,3683,1,0,0,0,3686,
3689,1,0,0,0,3687,3685,1,0,0,0,3687,3688,1,0,0,0,3688,3692,1,0,0,0,3689,
3687,1,0,0,0,3690,3691,5,190,0,0,3691,3693,3,688,344,0,3692,3690,1,0,0,0,
3692,3693,1,0,0,0,3693,3695,1,0,0,0,3694,3696,3,230,115,0,3695,3694,1,0,
0,0,3695,3696,1,0,0,0,3696,3698,1,0,0,0,3697,3699,3,294,147,0,3698,3697,
1,0,0,0,3698,3699,1,0,0,0,3699,227,1,0,0,0,3700,3702,5,184,0,0,3701,3703,
5,106,0,0,3702,3701,1,0,0,0,3702,3703,1,0,0,0,3703,3705,1,0,0,0,3704,3706,
5,78,0,0,3705,3704,1,0,0,0,3705,3706,1,0,0,0,3706,3707,1,0,0,0,3707,3708,
3,234,117,0,3708,3709,5,153,0,0,3709,3714,3,208,104,0,3710,3711,5,1135,0,
0,3711,3713,3,208,104,0,3712,3710,1,0,0,0,3713,3716,1,0,0,0,3714,3712,1,
0,0,0,3714,3715,1,0,0,0,3715,3719,1,0,0,0,3716,3714,1,0,0,0,3717,3718,5,
190,0,0,3718,3720,3,688,344,0,3719,3717,1,0,0,0,3719,3720,1,0,0,0,3720,229,
1,0,0,0,3721,3722,5,124,0,0,3722,3723,5,19,0,0,3723,3728,3,232,116,0,3724,
3725,5,1135,0,0,3725,3727,3,232,116,0,3726,3724,1,0,0,0,3727,3730,1,0,0,
0,3728,3726,1,0,0,0,3728,3729,1,0,0,0,3729,231,1,0,0,0,3730,3728,1,0,0,0,
3731,3733,3,688,344,0,3732,3734,7,48,0,0,3733,3732,1,0,0,0,3733,3734,1,0,
0,0,3734,233,1,0,0,0,3735,3740,3,236,118,0,3736,3737,5,1135,0,0,3737,3739,
3,236,118,0,3738,3736,1,0,0,0,3739,3742,1,0,0,0,3740,3738,1,0,0,0,3740,3741,
1,0,0,0,3741,235,1,0,0,0,3742,3740,1,0,0,0,3743,3747,3,238,119,0,3744,3746,
3,244,122,0,3745,3744,1,0,0,0,3746,3749,1,0,0,0,3747,3745,1,0,0,0,3747,3748,
1,0,0,0,3748,3762,1,0,0,0,3749,3747,1,0,0,0,3750,3751,5,1133,0,0,3751,3755,
3,238,119,0,3752,3754,3,244,122,0,3753,3752,1,0,0,0,3754,3757,1,0,0,0,3755,
3753,1,0,0,0,3755,3756,1,0,0,0,3756,3758,1,0,0,0,3757,3755,1,0,0,0,3758,
3759,5,1134,0,0,3759,3762,1,0,0,0,3760,3762,3,262,131,0,3761,3743,1,0,0,
0,3761,3750,1,0,0,0,3761,3760,1,0,0,0,3762,237,1,0,0,0,3763,3769,3,552,276,
0,3764,3765,5,129,0,0,3765,3766,5,1133,0,0,3766,3767,3,616,308,0,3767,3768,
5,1134,0,0,3768,3770,1,0,0,0,3769,3764,1,0,0,0,3769,3770,1,0,0,0,3770,3775,
1,0,0,0,3771,3773,5,12,0,0,3772,3771,1,0,0,0,3772,3773,1,0,0,0,3773,3774,
1,0,0,0,3774,3776,3,584,292,0,3775,3772,1,0,0,0,3775,3776,1,0,0,0,3776,3785,
1,0,0,0,3777,3782,3,240,120,0,3778,3779,5,1135,0,0,3779,3781,3,240,120,0,
3780,3778,1,0,0,0,3781,3784,1,0,0,0,3782,3780,1,0,0,0,3782,3783,1,0,0,0,
3783,3786,1,0,0,0,3784,3782,1,0,0,0,3785,3777,1,0,0,0,3785,3786,1,0,0,0,
3786,3804,1,0,0,0,3787,3793,3,200,100,0,3788,3789,5,1133,0,0,3789,3790,3,
200,100,0,3790,3791,5,1134,0,0,3791,3793,1,0,0,0,3792,3787,1,0,0,0,3792,
3788,1,0,0,0,3793,3795,1,0,0,0,3794,3796,5,12,0,0,3795,3794,1,0,0,0,3795,
3796,1,0,0,0,3796,3797,1,0,0,0,3797,3798,3,584,292,0,3798,3804,1,0,0,0,3799,
3800,5,1133,0,0,3800,3801,3,234,117,0,3801,3802,5,1134,0,0,3802,3804,1,0,
0,0,3803,3763,1,0,0,0,3803,3792,1,0,0,0,3803,3799,1,0,0,0,3804,239,1,0,0,
0,3805,3806,7,49,0,0,3806,3809,7,20,0,0,3807,3808,5,65,0,0,3808,3810,3,242,
121,0,3809,3807,1,0,0,0,3809,3810,1,0,0,0,3810,3811,1,0,0,0,3811,3812,5,
1133,0,0,3812,3813,3,616,308,0,3813,3814,5,1134,0,0,3814,241,1,0,0,0,3815,
3821,5,90,0,0,3816,3817,5,124,0,0,3817,3821,5,19,0,0,3818,3819,5,73,0,0,
3819,3821,5,19,0,0,3820,3815,1,0,0,0,3820,3816,1,0,0,0,3820,3818,1,0,0,0,
3821,243,1,0,0,0,3822,3824,7,50,0,0,3823,3822,1,0,0,0,3823,3824,1,0,0,0,
3824,3825,1,0,0,0,3825,3827,5,90,0,0,3826,3828,5,94,0,0,3827,3826,1,0,0,
0,3827,3828,1,0,0,0,3828,3829,1,0,0,0,3829,3833,3,238,119,0,3830,3832,3,
246,123,0,3831,3830,1,0,0,0,3832,3835,1,0,0,0,3833,3831,1,0,0,0,3833,3834,
1,0,0,0,3834,3870,1,0,0,0,3835,3833,1,0,0,0,3836,3837,5,171,0,0,3837,3842,
3,238,119,0,3838,3839,5,118,0,0,3839,3841,3,688,344,0,3840,3838,1,0,0,0,
3841,3844,1,0,0,0,3842,3840,1,0,0,0,3842,3843,1,0,0,0,3843,3870,1,0,0,0,
3844,3842,1,0,0,0,3845,3847,7,51,0,0,3846,3848,5,126,0,0,3847,3846,1,0,0,
0,3847,3848,1,0,0,0,3848,3849,1,0,0,0,3849,3851,5,90,0,0,3850,3852,5,94,
0,0,3851,3850,1,0,0,0,3851,3852,1,0,0,0,3852,3853,1,0,0,0,3853,3857,3,238,
119,0,3854,3856,3,246,123,0,3855,3854,1,0,0,0,3856,3859,1,0,0,0,3857,3855,
1,0,0,0,3857,3858,1,0,0,0,3858,3870,1,0,0,0,3859,3857,1,0,0,0,3860,3865,
5,113,0,0,3861,3863,7,51,0,0,3862,3864,5,126,0,0,3863,3862,1,0,0,0,3863,
3864,1,0,0,0,3864,3866,1,0,0,0,3865,3861,1,0,0,0,3865,3866,1,0,0,0,3866,
3867,1,0,0,0,3867,3868,5,90,0,0,3868,3870,3,238,119,0,3869,3823,1,0,0,0,
3869,3836,1,0,0,0,3869,3845,1,0,0,0,3869,3860,1,0,0,0,3870,245,1,0,0,0,3871,
3872,5,118,0,0,3872,3879,3,688,344,0,3873,3874,5,187,0,0,3874,3875,5,1133,
0,0,3875,3876,3,616,308,0,3876,3877,5,1134,0,0,3877,3879,1,0,0,0,3878,3871,
1,0,0,0,3878,3873,1,0,0,0,3879,247,1,0,0,0,3880,3881,5,1133,0,0,3881,3882,
3,252,126,0,3882,3883,5,1134,0,0,3883,3889,1,0,0,0,3884,3885,5,1133,0,0,
3885,3886,3,248,124,0,3886,3887,5,1134,0,0,3887,3889,1,0,0,0,3888,3880,1,
0,0,0,3888,3884,1,0,0,0,3889,249,1,0,0,0,3890,3891,5,1133,0,0,3891,3892,
3,254,127,0,3892,3893,5,1134,0,0,3893,3899,1,0,0,0,3894,3895,5,1133,0,0,
3895,3896,3,250,125,0,3896,3897,5,1134,0,0,3897,3899,1,0,0,0,3898,3890,1,
0,0,0,3898,3894,1,0,0,0,3899,251,1,0,0,0,3900,3904,5,152,0,0,3901,3903,3,
272,136,0,3902,3901,1,0,0,0,3903,3906,1,0,0,0,3904,3902,1,0,0,0,3904,3905,
1,0,0,0,3905,3907,1,0,0,0,3906,3904,1,0,0,0,3907,3909,3,274,137,0,3908,3910,
3,278,139,0,3909,3908,1,0,0,0,3909,3910,1,0,0,0,3910,3911,1,0,0,0,3911,3913,
3,284,142,0,3912,3914,3,286,143,0,3913,3912,1,0,0,0,3913,3914,1,0,0,0,3914,
3916,1,0,0,0,3915,3917,3,288,144,0,3916,3915,1,0,0,0,3916,3917,1,0,0,0,3917,
3919,1,0,0,0,3918,3920,3,290,145,0,3919,3918,1,0,0,0,3919,3920,1,0,0,0,3920,
3922,1,0,0,0,3921,3923,3,230,115,0,3922,3921,1,0,0,0,3922,3923,1,0,0,0,3923,
3925,1,0,0,0,3924,3926,3,294,147,0,3925,3924,1,0,0,0,3925,3926,1,0,0,0,3926,
3955,1,0,0,0,3927,3931,5,152,0,0,3928,3930,3,272,136,0,3929,3928,1,0,0,0,
3930,3933,1,0,0,0,3931,3929,1,0,0,0,3931,3932,1,0,0,0,3932,3934,1,0,0,0,
3933,3931,1,0,0,0,3934,3935,3,274,137,0,3935,3937,3,284,142,0,3936,3938,
3,286,143,0,3937,3936,1,0,0,0,3937,3938,1,0,0,0,3938,3940,1,0,0,0,3939,3941,
3,288,144,0,3940,3939,1,0,0,0,3940,3941,1,0,0,0,3941,3943,1,0,0,0,3942,3944,
3,290,145,0,3943,3942,1,0,0,0,3943,3944,1,0,0,0,3944,3946,1,0,0,0,3945,3947,
3,230,115,0,3946,3945,1,0,0,0,3946,3947,1,0,0,0,3947,3949,1,0,0,0,3948,3950,
3,294,147,0,3949,3948,1,0,0,0,3949,3950,1,0,0,0,3950,3952,1,0,0,0,3951,3953,
3,278,139,0,3952,3951,1,0,0,0,3952,3953,1,0,0,0,3953,3955,1,0,0,0,3954,3900,
1,0,0,0,3954,3927,1,0,0,0,3955,253,1,0,0,0,3956,3960,5,152,0,0,3957,3959,
3,272,136,0,3958,3957,1,0,0,0,3959,3962,1,0,0,0,3960,3958,1,0,0,0,3960,3961,
1,0,0,0,3961,3963,1,0,0,0,3962,3960,1,0,0,0,3963,3964,3,274,137,0,3964,3966,
3,284,142,0,3965,3967,3,286,143,0,3966,3965,1,0,0,0,3966,3967,1,0,0,0,3967,
3969,1,0,0,0,3968,3970,3,288,144,0,3969,3968,1,0,0,0,3969,3970,1,0,0,0,3970,
3972,1,0,0,0,3971,3973,3,290,145,0,3972,3971,1,0,0,0,3972,3973,1,0,0,0,3973,
3975,1,0,0,0,3974,3976,3,230,115,0,3975,3974,1,0,0,0,3975,3976,1,0,0,0,3976,
3978,1,0,0,0,3977,3979,3,294,147,0,3978,3977,1,0,0,0,3978,3979,1,0,0,0,3979,
255,1,0,0,0,3980,3982,5,180,0,0,3981,3983,7,44,0,0,3982,3981,1,0,0,0,3982,
3983,1,0,0,0,3983,3984,1,0,0,0,3984,3985,3,250,125,0,3985,257,1,0,0,0,3986,
3988,5,180,0,0,3987,3989,7,44,0,0,3988,3987,1,0,0,0,3988,3989,1,0,0,0,3989,
3992,1,0,0,0,3990,3993,3,254,127,0,3991,3993,3,250,125,0,3992,3990,1,0,0,
0,3992,3991,1,0,0,0,3993,259,1,0,0,0,3994,4009,5,94,0,0,3995,4010,3,254,
127,0,3996,4010,3,250,125,0,3997,4000,5,1133,0,0,3998,4001,3,254,127,0,3999,
4001,3,250,125,0,4000,3998,1,0,0,0,4000,3999,1,0,0,0,4001,4002,1,0,0,0,4002,
4007,5,1134,0,0,4003,4005,5,12,0,0,4004,4003,1,0,0,0,4004,4005,1,0,0,0,4005,
4006,1,0,0,0,4006,4008,3,584,292,0,4007,4004,1,0,0,0,4007,4008,1,0,0,0,4008,
4010,1,0,0,0,4009,3995,1,0,0,0,4009,3996,1,0,0,0,4009,3997,1,0,0,0,4010,
261,1,0,0,0,4011,4012,5,278,0,0,4012,4013,5,1133,0,0,4013,4014,5,1148,0,
0,4014,4015,5,1135,0,0,4015,4016,5,1148,0,0,4016,4017,5,365,0,0,4017,4018,
5,1133,0,0,4018,4019,3,264,132,0,4019,4020,5,1134,0,0,4020,4025,5,1134,0,
0,4021,4023,5,12,0,0,4022,4021,1,0,0,0,4022,4023,1,0,0,0,4023,4024,1,0,0,
0,4024,4026,3,584,292,0,4025,4022,1,0,0,0,4025,4026,1,0,0,0,4026,263,1,0,
0,0,4027,4032,3,266,133,0,4028,4029,5,1135,0,0,4029,4031,3,266,133,0,4030,
4028,1,0,0,0,4031,4034,1,0,0,0,4032,4030,1,0,0,0,4032,4033,1,0,0,0,4033,
265,1,0,0,0,4034,4032,1,0,0,0,4035,4052,3,556,278,0,4036,4037,5,65,0,0,4037,
4053,5,284,0,0,4038,4050,3,604,302,0,4039,4040,5,285,0,0,4040,4042,5,1148,
0,0,4041,4043,3,268,134,0,4042,4041,1,0,0,0,4042,4043,1,0,0,0,4043,4045,
1,0,0,0,4044,4046,3,270,135,0,4045,4044,1,0,0,0,4045,4046,1,0,0,0,4046,4051,
1,0,0,0,4047,4048,5,60,0,0,4048,4049,5,285,0,0,4049,4051,5,1148,0,0,4050,
4039,1,0,0,0,4050,4047,1,0,0,0,4051,4053,1,0,0,0,4052,4036,1,0,0,0,4052,
4038,1,0,0,0,4053,4065,1,0,0,0,4054,4056,5,283,0,0,4055,4057,5,285,0,0,4056,
4055,1,0,0,0,4056,4057,1,0,0,0,4057,4058,1,0,0,0,4058,4059,5,1148,0,0,4059,
4060,5,365,0,0,4060,4061,5,1133,0,0,4061,4062,3,264,132,0,4062,4063,5,1134,
0,0,4063,4065,1,0,0,0,4064,4035,1,0,0,0,4064,4054,1,0,0,0,4065,267,1,0,0,
0,4066,4071,5,116,0,0,4067,4071,5,411,0,0,4068,4069,5,42,0,0,4069,4071,3,
634,317,0,4070,4066,1,0,0,0,4070,4067,1,0,0,0,4070,4068,1,0,0,0,4071,4072,
1,0,0,0,4072,4073,5,118,0,0,4073,4074,5,55,0,0,4074,269,1,0,0,0,4075,4080,
5,116,0,0,4076,4080,5,411,0,0,4077,4078,5,42,0,0,4078,4080,3,634,317,0,4079,
4075,1,0,0,0,4079,4076,1,0,0,0,4079,4077,1,0,0,0,4080,4081,1,0,0,0,4081,
4082,5,118,0,0,4082,4083,5,411,0,0,4083,271,1,0,0,0,4084,4093,7,52,0,0,4085,
4093,5,75,0,0,4086,4093,5,171,0,0,4087,4093,5,166,0,0,4088,4093,5,164,0,
0,4089,4093,5,625,0,0,4090,4093,7,53,0,0,4091,4093,5,165,0,0,4092,4084,1,
0,0,0,4092,4085,1,0,0,0,4092,4086,1,0,0,0,4092,4087,1,0,0,0,4092,4088,1,
0,0,0,4092,4089,1,0,0,0,4092,4090,1,0,0,0,4092,4091,1,0,0,0,4093,273,1,0,
0,0,4094,4097,5,1117,0,0,4095,4097,3,276,138,0,4096,4094,1,0,0,0,4096,4095,
1,0,0,0,4097,4102,1,0,0,0,4098,4099,5,1135,0,0,4099,4101,3,276,138,0,4100,
4098,1,0,0,0,4101,4104,1,0,0,0,4102,4100,1,0,0,0,4102,4103,1,0,0,0,4103,
275,1,0,0,0,4104,4102,1,0,0,0,4105,4106,3,550,275,0,4106,4107,5,1132,0,0,
4107,4108,5,1117,0,0,4108,4135,1,0,0,0,4109,4114,3,556,278,0,4110,4112,5,
12,0,0,4111,4110,1,0,0,0,4111,4112,1,0,0,0,4112,4113,1,0,0,0,4113,4115,3,
584,292,0,4114,4111,1,0,0,0,4114,4115,1,0,0,0,4115,4135,1,0,0,0,4116,4121,
3,648,324,0,4117,4119,5,12,0,0,4118,4117,1,0,0,0,4118,4119,1,0,0,0,4119,
4120,1,0,0,0,4120,4122,3,584,292,0,4121,4118,1,0,0,0,4121,4122,1,0,0,0,4122,
4135,1,0,0,0,4123,4124,5,1159,0,0,4124,4126,5,1108,0,0,4125,4123,1,0,0,0,
4125,4126,1,0,0,0,4126,4127,1,0,0,0,4127,4132,3,688,344,0,4128,4130,5,12,
0,0,4129,4128,1,0,0,0,4129,4130,1,0,0,0,4130,4131,1,0,0,0,4131,4133,3,584,
292,0,4132,4129,1,0,0,0,4132,4133,1,0,0,0,4133,4135,1,0,0,0,4134,4105,1,
0,0,0,4134,4109,1,0,0,0,4134,4116,1,0,0,0,4134,4125,1,0,0,0,4135,277,1,0,
0,0,4136,4137,5,87,0,0,4137,4142,3,210,105,0,4138,4139,5,1135,0,0,4139,4141,
3,210,105,0,4140,4138,1,0,0,0,4141,4144,1,0,0,0,4142,4140,1,0,0,0,4142,4143,
1,0,0,0,4143,4173,1,0,0,0,4144,4142,1,0,0,0,4145,4146,5,87,0,0,4146,4147,
5,400,0,0,4147,4173,5,1148,0,0,4148,4149,5,87,0,0,4149,4150,5,127,0,0,4150,
4154,5,1148,0,0,4151,4152,5,25,0,0,4152,4153,5,153,0,0,4153,4155,3,568,284,
0,4154,4151,1,0,0,0,4154,4155,1,0,0,0,4155,4162,1,0,0,0,4156,4158,7,41,0,
0,4157,4159,3,280,140,0,4158,4157,1,0,0,0,4159,4160,1,0,0,0,4160,4158,1,
0,0,0,4160,4161,1,0,0,0,4161,4163,1,0,0,0,4162,4156,1,0,0,0,4162,4163,1,
0,0,0,4163,4170,1,0,0,0,4164,4166,5,101,0,0,4165,4167,3,282,141,0,4166,4165,
1,0,0,0,4167,4168,1,0,0,0,4168,4166,1,0,0,0,4168,4169,1,0,0,0,4169,4171,
1,0,0,0,4170,4164,1,0,0,0,4170,4171,1,0,0,0,4171,4173,1,0,0,0,4172,4136,
1,0,0,0,4172,4145,1,0,0,0,4172,4148,1,0,0,0,4173,279,1,0,0,0,4174,4175,5,
173,0,0,4175,4176,5,19,0,0,4176,4187,5,1148,0,0,4177,4179,5,122,0,0,4178,
4177,1,0,0,0,4178,4179,1,0,0,0,4179,4180,1,0,0,0,4180,4181,5,56,0,0,4181,
4182,5,19,0,0,4182,4187,5,1148,0,0,4183,4184,5,58,0,0,4184,4185,5,19,0,0,
4185,4187,5,1148,0,0,4186,4174,1,0,0,0,4186,4178,1,0,0,0,4186,4183,1,0,0,
0,4187,281,1,0,0,0,4188,4189,5,169,0,0,4189,4190,5,19,0,0,4190,4195,5,1148,
0,0,4191,4192,5,173,0,0,4192,4193,5,19,0,0,4193,4195,5,1148,0,0,4194,4188,
1,0,0,0,4194,4191,1,0,0,0,4195,283,1,0,0,0,4196,4197,5,68,0,0,4197,4199,
3,234,117,0,4198,4196,1,0,0,0,4198,4199,1,0,0,0,4199,4202,1,0,0,0,4200,4201,
5,190,0,0,4201,4203,3,688,344,0,4202,4200,1,0,0,0,4202,4203,1,0,0,0,4203,
285,1,0,0,0,4204,4205,5,73,0,0,4205,4206,5,19,0,0,4206,4211,3,292,146,0,
4207,4208,5,1135,0,0,4208,4210,3,292,146,0,4209,4207,1,0,0,0,4210,4213,1,
0,0,0,4211,4209,1,0,0,0,4211,4212,1,0,0,0,4212,4216,1,0,0,0,4213,4211,1,
0,0,0,4214,4215,5,192,0,0,4215,4217,5,598,0,0,4216,4214,1,0,0,0,4216,4217,
1,0,0,0,4217,287,1,0,0,0,4218,4219,5,74,0,0,4219,4220,3,688,344,0,4220,289,
1,0,0,0,4221,4222,5,676,0,0,4222,4223,3,666,333,0,4223,4224,5,12,0,0,4224,
4225,5,1133,0,0,4225,4226,3,664,332,0,4226,4236,5,1134,0,0,4227,4228,5,1135,
0,0,4228,4229,3,666,333,0,4229,4230,5,12,0,0,4230,4231,5,1133,0,0,4231,4232,
3,664,332,0,4232,4233,5,1134,0,0,4233,4235,1,0,0,0,4234,4227,1,0,0,0,4235,
4238,1,0,0,0,4236,4234,1,0,0,0,4236,4237,1,0,0,0,4237,291,1,0,0,0,4238,4236,
1,0,0,0,4239,4241,3,688,344,0,4240,4242,7,48,0,0,4241,4240,1,0,0,0,4241,
4242,1,0,0,0,4242,293,1,0,0,0,4243,4254,5,99,0,0,4244,4245,3,296,148,0,4245,
4246,5,1135,0,0,4246,4248,1,0,0,0,4247,4244,1,0,0,0,4247,4248,1,0,0,0,4248,
4249,1,0,0,0,4249,4255,3,296,148,0,4250,4251,3,296,148,0,4251,4252,5,532,
0,0,4252,4253,3,296,148,0,4253,4255,1,0,0,0,4254,4247,1,0,0,0,4254,4250,
1,0,0,0,4255,295,1,0,0,0,4256,4260,3,590,295,0,4257,4260,3,566,283,0,4258,
4260,3,586,293,0,4259,4256,1,0,0,0,4259,4257,1,0,0,0,4259,4258,1,0,0,0,4260,
297,1,0,0,0,4261,4262,5,629,0,0,4262,4271,5,653,0,0,4263,4268,3,320,160,
0,4264,4265,5,1135,0,0,4265,4267,3,320,160,0,4266,4264,1,0,0,0,4267,4270,
1,0,0,0,4268,4266,1,0,0,0,4268,4269,1,0,0,0,4269,4272,1,0,0,0,4270,4268,
1,0,0,0,4271,4263,1,0,0,0,4271,4272,1,0,0,0,4272,299,1,0,0,0,4273,4275,5,
344,0,0,4274,4276,5,678,0,0,4275,4274,1,0,0,0,4275,4276,1,0,0,0,4276,301,
1,0,0,0,4277,4279,5,369,0,0,4278,4280,5,678,0,0,4279,4278,1,0,0,0,4279,4280,
1,0,0,0,4280,4286,1,0,0,0,4281,4283,5,10,0,0,4282,4284,5,521,0,0,4283,4282,
1,0,0,0,4283,4284,1,0,0,0,4284,4285,1,0,0,0,4285,4287,5,353,0,0,4286,4281,
1,0,0,0,4286,4287,1,0,0,0,4287,4292,1,0,0,0,4288,4290,5,521,0,0,4289,4288,
1,0,0,0,4289,4290,1,0,0,0,4290,4291,1,0,0,0,4291,4293,5,138,0,0,4292,4289,
1,0,0,0,4292,4293,1,0,0,0,4293,303,1,0,0,0,4294,4296,5,597,0,0,4295,4297,
5,678,0,0,4296,4295,1,0,0,0,4296,4297,1,0,0,0,4297,4303,1,0,0,0,4298,4300,
5,10,0,0,4299,4301,5,521,0,0,4300,4299,1,0,0,0,4300,4301,1,0,0,0,4301,4302,
1,0,0,0,4302,4304,5,353,0,0,4303,4298,1,0,0,0,4303,4304,1,0,0,0,4304,4309,
1,0,0,0,4305,4307,5,521,0,0,4306,4305,1,0,0,0,4306,4307,1,0,0,0,4307,4308,
1,0,0,0,4308,4310,5,138,0,0,4309,4306,1,0,0,0,4309,4310,1,0,0,0,4310,305,
1,0,0,0,4311,4312,5,604,0,0,4312,4313,3,584,292,0,4313,307,1,0,0,0,4314,
4316,5,597,0,0,4315,4317,5,678,0,0,4316,4315,1,0,0,0,4316,4317,1,0,0,0,4317,
4318,1,0,0,0,4318,4320,5,175,0,0,4319,4321,5,604,0,0,4320,4319,1,0,0,0,4320,
4321,1,0,0,0,4321,4322,1,0,0,0,4322,4323,3,584,292,0,4323,309,1,0,0,0,4324,
4325,5,138,0,0,4325,4326,5,604,0,0,4326,4327,3,584,292,0,4327,311,1,0,0,
0,4328,4329,5,103,0,0,4329,4330,7,54,0,0,4330,4335,3,322,161,0,4331,4332,
5,1135,0,0,4332,4334,3,322,161,0,4333,4331,1,0,0,0,4334,4337,1,0,0,0,4335,
4333,1,0,0,0,4335,4336,1,0,0,0,4336,4339,1,0,0,0,4337,4335,1,0,0,0,4338,
4340,3,646,323,0,4339,4338,1,0,0,0,4339,4340,1,0,0,0,4340,313,1,0,0,0,4341,
4342,5,182,0,0,4342,4343,5,742,0,0,4343,315,1,0,0,0,4344,4345,5,153,0,0,
4345,4346,5,340,0,0,4346,4347,5,1124,0,0,4347,4348,7,24,0,0,4348,317,1,0,
0,0,4349,4351,5,153,0,0,4350,4352,7,55,0,0,4351,4350,1,0,0,0,4351,4352,1,
0,0,0,4352,4353,1,0,0,0,4353,4354,5,653,0,0,4354,4359,3,326,163,0,4355,4356,
5,1135,0,0,4356,4358,3,326,163,0,4357,4355,1,0,0,0,4358,4361,1,0,0,0,4359,
4357,1,0,0,0,4359,4360,1,0,0,0,4360,319,1,0,0,0,4361,4359,1,0,0,0,4362,4363,
5,192,0,0,4363,4364,5,377,0,0,4364,4370,5,616,0,0,4365,4366,5,134,0,0,4366,
4370,5,193,0,0,4367,4368,5,134,0,0,4368,4370,5,538,0,0,4369,4362,1,0,0,0,
4369,4365,1,0,0,0,4369,4367,1,0,0,0,4370,321,1,0,0,0,4371,4376,3,552,276,
0,4372,4374,5,12,0,0,4373,4372,1,0,0,0,4373,4374,1,0,0,0,4374,4375,1,0,0,
0,4375,4377,3,584,292,0,4376,4373,1,0,0,0,4376,4377,1,0,0,0,4377,4378,1,
0,0,0,4378,4379,3,324,162,0,4379,323,1,0,0,0,4380,4382,5,134,0,0,4381,4383,
5,474,0,0,4382,4381,1,0,0,0,4382,4383,1,0,0,0,4383,4389,1,0,0,0,4384,4386,
5,106,0,0,4385,4384,1,0,0,0,4385,4386,1,0,0,0,4386,4387,1,0,0,0,4387,4389,
5,193,0,0,4388,4380,1,0,0,0,4388,4385,1,0,0,0,4389,325,1,0,0,0,4390,4391,
5,464,0,0,4391,4392,5,472,0,0,4392,4398,3,328,164,0,4393,4394,5,134,0,0,
4394,4398,5,193,0,0,4395,4396,5,134,0,0,4396,4398,5,538,0,0,4397,4390,1,
0,0,0,4397,4393,1,0,0,0,4397,4395,1,0,0,0,4398,327,1,0,0,0,4399,4400,5,799,
0,0,4400,4407,5,134,0,0,4401,4402,5,134,0,0,4402,4407,5,800,0,0,4403,4404,
5,134,0,0,4404,4407,5,801,0,0,4405,4407,5,802,0,0,4406,4399,1,0,0,0,4406,
4401,1,0,0,0,4406,4403,1,0,0,0,4406,4405,1,0,0,0,4407,329,1,0,0,0,4408,4409,
5,24,0,0,4409,4410,5,477,0,0,4410,4411,5,175,0,0,4411,4416,3,348,174,0,4412,
4413,5,1135,0,0,4413,4415,3,348,174,0,4414,4412,1,0,0,0,4415,4418,1,0,0,
0,4416,4414,1,0,0,0,4416,4417,1,0,0,0,4417,4420,1,0,0,0,4418,4416,1,0,0,
0,4419,4421,3,356,178,0,4420,4419,1,0,0,0,4420,4421,1,0,0,0,4421,331,1,0,
0,0,4422,4423,5,24,0,0,4423,4424,5,588,0,0,4424,4425,5,429,0,0,4425,4430,
3,358,179,0,4426,4427,5,1135,0,0,4427,4429,3,358,179,0,4428,4426,1,0,0,0,
4429,4432,1,0,0,0,4430,4428,1,0,0,0,4430,4431,1,0,0,0,4431,333,1,0,0,0,4432,
4430,1,0,0,0,4433,4434,5,132,0,0,4434,4435,7,56,0,0,4435,4440,5,476,0,0,
4436,4437,5,175,0,0,4437,4441,5,1148,0,0,4438,4439,5,15,0,0,4439,4441,5,
1148,0,0,4440,4436,1,0,0,0,4440,4438,1,0,0,0,4441,335,1,0,0,0,4442,4443,
5,589,0,0,4443,4444,5,477,0,0,4444,337,1,0,0,0,4445,4446,5,589,0,0,4446,
4448,5,614,0,0,4447,4449,5,6,0,0,4448,4447,1,0,0,0,4448,4449,1,0,0,0,4449,
4451,1,0,0,0,4450,4452,3,356,178,0,4451,4450,1,0,0,0,4451,4452,1,0,0,0,4452,
339,1,0,0,0,4453,4454,5,629,0,0,4454,4463,5,614,0,0,4455,4460,3,362,181,
0,4456,4457,5,1135,0,0,4457,4459,3,362,181,0,4458,4456,1,0,0,0,4459,4462,
1,0,0,0,4460,4458,1,0,0,0,4460,4461,1,0,0,0,4461,4464,1,0,0,0,4462,4460,
1,0,0,0,4463,4455,1,0,0,0,4463,4464,1,0,0,0,4464,4467,1,0,0,0,4465,4466,
5,663,0,0,4466,4468,3,364,182,0,4467,4465,1,0,0,0,4467,4468,1,0,0,0,4468,
4472,1,0,0,0,4469,4471,3,366,183,0,4470,4469,1,0,0,0,4471,4474,1,0,0,0,4472,
4470,1,0,0,0,4472,4473,1,0,0,0,4473,4476,1,0,0,0,4474,4472,1,0,0,0,4475,
4477,3,356,178,0,4476,4475,1,0,0,0,4476,4477,1,0,0,0,4477,341,1,0,0,0,4478,
4479,5,635,0,0,4479,4488,5,614,0,0,4480,4485,3,362,181,0,4481,4482,5,1135,
0,0,4482,4484,3,362,181,0,4483,4481,1,0,0,0,4484,4487,1,0,0,0,4485,4483,
1,0,0,0,4485,4486,1,0,0,0,4486,4489,1,0,0,0,4487,4485,1,0,0,0,4488,4480,
1,0,0,0,4488,4489,1,0,0,0,4489,343,1,0,0,0,4490,4491,5,629,0,0,4491,4492,
5,441,0,0,4492,345,1,0,0,0,4493,4494,5,635,0,0,4494,4495,5,441,0,0,4495,
347,1,0,0,0,4496,4497,3,350,175,0,4497,4498,5,1124,0,0,4498,4499,5,1148,
0,0,4499,4526,1,0,0,0,4500,4501,3,352,176,0,4501,4502,5,1124,0,0,4502,4503,
3,590,295,0,4503,4526,1,0,0,0,4504,4505,3,354,177,0,4505,4506,5,1124,0,0,
4506,4507,7,24,0,0,4507,4526,1,0,0,0,4508,4509,5,481,0,0,4509,4510,5,1124,
0,0,4510,4526,5,1151,0,0,4511,4512,5,449,0,0,4512,4513,5,1124,0,0,4513,4522,
5,1133,0,0,4514,4519,3,584,292,0,4515,4516,5,1135,0,0,4516,4518,3,584,292,
0,4517,4515,1,0,0,0,4518,4521,1,0,0,0,4519,4517,1,0,0,0,4519,4520,1,0,0,
0,4520,4523,1,0,0,0,4521,4519,1,0,0,0,4522,4514,1,0,0,0,4522,4523,1,0,0,
0,4523,4524,1,0,0,0,4524,4526,5,1134,0,0,4525,4496,1,0,0,0,4525,4500,1,0,
0,0,4525,4504,1,0,0,0,4525,4508,1,0,0,0,4525,4511,1,0,0,0,4526,349,1,0,0,
0,4527,4528,7,57,0,0,4528,351,1,0,0,0,4529,4530,7,58,0,0,4530,353,1,0,0,
0,4531,4532,7,59,0,0,4532,355,1,0,0,0,4533,4534,5,65,0,0,4534,4535,5,355,
0,0,4535,4536,5,1148,0,0,4536,357,1,0,0,0,4537,4538,5,581,0,0,4538,4539,
5,1124,0,0,4539,4540,5,1133,0,0,4540,4541,3,616,308,0,4541,4542,5,1134,0,
0,4542,4587,1,0,0,0,4543,4544,5,583,0,0,4544,4545,5,1124,0,0,4545,4546,5,
1133,0,0,4546,4547,3,616,308,0,4547,4548,5,1134,0,0,4548,4587,1,0,0,0,4549,
4550,5,582,0,0,4550,4551,5,1124,0,0,4551,4552,5,1133,0,0,4552,4553,3,620,
310,0,4553,4554,5,1134,0,0,4554,4587,1,0,0,0,4555,4556,5,584,0,0,4556,4557,
5,1124,0,0,4557,4558,5,1133,0,0,4558,4559,3,620,310,0,4559,4560,5,1134,0,
0,4560,4587,1,0,0,0,4561,4562,5,586,0,0,4562,4563,5,1124,0,0,4563,4564,5,
1133,0,0,4564,4565,3,630,315,0,4565,4566,5,1134,0,0,4566,4587,1,0,0,0,4567,
4568,5,587,0,0,4568,4569,5,1124,0,0,4569,4570,5,1133,0,0,4570,4571,3,630,
315,0,4571,4572,5,1134,0,0,4572,4587,1,0,0,0,4573,4574,5,585,0,0,4574,4575,
5,1124,0,0,4575,4576,5,1133,0,0,4576,4581,3,360,180,0,4577,4578,5,1135,0,
0,4578,4580,3,360,180,0,4579,4577,1,0,0,0,4580,4583,1,0,0,0,4581,4579,1,
0,0,0,4581,4582,1,0,0,0,4582,4584,1,0,0,0,4583,4581,1,0,0,0,4584,4585,5,
1134,0,0,4585,4587,1,0,0,0,4586,4537,1,0,0,0,4586,4543,1,0,0,0,4586,4549,
1,0,0,0,4586,4555,1,0,0,0,4586,4561,1,0,0,0,4586,4567,1,0,0,0,4586,4573,
1,0,0,0,4587,359,1,0,0,0,4588,4589,5,1133,0,0,4589,4590,3,552,276,0,4590,
4591,5,1135,0,0,4591,4592,3,552,276,0,4592,4593,5,1134,0,0,4593,361,1,0,
0,0,4594,4595,7,60,0,0,4595,363,1,0,0,0,4596,4597,7,61,0,0,4597,4598,5,1124,
0,0,4598,4615,3,368,184,0,4599,4600,5,483,0,0,4600,4601,5,1124,0,0,4601,
4602,5,1148,0,0,4602,4603,5,1135,0,0,4603,4604,5,484,0,0,4604,4605,5,1124,
0,0,4605,4615,3,590,295,0,4606,4607,5,575,0,0,4607,4608,5,1124,0,0,4608,
4609,5,1148,0,0,4609,4610,5,1135,0,0,4610,4611,5,576,0,0,4611,4612,5,1124,
0,0,4612,4615,3,590,295,0,4613,4615,5,623,0,0,4614,4596,1,0,0,0,4614,4599,
1,0,0,0,4614,4606,1,0,0,0,4614,4613,1,0,0,0,4615,365,1,0,0,0,4616,4617,5,
665,0,0,4617,4618,5,1124,0,0,4618,4629,5,1148,0,0,4619,4620,5,551,0,0,4620,
4621,5,1124,0,0,4621,4629,5,1148,0,0,4622,4623,5,391,0,0,4623,4624,5,1124,
0,0,4624,4629,5,1148,0,0,4625,4626,5,555,0,0,4626,4627,5,1124,0,0,4627,4629,
5,1148,0,0,4628,4616,1,0,0,0,4628,4619,1,0,0,0,4628,4622,1,0,0,0,4628,4625,
1,0,0,0,4629,367,1,0,0,0,4630,4635,3,576,288,0,4631,4632,5,1135,0,0,4632,
4634,3,576,288,0,4633,4631,1,0,0,0,4634,4637,1,0,0,0,4635,4633,1,0,0,0,4635,
4636,1,0,0,0,4636,4640,1,0,0,0,4637,4635,1,0,0,0,4638,4640,5,1148,0,0,4639,
4630,1,0,0,0,4639,4638,1,0,0,0,4640,369,1,0,0,0,4641,4642,5,681,0,0,4642,
4643,7,62,0,0,4643,4645,3,578,289,0,4644,4646,7,63,0,0,4645,4644,1,0,0,0,
4645,4646,1,0,0,0,4646,371,1,0,0,0,4647,4648,5,681,0,0,4648,4649,5,407,0,
0,4649,4655,3,578,289,0,4650,4653,5,643,0,0,4651,4652,5,65,0,0,4652,4654,
5,509,0,0,4653,4651,1,0,0,0,4653,4654,1,0,0,0,4654,4656,1,0,0,0,4655,4650,
1,0,0,0,4655,4656,1,0,0,0,4656,373,1,0,0,0,4657,4658,5,681,0,0,4658,4659,
5,560,0,0,4659,4660,3,578,289,0,4660,375,1,0,0,0,4661,4662,5,681,0,0,4662,
4663,5,369,0,0,4663,4666,3,578,289,0,4664,4665,5,536,0,0,4665,4667,5,553,
0,0,4666,4664,1,0,0,0,4666,4667,1,0,0,0,4667,377,1,0,0,0,4668,4669,5,681,
0,0,4669,4670,5,597,0,0,4670,4671,3,578,289,0,4671,379,1,0,0,0,4672,4673,
5,681,0,0,4673,4676,5,570,0,0,4674,4675,5,32,0,0,4675,4677,3,578,289,0,4676,
4674,1,0,0,0,4676,4677,1,0,0,0,4677,381,1,0,0,0,4678,4679,5,560,0,0,4679,
4680,3,584,292,0,4680,4683,5,68,0,0,4681,4684,5,1148,0,0,4682,4684,5,1159,
0,0,4683,4681,1,0,0,0,4683,4682,1,0,0,0,4684,383,1,0,0,0,4685,4686,5,708,
0,0,4686,4689,3,584,292,0,4687,4688,5,187,0,0,4688,4690,3,632,316,0,4689,
4687,1,0,0,0,4689,4690,1,0,0,0,4690,385,1,0,0,0,4691,4692,7,64,0,0,4692,
4693,5,560,0,0,4693,4694,3,584,292,0,4694,387,1,0,0,0,4695,4698,3,390,195,
0,4696,4698,3,4,2,0,4697,4695,1,0,0,0,4697,4696,1,0,0,0,4698,389,1,0,0,0,
4699,4700,3,584,292,0,4700,4701,5,1144,0,0,4701,4703,1,0,0,0,4702,4699,1,
0,0,0,4702,4703,1,0,0,0,4703,4704,1,0,0,0,4704,4710,5,344,0,0,4705,4706,
3,410,205,0,4706,4707,5,1136,0,0,4707,4709,1,0,0,0,4708,4705,1,0,0,0,4709,
4712,1,0,0,0,4710,4708,1,0,0,0,4710,4711,1,0,0,0,4711,4718,1,0,0,0,4712,
4710,1,0,0,0,4713,4714,3,412,206,0,4714,4715,5,1136,0,0,4715,4717,1,0,0,
0,4716,4713,1,0,0,0,4717,4720,1,0,0,0,4718,4716,1,0,0,0,4718,4719,1,0,0,
0,4719,4726,1,0,0,0,4720,4718,1,0,0,0,4721,4722,3,414,207,0,4722,4723,5,
1136,0,0,4723,4725,1,0,0,0,4724,4721,1,0,0,0,4725,4728,1,0,0,0,4726,4724,
1,0,0,0,4726,4727,1,0,0,0,4727,4734,1,0,0,0,4728,4726,1,0,0,0,4729,4730,
3,416,208,0,4730,4731,5,1136,0,0,4731,4733,1,0,0,0,4732,4729,1,0,0,0,4733,
4736,1,0,0,0,4734,4732,1,0,0,0,4734,4735,1,0,0,0,4735,4740,1,0,0,0,4736,
4734,1,0,0,0,4737,4739,3,420,210,0,4738,4737,1,0,0,0,4739,4742,1,0,0,0,4740,
4738,1,0,0,0,4740,4741,1,0,0,0,4741,4743,1,0,0,0,4742,4740,1,0,0,0,4743,
4745,5,407,0,0,4744,4746,3,584,292,0,4745,4744,1,0,0,0,4745,4746,1,0,0,0,
4746,391,1,0,0,0,4747,4750,5,22,0,0,4748,4751,3,584,292,0,4749,4751,3,688,
344,0,4750,4748,1,0,0,0,4750,4749,1,0,0,0,4750,4751,1,0,0,0,4751,4753,1,
0,0,0,4752,4754,3,422,211,0,4753,4752,1,0,0,0,4754,4755,1,0,0,0,4755,4753,
1,0,0,0,4755,4756,1,0,0,0,4756,4763,1,0,0,0,4757,4759,5,53,0,0,4758,4760,
3,420,210,0,4759,4758,1,0,0,0,4760,4761,1,0,0,0,4761,4759,1,0,0,0,4761,4762,
1,0,0,0,4762,4764,1,0,0,0,4763,4757,1,0,0,0,4763,4764,1,0,0,0,4764,4765,
1,0,0,0,4765,4766,5,407,0,0,4766,4767,5,22,0,0,4767,393,1,0,0,0,4768,4769,
5,77,0,0,4769,4770,3,688,344,0,4770,4772,5,174,0,0,4771,4773,3,420,210,0,
4772,4771,1,0,0,0,4773,4774,1,0,0,0,4774,4772,1,0,0,0,4774,4775,1,0,0,0,
4775,4779,1,0,0,0,4776,4778,3,424,212,0,4777,4776,1,0,0,0,4778,4781,1,0,
0,0,4779,4777,1,0,0,0,4779,4780,1,0,0,0,4780,4788,1,0,0,0,4781,4779,1,0,
0,0,4782,4784,5,53,0,0,4783,4785,3,420,210,0,4784,4783,1,0,0,0,4785,4786,
1,0,0,0,4786,4784,1,0,0,0,4786,4787,1,0,0,0,4787,4789,1,0,0,0,4788,4782,
1,0,0,0,4788,4789,1,0,0,0,4789,4790,1,0,0,0,4790,4791,5,407,0,0,4791,4792,
5,77,0,0,4792,395,1,0,0,0,4793,4794,5,89,0,0,4794,4795,3,584,292,0,4795,
397,1,0,0,0,4796,4797,5,96,0,0,4797,4798,3,584,292,0,4798,399,1,0,0,0,4799,
4800,3,584,292,0,4800,4801,5,1144,0,0,4801,4803,1,0,0,0,4802,4799,1,0,0,
0,4802,4803,1,0,0,0,4803,4804,1,0,0,0,4804,4806,5,105,0,0,4805,4807,3,420,
210,0,4806,4805,1,0,0,0,4807,4808,1,0,0,0,4808,4806,1,0,0,0,4808,4809,1,
0,0,0,4809,4810,1,0,0,0,4810,4811,5,407,0,0,4811,4813,5,105,0,0,4812,4814,
3,584,292,0,4813,4812,1,0,0,0,4813,4814,1,0,0,0,4814,401,1,0,0,0,4815,4816,
3,584,292,0,4816,4817,5,1144,0,0,4817,4819,1,0,0,0,4818,4815,1,0,0,0,4818,
4819,1,0,0,0,4819,4820,1,0,0,0,4820,4822,5,140,0,0,4821,4823,3,420,210,0,
4822,4821,1,0,0,0,4823,4824,1,0,0,0,4824,4822,1,0,0,0,4824,4825,1,0,0,0,
4825,4826,1,0,0,0,4826,4827,5,663,0,0,4827,4828,3,688,344,0,4828,4829,5,
407,0,0,4829,4831,5,140,0,0,4830,4832,3,584,292,0,4831,4830,1,0,0,0,4831,
4832,1,0,0,0,4832,403,1,0,0,0,4833,4834,5,146,0,0,4834,4835,3,688,344,0,
4835,405,1,0,0,0,4836,4837,3,584,292,0,4837,4838,5,1144,0,0,4838,4840,1,
0,0,0,4839,4836,1,0,0,0,4839,4840,1,0,0,0,4840,4841,1,0,0,0,4841,4842,5,
191,0,0,4842,4843,3,688,344,0,4843,4845,5,399,0,0,4844,4846,3,420,210,0,
4845,4844,1,0,0,0,4846,4847,1,0,0,0,4847,4845,1,0,0,0,4847,4848,1,0,0,0,
4848,4849,1,0,0,0,4849,4850,5,407,0,0,4850,4852,5,191,0,0,4851,4853,3,584,
292,0,4852,4851,1,0,0,0,4852,4853,1,0,0,0,4853,407,1,0,0,0,4854,4855,5,361,
0,0,4855,4870,3,584,292,0,4856,4861,5,64,0,0,4857,4859,5,520,0,0,4858,4857,
1,0,0,0,4858,4859,1,0,0,0,4859,4860,1,0,0,0,4860,4862,5,68,0,0,4861,4858,
1,0,0,0,4861,4862,1,0,0,0,4862,4863,1,0,0,0,4863,4864,3,584,292,0,4864,4865,
5,87,0,0,4865,4866,3,616,308,0,4866,4870,1,0,0,0,4867,4868,5,539,0,0,4868,
4870,3,584,292,0,4869,4854,1,0,0,0,4869,4856,1,0,0,0,4869,4867,1,0,0,0,4870,
409,1,0,0,0,4871,4872,5,41,0,0,4872,4873,3,616,308,0,4873,4876,3,604,302,
0,4874,4875,5,42,0,0,4875,4877,3,688,344,0,4876,4874,1,0,0,0,4876,4877,1,
0,0,0,4877,411,1,0,0,0,4878,4879,5,41,0,0,4879,4880,3,584,292,0,4880,4881,
5,29,0,0,4881,4888,5,65,0,0,4882,4889,3,590,295,0,4883,4885,5,162,0,0,4884,
4886,5,669,0,0,4885,4884,1,0,0,0,4885,4886,1,0,0,0,4886,4887,1,0,0,0,4887,
4889,5,1148,0,0,4888,4882,1,0,0,0,4888,4883,1,0,0,0,4889,413,1,0,0,0,4890,
4891,5,41,0,0,4891,4892,3,584,292,0,4892,4893,5,38,0,0,4893,4894,5,65,0,
0,4894,4895,3,200,100,0,4895,415,1,0,0,0,4896,4897,5,41,0,0,4897,4898,7,
65,0,0,4898,4899,5,442,0,0,4899,4900,5,65,0,0,4900,4905,3,418,209,0,4901,
4902,5,1135,0,0,4902,4904,3,418,209,0,4903,4901,1,0,0,0,4904,4907,1,0,0,
0,4905,4903,1,0,0,0,4905,4906,1,0,0,0,4906,4908,1,0,0,0,4907,4905,1,0,0,
0,4908,4909,3,388,194,0,4909,417,1,0,0,0,4910,4922,3,590,295,0,4911,4913,
5,162,0,0,4912,4914,5,669,0,0,4913,4912,1,0,0,0,4913,4914,1,0,0,0,4914,4915,
1,0,0,0,4915,4922,5,1148,0,0,4916,4922,3,584,292,0,4917,4922,5,163,0,0,4918,
4919,5,114,0,0,4919,4922,5,435,0,0,4920,4922,5,161,0,0,4921,4910,1,0,0,0,
4921,4911,1,0,0,0,4921,4916,1,0,0,0,4921,4917,1,0,0,0,4921,4918,1,0,0,0,
4921,4920,1,0,0,0,4922,419,1,0,0,0,4923,4926,3,18,9,0,4924,4926,3,4,2,0,
4925,4923,1,0,0,0,4925,4924,1,0,0,0,4926,4927,1,0,0,0,4927,4928,5,1136,0,
0,4928,421,1,0,0,0,4929,4932,5,189,0,0,4930,4933,3,602,301,0,4931,4933,3,
688,344,0,4932,4930,1,0,0,0,4932,4931,1,0,0,0,4933,4934,1,0,0,0,4934,4936,
5,174,0,0,4935,4937,3,420,210,0,4936,4935,1,0,0,0,4937,4938,1,0,0,0,4938,
4936,1,0,0,0,4938,4939,1,0,0,0,4939,423,1,0,0,0,4940,4941,5,54,0,0,4941,
4942,3,688,344,0,4942,4944,5,174,0,0,4943,4945,3,420,210,0,4944,4943,1,0,
0,0,4945,4946,1,0,0,0,4946,4944,1,0,0,0,4946,4947,1,0,0,0,4947,425,1,0,0,
0,4948,4949,5,7,0,0,4949,4950,5,665,0,0,4950,4955,3,446,223,0,4951,4952,
5,1135,0,0,4952,4954,3,446,223,0,4953,4951,1,0,0,0,4954,4957,1,0,0,0,4955,
4953,1,0,0,0,4955,4956,1,0,0,0,4956,5022,1,0,0,0,4957,4955,1,0,0,0,4958,
4959,5,7,0,0,4959,4961,5,665,0,0,4960,4962,3,640,320,0,4961,4960,1,0,0,0,
4961,4962,1,0,0,0,4962,4963,1,0,0,0,4963,4968,3,448,224,0,4964,4965,5,1135,
0,0,4965,4967,3,448,224,0,4966,4964,1,0,0,0,4967,4970,1,0,0,0,4968,4966,
1,0,0,0,4968,4969,1,0,0,0,4969,4985,1,0,0,0,4970,4968,1,0,0,0,4971,4983,
5,142,0,0,4972,4984,5,529,0,0,4973,4980,3,454,227,0,4974,4976,5,10,0,0,4975,
4974,1,0,0,0,4975,4976,1,0,0,0,4976,4977,1,0,0,0,4977,4979,3,454,227,0,4978,
4975,1,0,0,0,4979,4982,1,0,0,0,4980,4978,1,0,0,0,4980,4981,1,0,0,0,4981,
4984,1,0,0,0,4982,4980,1,0,0,0,4983,4972,1,0,0,0,4983,4973,1,0,0,0,4984,
4986,1,0,0,0,4985,4971,1,0,0,0,4985,4986,1,0,0,0,4986,4993,1,0,0,0,4987,
4989,5,192,0,0,4988,4990,3,456,228,0,4989,4988,1,0,0,0,4990,4991,1,0,0,0,
4991,4989,1,0,0,0,4991,4992,1,0,0,0,4992,4994,1,0,0,0,4993,4987,1,0,0,0,
4993,4994,1,0,0,0,4994,4999,1,0,0,0,4995,4998,3,458,229,0,4996,4998,3,460,
230,0,4997,4995,1,0,0,0,4997,4996,1,0,0,0,4998,5001,1,0,0,0,4999,4997,1,
0,0,0,4999,5000,1,0,0,0,5000,5006,1,0,0,0,5001,4999,1,0,0,0,5002,5003,5,
368,0,0,5003,5007,5,1148,0,0,5004,5005,5,14,0,0,5005,5007,5,1148,0,0,5006,
5002,1,0,0,0,5006,5004,1,0,0,0,5006,5007,1,0,0,0,5007,5022,1,0,0,0,5008,
5009,5,7,0,0,5009,5011,5,665,0,0,5010,5012,3,640,320,0,5011,5010,1,0,0,0,
5011,5012,1,0,0,0,5012,5015,1,0,0,0,5013,5016,3,564,282,0,5014,5016,3,584,
292,0,5015,5013,1,0,0,0,5015,5014,1,0,0,0,5016,5017,1,0,0,0,5017,5018,5,
42,0,0,5018,5019,5,596,0,0,5019,5020,3,434,217,0,5020,5022,1,0,0,0,5021,
4948,1,0,0,0,5021,4958,1,0,0,0,5021,5008,1,0,0,0,5022,427,1,0,0,0,5023,5024,
5,33,0,0,5024,5025,5,665,0,0,5025,5030,3,448,224,0,5026,5027,5,1135,0,0,
5027,5029,3,448,224,0,5028,5026,1,0,0,0,5029,5032,1,0,0,0,5030,5028,1,0,
0,0,5030,5031,1,0,0,0,5031,5089,1,0,0,0,5032,5030,1,0,0,0,5033,5034,5,33,
0,0,5034,5036,5,665,0,0,5035,5037,3,642,321,0,5036,5035,1,0,0,0,5036,5037,
1,0,0,0,5037,5038,1,0,0,0,5038,5043,3,448,224,0,5039,5040,5,1135,0,0,5040,
5042,3,448,224,0,5041,5039,1,0,0,0,5042,5045,1,0,0,0,5043,5041,1,0,0,0,5043,
5044,1,0,0,0,5044,5049,1,0,0,0,5045,5043,1,0,0,0,5046,5047,5,42,0,0,5047,
5048,5,596,0,0,5048,5050,3,434,217,0,5049,5046,1,0,0,0,5049,5050,1,0,0,0,
5050,5065,1,0,0,0,5051,5063,5,142,0,0,5052,5064,5,529,0,0,5053,5060,3,454,
227,0,5054,5056,5,10,0,0,5055,5054,1,0,0,0,5055,5056,1,0,0,0,5056,5057,1,
0,0,0,5057,5059,3,454,227,0,5058,5055,1,0,0,0,5059,5062,1,0,0,0,5060,5058,
1,0,0,0,5060,5061,1,0,0,0,5061,5064,1,0,0,0,5062,5060,1,0,0,0,5063,5052,
1,0,0,0,5063,5053,1,0,0,0,5064,5066,1,0,0,0,5065,5051,1,0,0,0,5065,5066,
1,0,0,0,5066,5073,1,0,0,0,5067,5069,5,192,0,0,5068,5070,3,456,228,0,5069,
5068,1,0,0,0,5070,5071,1,0,0,0,5071,5069,1,0,0,0,5071,5072,1,0,0,0,5072,
5074,1,0,0,0,5073,5067,1,0,0,0,5073,5074,1,0,0,0,5074,5079,1,0,0,0,5075,
5078,3,458,229,0,5076,5078,3,460,230,0,5077,5075,1,0,0,0,5077,5076,1,0,0,
0,5078,5081,1,0,0,0,5079,5077,1,0,0,0,5079,5080,1,0,0,0,5080,5086,1,0,0,
0,5081,5079,1,0,0,0,5082,5083,5,368,0,0,5083,5087,5,1148,0,0,5084,5085,5,
14,0,0,5085,5087,5,1148,0,0,5086,5082,1,0,0,0,5086,5084,1,0,0,0,5086,5087,
1,0,0,0,5087,5089,1,0,0,0,5088,5023,1,0,0,0,5088,5033,1,0,0,0,5089,429,1,
0,0,0,5090,5091,5,51,0,0,5091,5093,5,665,0,0,5092,5094,3,640,320,0,5093,
5092,1,0,0,0,5093,5094,1,0,0,0,5094,5095,1,0,0,0,5095,5100,3,564,282,0,5096,
5097,5,1135,0,0,5097,5099,3,564,282,0,5098,5096,1,0,0,0,5099,5102,1,0,0,
0,5100,5098,1,0,0,0,5100,5101,1,0,0,0,5101,431,1,0,0,0,5102,5100,1,0,0,0,
5103,5104,5,72,0,0,5104,5109,3,462,231,0,5105,5106,5,1135,0,0,5106,5108,
3,462,231,0,5107,5105,1,0,0,0,5108,5111,1,0,0,0,5109,5107,1,0,0,0,5109,5110,
1,0,0,0,5110,5112,1,0,0,0,5111,5109,1,0,0,0,5112,5114,5,118,0,0,5113,5115,
7,66,0,0,5114,5113,1,0,0,0,5114,5115,1,0,0,0,5115,5116,1,0,0,0,5116,5117,
3,466,233,0,5117,5118,5,175,0,0,5118,5123,3,448,224,0,5119,5120,5,1135,0,
0,5120,5122,3,448,224,0,5121,5119,1,0,0,0,5122,5125,1,0,0,0,5123,5121,1,
0,0,0,5123,5124,1,0,0,0,5124,5140,1,0,0,0,5125,5123,1,0,0,0,5126,5138,5,
142,0,0,5127,5139,5,529,0,0,5128,5135,3,454,227,0,5129,5131,5,10,0,0,5130,
5129,1,0,0,0,5130,5131,1,0,0,0,5131,5132,1,0,0,0,5132,5134,3,454,227,0,5133,
5130,1,0,0,0,5134,5137,1,0,0,0,5135,5133,1,0,0,0,5135,5136,1,0,0,0,5136,
5139,1,0,0,0,5137,5135,1,0,0,0,5138,5127,1,0,0,0,5138,5128,1,0,0,0,5139,
5141,1,0,0,0,5140,5126,1,0,0,0,5140,5141,1,0,0,0,5141,5151,1,0,0,0,5142,
5148,5,192,0,0,5143,5144,5,72,0,0,5144,5147,5,120,0,0,5145,5147,3,456,228,
0,5146,5143,1,0,0,0,5146,5145,1,0,0,0,5147,5150,1,0,0,0,5148,5146,1,0,0,
0,5148,5149,1,0,0,0,5149,5152,1,0,0,0,5150,5148,1,0,0,0,5151,5142,1,0,0,
0,5151,5152,1,0,0,0,5152,5159,1,0,0,0,5153,5154,5,12,0,0,5154,5155,3,564,
282,0,5155,5156,5,192,0,0,5156,5157,5,596,0,0,5157,5158,3,434,217,0,5158,
5160,1,0,0,0,5159,5153,1,0,0,0,5159,5160,1,0,0,0,5160,5197,1,0,0,0,5161,
5164,5,72,0,0,5162,5165,3,564,282,0,5163,5165,3,584,292,0,5164,5162,1,0,
0,0,5164,5163,1,0,0,0,5165,5173,1,0,0,0,5166,5169,5,1135,0,0,5167,5170,3,
564,282,0,5168,5170,3,584,292,0,5169,5167,1,0,0,0,5169,5168,1,0,0,0,5170,
5172,1,0,0,0,5171,5166,1,0,0,0,5172,5175,1,0,0,0,5173,5171,1,0,0,0,5173,
5174,1,0,0,0,5174,5176,1,0,0,0,5175,5173,1,0,0,0,5176,5179,5,175,0,0,5177,
5180,3,564,282,0,5178,5180,3,584,292,0,5179,5177,1,0,0,0,5179,5178,1,0,0,
0,5180,5188,1,0,0,0,5181,5184,5,1135,0,0,5182,5185,3,564,282,0,5183,5185,
3,584,292,0,5184,5182,1,0,0,0,5184,5183,1,0,0,0,5185,5187,1,0,0,0,5186,5181,
1,0,0,0,5187,5190,1,0,0,0,5188,5186,1,0,0,0,5188,5189,1,0,0,0,5189,5194,
1,0,0,0,5190,5188,1,0,0,0,5191,5192,5,192,0,0,5192,5193,5,697,0,0,5193,5195,
5,120,0,0,5194,5191,1,0,0,0,5194,5195,1,0,0,0,5195,5197,1,0,0,0,5196,5103,
1,0,0,0,5196,5161,1,0,0,0,5197,433,1,0,0,0,5198,5221,5,42,0,0,5199,5221,
5,529,0,0,5200,5210,5,6,0,0,5201,5202,5,59,0,0,5202,5207,3,564,282,0,5203,
5204,5,1135,0,0,5204,5206,3,564,282,0,5205,5203,1,0,0,0,5206,5209,1,0,0,
0,5207,5205,1,0,0,0,5207,5208,1,0,0,0,5208,5211,1,0,0,0,5209,5207,1,0,0,
0,5210,5201,1,0,0,0,5210,5211,1,0,0,0,5211,5221,1,0,0,0,5212,5217,3,564,
282,0,5213,5214,5,1135,0,0,5214,5216,3,564,282,0,5215,5213,1,0,0,0,5216,
5219,1,0,0,0,5217,5215,1,0,0,0,5217,5218,1,0,0,0,5218,5221,1,0,0,0,5219,
5217,1,0,0,0,5220,5198,1,0,0,0,5220,5199,1,0,0,0,5220,5200,1,0,0,0,5220,
5212,1,0,0,0,5221,435,1,0,0,0,5222,5223,5,72,0,0,5223,5224,5,566,0,0,5224,
5225,5,118,0,0,5225,5226,3,564,282,0,5226,5227,5,175,0,0,5227,5232,3,564,
282,0,5228,5229,5,1135,0,0,5229,5231,3,564,282,0,5230,5228,1,0,0,0,5231,
5234,1,0,0,0,5232,5230,1,0,0,0,5232,5233,1,0,0,0,5233,5238,1,0,0,0,5234,
5232,1,0,0,0,5235,5236,5,192,0,0,5236,5237,5,72,0,0,5237,5239,5,120,0,0,
5238,5235,1,0,0,0,5238,5239,1,0,0,0,5239,437,1,0,0,0,5240,5241,5,139,0,0,
5241,5242,5,665,0,0,5242,5247,3,468,234,0,5243,5244,5,1135,0,0,5244,5246,
3,468,234,0,5245,5243,1,0,0,0,5246,5249,1,0,0,0,5247,5245,1,0,0,0,5247,5248,
1,0,0,0,5248,439,1,0,0,0,5249,5247,1,0,0,0,5250,5251,5,147,0,0,5251,5256,
3,462,231,0,5252,5253,5,1135,0,0,5253,5255,3,462,231,0,5254,5252,1,0,0,0,
5255,5258,1,0,0,0,5256,5254,1,0,0,0,5256,5257,1,0,0,0,5257,5259,1,0,0,0,
5258,5256,1,0,0,0,5259,5261,5,118,0,0,5260,5262,7,66,0,0,5261,5260,1,0,0,
0,5261,5262,1,0,0,0,5262,5263,1,0,0,0,5263,5264,3,466,233,0,5264,5265,5,
68,0,0,5265,5270,3,564,282,0,5266,5267,5,1135,0,0,5267,5269,3,564,282,0,
5268,5266,1,0,0,0,5269,5272,1,0,0,0,5270,5268,1,0,0,0,5270,5271,1,0,0,0,
5271,5321,1,0,0,0,5272,5270,1,0,0,0,5273,5274,5,147,0,0,5274,5276,5,6,0,
0,5275,5277,5,725,0,0,5276,5275,1,0,0,0,5276,5277,1,0,0,0,5277,5278,1,0,
0,0,5278,5279,5,1135,0,0,5279,5280,5,72,0,0,5280,5281,5,120,0,0,5281,5282,
5,68,0,0,5282,5287,3,564,282,0,5283,5284,5,1135,0,0,5284,5286,3,564,282,
0,5285,5283,1,0,0,0,5286,5289,1,0,0,0,5287,5285,1,0,0,0,5287,5288,1,0,0,
0,5288,5321,1,0,0,0,5289,5287,1,0,0,0,5290,5293,5,147,0,0,5291,5294,3,564,
282,0,5292,5294,3,584,292,0,5293,5291,1,0,0,0,5293,5292,1,0,0,0,5294,5302,
1,0,0,0,5295,5298,5,1135,0,0,5296,5299,3,564,282,0,5297,5299,3,584,292,0,
5298,5296,1,0,0,0,5298,5297,1,0,0,0,5299,5301,1,0,0,0,5300,5295,1,0,0,0,
5301,5304,1,0,0,0,5302,5300,1,0,0,0,5302,5303,1,0,0,0,5303,5305,1,0,0,0,
5304,5302,1,0,0,0,5305,5308,5,68,0,0,5306,5309,3,564,282,0,5307,5309,3,584,
292,0,5308,5306,1,0,0,0,5308,5307,1,0,0,0,5309,5317,1,0,0,0,5310,5313,5,
1135,0,0,5311,5314,3,564,282,0,5312,5314,3,584,292,0,5313,5311,1,0,0,0,5313,
5312,1,0,0,0,5314,5316,1,0,0,0,5315,5310,1,0,0,0,5316,5319,1,0,0,0,5317,
5315,1,0,0,0,5317,5318,1,0,0,0,5318,5321,1,0,0,0,5319,5317,1,0,0,0,5320,
5250,1,0,0,0,5320,5273,1,0,0,0,5320,5290,1,0,0,0,5321,441,1,0,0,0,5322,5323,
5,147,0,0,5323,5324,5,566,0,0,5324,5325,5,118,0,0,5325,5326,3,564,282,0,
5326,5327,5,68,0,0,5327,5332,3,564,282,0,5328,5329,5,1135,0,0,5329,5331,
3,564,282,0,5330,5328,1,0,0,0,5331,5334,1,0,0,0,5332,5330,1,0,0,0,5332,5333,
1,0,0,0,5333,443,1,0,0,0,5334,5332,1,0,0,0,5335,5336,5,153,0,0,5336,5339,
5,551,0,0,5337,5338,5,65,0,0,5338,5340,3,564,282,0,5339,5337,1,0,0,0,5339,
5340,1,0,0,0,5340,5341,1,0,0,0,5341,5344,5,1124,0,0,5342,5345,3,682,341,
0,5343,5345,5,1148,0,0,5344,5342,1,0,0,0,5344,5343,1,0,0,0,5345,445,1,0,
0,0,5346,5347,3,564,282,0,5347,5348,3,458,229,0,5348,447,1,0,0,0,5349,5350,
3,564,282,0,5350,5351,5,448,0,0,5351,5352,5,19,0,0,5352,5353,5,551,0,0,5353,
5354,5,1148,0,0,5354,5375,1,0,0,0,5355,5356,3,564,282,0,5356,5357,5,448,
0,0,5357,5358,5,19,0,0,5358,5359,5,991,0,0,5359,5360,5,551,0,0,5360,5361,
3,450,225,0,5361,5375,1,0,0,0,5362,5363,3,564,282,0,5363,5364,5,448,0,0,
5364,5365,5,19,0,0,5365,5366,5,1148,0,0,5366,5367,3,450,225,0,5367,5375,
1,0,0,0,5368,5369,3,564,282,0,5369,5370,5,448,0,0,5370,5371,5,192,0,0,5371,
5372,3,452,226,0,5372,5375,1,0,0,0,5373,5375,3,564,282,0,5374,5349,1,0,0,
0,5374,5355,1,0,0,0,5374,5362,1,0,0,0,5374,5368,1,0,0,0,5374,5373,1,0,0,
0,5375,449,1,0,0,0,5376,5377,5,141,0,0,5377,5379,5,1148,0,0,5378,5376,1,
0,0,0,5378,5379,1,0,0,0,5379,5383,1,0,0,0,5380,5381,5,145,0,0,5381,5382,
5,35,0,0,5382,5384,5,551,0,0,5383,5380,1,0,0,0,5383,5384,1,0,0,0,5384,451,
1,0,0,0,5385,5393,3,582,291,0,5386,5390,7,67,0,0,5387,5391,5,1148,0,0,5388,
5389,5,991,0,0,5389,5391,5,551,0,0,5390,5387,1,0,0,0,5390,5388,1,0,0,0,5391,
5392,1,0,0,0,5392,5394,3,450,225,0,5393,5386,1,0,0,0,5393,5394,1,0,0,0,5394,
5400,1,0,0,0,5395,5396,3,582,291,0,5396,5397,5,187,0,0,5397,5398,3,682,341,
0,5398,5400,1,0,0,0,5399,5385,1,0,0,0,5399,5395,1,0,0,0,5400,453,1,0,0,0,
5401,5410,5,167,0,0,5402,5410,5,680,0,0,5403,5404,5,358,0,0,5404,5410,5,
1148,0,0,5405,5406,5,465,0,0,5406,5410,5,1148,0,0,5407,5408,5,640,0,0,5408,
5410,5,1148,0,0,5409,5401,1,0,0,0,5409,5402,1,0,0,0,5409,5403,1,0,0,0,5409,
5405,1,0,0,0,5409,5407,1,0,0,0,5410,455,1,0,0,0,5411,5412,5,499,0,0,5412,
5420,3,590,295,0,5413,5414,5,502,0,0,5414,5420,3,590,295,0,5415,5416,5,498,
0,0,5416,5420,3,590,295,0,5417,5418,5,503,0,0,5418,5420,3,590,295,0,5419,
5411,1,0,0,0,5419,5413,1,0,0,0,5419,5415,1,0,0,0,5419,5417,1,0,0,0,5420,
457,1,0,0,0,5421,5422,5,551,0,0,5422,5429,5,420,0,0,5423,5430,5,42,0,0,5424,
5430,5,519,0,0,5425,5426,5,86,0,0,5426,5427,3,590,295,0,5427,5428,5,691,
0,0,5428,5430,1,0,0,0,5429,5423,1,0,0,0,5429,5424,1,0,0,0,5429,5425,1,0,
0,0,5429,5430,1,0,0,0,5430,5460,1,0,0,0,5431,5432,5,551,0,0,5432,5435,5,
445,0,0,5433,5436,5,42,0,0,5434,5436,3,590,295,0,5435,5433,1,0,0,0,5435,
5434,1,0,0,0,5436,5460,1,0,0,0,5437,5438,5,551,0,0,5438,5439,5,595,0,0,5439,
5444,5,86,0,0,5440,5445,5,42,0,0,5441,5442,3,590,295,0,5442,5443,5,691,0,
0,5443,5445,1,0,0,0,5444,5440,1,0,0,0,5444,5441,1,0,0,0,5445,5460,1,0,0,
0,5446,5447,5,551,0,0,5447,5448,5,142,0,0,5448,5450,5,35,0,0,5449,5451,7,
68,0,0,5450,5449,1,0,0,0,5450,5451,1,0,0,0,5451,5460,1,0,0,0,5452,5453,5,
424,0,0,5453,5460,3,590,295,0,5454,5457,5,552,0,0,5455,5458,3,590,295,0,
5456,5458,5,657,0,0,5457,5455,1,0,0,0,5457,5456,1,0,0,0,5458,5460,1,0,0,
0,5459,5421,1,0,0,0,5459,5431,1,0,0,0,5459,5437,1,0,0,0,5459,5446,1,0,0,
0,5459,5452,1,0,0,0,5459,5454,1,0,0,0,5460,459,1,0,0,0,5461,5462,5,332,0,
0,5462,5463,7,69,0,0,5463,461,1,0,0,0,5464,5469,3,464,232,0,5465,5466,5,
1133,0,0,5466,5467,3,616,308,0,5467,5468,5,1134,0,0,5468,5470,1,0,0,0,5469,
5465,1,0,0,0,5469,5470,1,0,0,0,5470,463,1,0,0,0,5471,5473,5,6,0,0,5472,5474,
5,725,0,0,5473,5472,1,0,0,0,5473,5474,1,0,0,0,5474,5565,1,0,0,0,5475,5477,
5,7,0,0,5476,5478,5,733,0,0,5477,5476,1,0,0,0,5477,5478,1,0,0,0,5478,5565,
1,0,0,0,5479,5487,5,33,0,0,5480,5481,5,649,0,0,5481,5488,5,742,0,0,5482,
5488,5,733,0,0,5483,5488,5,671,0,0,5484,5488,5,665,0,0,5485,5488,5,647,0,
0,5486,5488,5,596,0,0,5487,5480,1,0,0,0,5487,5482,1,0,0,0,5487,5483,1,0,
0,0,5487,5484,1,0,0,0,5487,5485,1,0,0,0,5487,5486,1,0,0,0,5487,5488,1,0,
0,0,5488,5565,1,0,0,0,5489,5565,5,44,0,0,5490,5492,5,51,0,0,5491,5493,5,
596,0,0,5492,5491,1,0,0,0,5492,5493,1,0,0,0,5493,5565,1,0,0,0,5494,5565,
5,415,0,0,5495,5565,5,708,0,0,5496,5565,5,709,0,0,5497,5498,5,72,0,0,5498,
5565,5,120,0,0,5499,5565,5,81,0,0,5500,5565,5,85,0,0,5501,5502,5,103,0,0,
5502,5565,5,742,0,0,5503,5565,5,726,0,0,5504,5565,5,566,0,0,5505,5565,5,
136,0,0,5506,5565,5,727,0,0,5507,5508,5,588,0,0,5508,5565,7,70,0,0,5509,
5565,5,152,0,0,5510,5511,5,155,0,0,5511,5565,7,71,0,0,5512,5565,5,739,0,
0,5513,5565,5,740,0,0,5514,5565,5,177,0,0,5515,5565,5,184,0,0,5516,5565,
5,185,0,0,5517,5565,5,698,0,0,5518,5565,5,699,0,0,5519,5565,5,700,0,0,5520,
5565,5,701,0,0,5521,5565,5,702,0,0,5522,5565,5,703,0,0,5523,5565,5,704,0,
0,5524,5565,5,705,0,0,5525,5565,5,706,0,0,5526,5565,5,707,0,0,5527,5565,
5,710,0,0,5528,5565,5,711,0,0,5529,5565,5,712,0,0,5530,5565,5,713,0,0,5531,
5565,5,714,0,0,5532,5565,5,715,0,0,5533,5565,5,716,0,0,5534,5565,5,717,0,
0,5535,5565,5,718,0,0,5536,5565,5,719,0,0,5537,5565,5,722,0,0,5538,5565,
5,723,0,0,5539,5565,5,724,0,0,5540,5565,5,728,0,0,5541,5565,5,729,0,0,5542,
5565,5,730,0,0,5543,5565,5,731,0,0,5544,5565,5,732,0,0,5545,5565,5,735,0,
0,5546,5565,5,736,0,0,5547,5565,5,737,0,0,5548,5565,5,158,0,0,5549,5565,
5,738,0,0,5550,5565,5,1077,0,0,5551,5565,5,741,0,0,5552,5565,5,743,0,0,5553,
5565,5,1088,0,0,5554,5565,5,744,0,0,5555,5565,5,745,0,0,5556,5557,5,102,
0,0,5557,5558,5,68,0,0,5558,5565,5,734,0,0,5559,5560,5,152,0,0,5560,5561,
5,87,0,0,5561,5565,5,734,0,0,5562,5563,5,720,0,0,5563,5565,5,721,0,0,5564,
5471,1,0,0,0,5564,5475,1,0,0,0,5564,5479,1,0,0,0,5564,5489,1,0,0,0,5564,
5490,1,0,0,0,5564,5494,1,0,0,0,5564,5495,1,0,0,0,5564,5496,1,0,0,0,5564,
5497,1,0,0,0,5564,5499,1,0,0,0,5564,5500,1,0,0,0,5564,5501,1,0,0,0,5564,
5503,1,0,0,0,5564,5504,1,0,0,0,5564,5505,1,0,0,0,5564,5506,1,0,0,0,5564,
5507,1,0,0,0,5564,5509,1,0,0,0,5564,5510,1,0,0,0,5564,5512,1,0,0,0,5564,
5513,1,0,0,0,5564,5514,1,0,0,0,5564,5515,1,0,0,0,5564,5516,1,0,0,0,5564,
5517,1,0,0,0,5564,5518,1,0,0,0,5564,5519,1,0,0,0,5564,5520,1,0,0,0,5564,
5521,1,0,0,0,5564,5522,1,0,0,0,5564,5523,1,0,0,0,5564,5524,1,0,0,0,5564,
5525,1,0,0,0,5564,5526,1,0,0,0,5564,5527,1,0,0,0,5564,5528,1,0,0,0,5564,
5529,1,0,0,0,5564,5530,1,0,0,0,5564,5531,1,0,0,0,5564,5532,1,0,0,0,5564,
5533,1,0,0,0,5564,5534,1,0,0,0,5564,5535,1,0,0,0,5564,5536,1,0,0,0,5564,
5537,1,0,0,0,5564,5538,1,0,0,0,5564,5539,1,0,0,0,5564,5540,1,0,0,0,5564,
5541,1,0,0,0,5564,5542,1,0,0,0,5564,5543,1,0,0,0,5564,5544,1,0,0,0,5564,
5545,1,0,0,0,5564,5546,1,0,0,0,5564,5547,1,0,0,0,5564,5548,1,0,0,0,5564,
5549,1,0,0,0,5564,5550,1,0,0,0,5564,5551,1,0,0,0,5564,5552,1,0,0,0,5564,
5553,1,0,0,0,5564,5554,1,0,0,0,5564,5555,1,0,0,0,5564,5556,1,0,0,0,5564,
5559,1,0,0,0,5564,5562,1,0,0,0,5565,465,1,0,0,0,5566,5583,5,1117,0,0,5567,
5568,5,1117,0,0,5568,5569,5,1132,0,0,5569,5583,5,1117,0,0,5570,5571,3,584,
292,0,5571,5572,5,1132,0,0,5572,5573,5,1117,0,0,5573,5583,1,0,0,0,5574,5575,
3,584,292,0,5575,5576,5,1132,0,0,5576,5577,3,584,292,0,5577,5583,1,0,0,0,
5578,5579,3,584,292,0,5579,5580,3,588,294,0,5580,5583,1,0,0,0,5581,5583,
3,584,292,0,5582,5566,1,0,0,0,5582,5567,1,0,0,0,5582,5570,1,0,0,0,5582,5574,
1,0,0,0,5582,5578,1,0,0,0,5582,5581,1,0,0,0,5583,467,1,0,0,0,5584,5585,3,
564,282,0,5585,5586,5,175,0,0,5586,5587,3,564,282,0,5587,469,1,0,0,0,5588,
5590,5,9,0,0,5589,5591,7,72,0,0,5590,5589,1,0,0,0,5590,5591,1,0,0,0,5591,
5592,1,0,0,0,5592,5593,7,54,0,0,5593,5611,3,620,310,0,5594,5595,5,184,0,
0,5595,5596,5,76,0,0,5596,5597,5,118,0,0,5597,5602,3,556,278,0,5598,5599,
5,1135,0,0,5599,5601,3,556,278,0,5600,5598,1,0,0,0,5601,5604,1,0,0,0,5602,
5600,1,0,0,0,5602,5603,1,0,0,0,5603,5609,1,0,0,0,5604,5602,1,0,0,0,5605,
5606,5,192,0,0,5606,5607,3,590,295,0,5607,5608,5,18,0,0,5608,5610,1,0,0,
0,5609,5605,1,0,0,0,5609,5610,1,0,0,0,5610,5612,1,0,0,0,5611,5594,1,0,0,
0,5611,5612,1,0,0,0,5612,5624,1,0,0,0,5613,5614,5,51,0,0,5614,5615,5,76,
0,0,5615,5616,5,118,0,0,5616,5621,3,556,278,0,5617,5618,5,1135,0,0,5618,
5620,3,556,278,0,5619,5617,1,0,0,0,5620,5623,1,0,0,0,5621,5619,1,0,0,0,5621,
5622,1,0,0,0,5622,5625,1,0,0,0,5623,5621,1,0,0,0,5624,5613,1,0,0,0,5624,
5625,1,0,0,0,5625,471,1,0,0,0,5626,5627,5,26,0,0,5627,5628,5,172,0,0,5628,
5632,3,620,310,0,5629,5631,3,480,240,0,5630,5629,1,0,0,0,5631,5634,1,0,0,
0,5632,5630,1,0,0,0,5632,5633,1,0,0,0,5633,473,1,0,0,0,5634,5632,1,0,0,0,
5635,5636,5,356,0,0,5636,5637,5,172,0,0,5637,5639,3,620,310,0,5638,5640,
7,73,0,0,5639,5638,1,0,0,0,5639,5640,1,0,0,0,5640,475,1,0,0,0,5641,5643,
5,119,0,0,5642,5644,7,72,0,0,5643,5642,1,0,0,0,5643,5644,1,0,0,0,5644,5645,
1,0,0,0,5645,5646,7,54,0,0,5646,5647,3,620,310,0,5647,477,1,0,0,0,5648,5650,
5,580,0,0,5649,5651,7,72,0,0,5650,5649,1,0,0,0,5650,5651,1,0,0,0,5651,5652,
1,0,0,0,5652,5653,5,172,0,0,5653,5655,3,620,310,0,5654,5656,5,568,0,0,5655,
5654,1,0,0,0,5655,5656,1,0,0,0,5656,5658,1,0,0,0,5657,5659,5,422,0,0,5658,
5657,1,0,0,0,5658,5659,1,0,0,0,5659,5661,1,0,0,0,5660,5662,5,666,0,0,5661,
5660,1,0,0,0,5661,5662,1,0,0,0,5662,479,1,0,0,0,5663,5664,5,65,0,0,5664,
5671,5,664,0,0,5665,5671,5,568,0,0,5666,5671,5,425,0,0,5667,5671,5,504,0,
0,5668,5671,5,422,0,0,5669,5671,5,354,0,0,5670,5663,1,0,0,0,5670,5665,1,
0,0,0,5670,5666,1,0,0,0,5670,5667,1,0,0,0,5670,5668,1,0,0,0,5670,5669,1,
0,0,0,5671,481,1,0,0,0,5672,5674,5,33,0,0,5673,5675,5,335,0,0,5674,5673,
1,0,0,0,5674,5675,1,0,0,0,5675,5676,1,0,0,0,5676,5678,5,437,0,0,5677,5679,
3,642,321,0,5678,5677,1,0,0,0,5678,5679,1,0,0,0,5679,5680,1,0,0,0,5680,5681,
3,584,292,0,5681,5682,5,594,0,0,5682,5683,7,74,0,0,5683,5684,5,619,0,0,5684,
5685,5,1148,0,0,5685,483,1,0,0,0,5686,5687,5,456,0,0,5687,5688,5,554,0,0,
5688,5689,3,584,292,0,5689,5690,5,619,0,0,5690,5691,5,1148,0,0,5691,485,
1,0,0,0,5692,5693,5,661,0,0,5693,5694,5,554,0,0,5694,5695,3,584,292,0,5695,
487,1,0,0,0,5696,5697,5,153,0,0,5697,5698,3,492,246,0,5698,5701,7,75,0,0,
5699,5702,3,688,344,0,5700,5702,5,118,0,0,5701,5699,1,0,0,0,5701,5700,1,
0,0,0,5702,5712,1,0,0,0,5703,5704,5,1135,0,0,5704,5705,3,492,246,0,5705,
5708,7,75,0,0,5706,5709,3,688,344,0,5707,5709,5,118,0,0,5708,5706,1,0,0,
0,5708,5707,1,0,0,0,5709,5711,1,0,0,0,5710,5703,1,0,0,0,5711,5714,1,0,0,
0,5712,5710,1,0,0,0,5712,5713,1,0,0,0,5713,5749,1,0,0,0,5714,5712,1,0,0,
0,5715,5716,5,153,0,0,5716,5719,3,60,30,0,5717,5720,3,568,284,0,5718,5720,
5,42,0,0,5719,5717,1,0,0,0,5719,5718,1,0,0,0,5720,5749,1,0,0,0,5721,5722,
5,153,0,0,5722,5729,5,517,0,0,5723,5726,3,568,284,0,5724,5725,5,27,0,0,5725,
5727,3,570,285,0,5726,5724,1,0,0,0,5726,5727,1,0,0,0,5727,5730,1,0,0,0,5728,
5730,5,42,0,0,5729,5723,1,0,0,0,5729,5728,1,0,0,0,5730,5749,1,0,0,0,5731,
5749,3,444,222,0,5732,5749,3,318,159,0,5733,5749,3,316,158,0,5734,5735,5,
153,0,0,5735,5736,3,550,275,0,5736,5737,7,75,0,0,5737,5745,3,688,344,0,5738,
5739,5,1135,0,0,5739,5740,3,550,275,0,5740,5741,7,75,0,0,5741,5742,3,688,
344,0,5742,5744,1,0,0,0,5743,5738,1,0,0,0,5744,5747,1,0,0,0,5745,5743,1,
0,0,0,5745,5746,1,0,0,0,5746,5749,1,0,0,0,5747,5745,1,0,0,0,5748,5696,1,
0,0,0,5748,5715,1,0,0,0,5748,5721,1,0,0,0,5748,5731,1,0,0,0,5748,5732,1,
0,0,0,5748,5733,1,0,0,0,5748,5734,1,0,0,0,5749,489,1,0,0,0,5750,5751,5,155,
0,0,5751,5752,7,56,0,0,5752,5904,5,476,0,0,5753,5754,5,155,0,0,5754,5755,
7,76,0,0,5755,5758,5,416,0,0,5756,5757,5,80,0,0,5757,5759,5,1148,0,0,5758,
5756,1,0,0,0,5758,5759,1,0,0,0,5759,5762,1,0,0,0,5760,5761,5,68,0,0,5761,
5763,3,590,295,0,5762,5760,1,0,0,0,5762,5763,1,0,0,0,5763,5771,1,0,0,0,5764,
5768,5,99,0,0,5765,5766,3,590,295,0,5766,5767,5,1135,0,0,5767,5769,1,0,0,
0,5768,5765,1,0,0,0,5768,5769,1,0,0,0,5769,5770,1,0,0,0,5770,5772,3,590,
295,0,5771,5764,1,0,0,0,5771,5772,1,0,0,0,5772,5904,1,0,0,0,5773,5774,5,
155,0,0,5774,5776,3,494,247,0,5775,5777,3,496,248,0,5776,5775,1,0,0,0,5776,
5777,1,0,0,0,5777,5904,1,0,0,0,5778,5780,5,155,0,0,5779,5781,5,436,0,0,5780,
5779,1,0,0,0,5780,5781,1,0,0,0,5781,5782,1,0,0,0,5782,5783,7,41,0,0,5783,
5784,7,77,0,0,5784,5787,3,552,276,0,5785,5786,7,77,0,0,5786,5788,3,584,292,
0,5787,5785,1,0,0,0,5787,5788,1,0,0,0,5788,5790,1,0,0,0,5789,5791,3,496,
248,0,5790,5789,1,0,0,0,5790,5791,1,0,0,0,5791,5904,1,0,0,0,5792,5793,5,
155,0,0,5793,5794,5,33,0,0,5794,5796,7,0,0,0,5795,5797,3,642,321,0,5796,
5795,1,0,0,0,5796,5797,1,0,0,0,5797,5798,1,0,0,0,5798,5904,3,584,292,0,5799,
5800,5,155,0,0,5800,5801,5,33,0,0,5801,5802,7,78,0,0,5802,5904,3,550,275,
0,5803,5804,5,155,0,0,5804,5805,5,33,0,0,5805,5806,5,665,0,0,5806,5904,3,
564,282,0,5807,5808,5,155,0,0,5808,5809,5,409,0,0,5809,5810,3,572,286,0,
5810,5811,7,79,0,0,5811,5904,1,0,0,0,5812,5813,5,155,0,0,5813,5904,3,498,
249,0,5814,5815,5,155,0,0,5815,5823,7,80,0,0,5816,5820,5,99,0,0,5817,5818,
3,590,295,0,5818,5819,5,1135,0,0,5819,5821,1,0,0,0,5820,5817,1,0,0,0,5820,
5821,1,0,0,0,5821,5822,1,0,0,0,5822,5824,3,590,295,0,5823,5816,1,0,0,0,5823,
5824,1,0,0,0,5824,5904,1,0,0,0,5825,5826,5,155,0,0,5826,5827,5,290,0,0,5827,
5828,5,1133,0,0,5828,5829,5,1117,0,0,5829,5830,5,1134,0,0,5830,5904,7,80,
0,0,5831,5832,5,155,0,0,5832,5835,3,500,250,0,5833,5834,7,77,0,0,5834,5836,
3,584,292,0,5835,5833,1,0,0,0,5835,5836,1,0,0,0,5836,5838,1,0,0,0,5837,5839,
3,496,248,0,5838,5837,1,0,0,0,5838,5839,1,0,0,0,5839,5904,1,0,0,0,5840,5841,
5,155,0,0,5841,5842,7,81,0,0,5842,5843,5,364,0,0,5843,5904,3,550,275,0,5844,
5845,5,155,0,0,5845,5848,5,440,0,0,5846,5847,5,65,0,0,5847,5849,3,564,282,
0,5848,5846,1,0,0,0,5848,5849,1,0,0,0,5849,5904,1,0,0,0,5850,5851,5,155,
0,0,5851,5852,7,82,0,0,5852,5853,7,77,0,0,5853,5856,3,552,276,0,5854,5855,
7,77,0,0,5855,5857,3,584,292,0,5856,5854,1,0,0,0,5856,5857,1,0,0,0,5857,
5860,1,0,0,0,5858,5859,5,190,0,0,5859,5861,3,688,344,0,5860,5858,1,0,0,0,
5860,5861,1,0,0,0,5861,5904,1,0,0,0,5862,5863,5,155,0,0,5863,5864,5,539,
0,0,5864,5867,5,742,0,0,5865,5866,7,77,0,0,5866,5868,3,584,292,0,5867,5865,
1,0,0,0,5867,5868,1,0,0,0,5868,5870,1,0,0,0,5869,5871,3,496,248,0,5870,5869,
1,0,0,0,5870,5871,1,0,0,0,5871,5904,1,0,0,0,5872,5873,5,155,0,0,5873,5874,
5,564,0,0,5874,5879,3,502,251,0,5875,5876,5,1135,0,0,5876,5878,3,502,251,
0,5877,5875,1,0,0,0,5878,5881,1,0,0,0,5879,5877,1,0,0,0,5879,5880,1,0,0,
0,5880,5885,1,0,0,0,5881,5879,1,0,0,0,5882,5883,5,65,0,0,5883,5884,5,567,
0,0,5884,5886,3,590,295,0,5885,5882,1,0,0,0,5885,5886,1,0,0,0,5886,5887,
1,0,0,0,5887,5891,5,99,0,0,5888,5889,3,590,295,0,5889,5890,5,1135,0,0,5890,
5892,1,0,0,0,5891,5888,1,0,0,0,5891,5892,1,0,0,0,5892,5893,1,0,0,0,5893,
5894,3,590,295,0,5894,5904,1,0,0,0,5895,5896,5,155,0,0,5896,5897,5,614,0,
0,5897,5901,5,634,0,0,5898,5899,5,65,0,0,5899,5900,5,355,0,0,5900,5902,5,
1148,0,0,5901,5898,1,0,0,0,5901,5902,1,0,0,0,5902,5904,1,0,0,0,5903,5750,
1,0,0,0,5903,5753,1,0,0,0,5903,5773,1,0,0,0,5903,5778,1,0,0,0,5903,5792,
1,0,0,0,5903,5799,1,0,0,0,5903,5803,1,0,0,0,5903,5807,1,0,0,0,5903,5812,
1,0,0,0,5903,5814,1,0,0,0,5903,5825,1,0,0,0,5903,5831,1,0,0,0,5903,5840,
1,0,0,0,5903,5844,1,0,0,0,5903,5850,1,0,0,0,5903,5862,1,0,0,0,5903,5872,
1,0,0,0,5903,5895,1,0,0,0,5904,491,1,0,0,0,5905,5916,5,1159,0,0,5906,5916,
5,1160,0,0,5907,5908,5,1137,0,0,5908,5910,5,1137,0,0,5909,5907,1,0,0,0,5909,
5910,1,0,0,0,5910,5911,1,0,0,0,5911,5913,7,83,0,0,5912,5909,1,0,0,0,5912,
5913,1,0,0,0,5913,5914,1,0,0,0,5914,5916,3,584,292,0,5915,5905,1,0,0,0,5915,
5906,1,0,0,0,5915,5912,1,0,0,0,5916,493,1,0,0,0,5917,5918,5,25,0,0,5918,
5931,5,153,0,0,5919,5931,5,844,0,0,5920,5931,5,40,0,0,5921,5931,5,151,0,
0,5922,5923,5,437,0,0,5923,5931,5,634,0,0,5924,5925,5,131,0,0,5925,5931,
5,634,0,0,5926,5928,7,55,0,0,5927,5926,1,0,0,0,5927,5928,1,0,0,0,5928,5929,
1,0,0,0,5929,5931,7,84,0,0,5930,5917,1,0,0,0,5930,5919,1,0,0,0,5930,5920,
1,0,0,0,5930,5921,1,0,0,0,5930,5922,1,0,0,0,5930,5924,1,0,0,0,5930,5927,
1,0,0,0,5931,495,1,0,0,0,5932,5933,5,98,0,0,5933,5937,5,1148,0,0,5934,5935,
5,190,0,0,5935,5937,3,688,344,0,5936,5932,1,0,0,0,5936,5934,1,0,0,0,5937,
497,1,0,0,0,5938,5940,5,636,0,0,5939,5938,1,0,0,0,5939,5940,1,0,0,0,5940,
5941,1,0,0,0,5941,5956,5,410,0,0,5942,5943,5,477,0,0,5943,5956,5,634,0,0,
5944,5956,5,556,0,0,5945,5956,5,725,0,0,5946,5948,5,436,0,0,5947,5946,1,
0,0,0,5947,5948,1,0,0,0,5948,5949,1,0,0,0,5949,5956,5,563,0,0,5950,5956,
5,565,0,0,5951,5952,5,614,0,0,5952,5956,5,447,0,0,5953,5956,5,339,0,0,5954,
5956,5,383,0,0,5955,5939,1,0,0,0,5955,5942,1,0,0,0,5955,5944,1,0,0,0,5955,
5945,1,0,0,0,5955,5947,1,0,0,0,5955,5950,1,0,0,0,5955,5951,1,0,0,0,5955,
5953,1,0,0,0,5955,5954,1,0,0,0,5956,499,1,0,0,0,5957,5966,5,416,0,0,5958,
5959,5,172,0,0,5959,5966,5,634,0,0,5960,5962,5,436,0,0,5961,5960,1,0,0,0,
5961,5962,1,0,0,0,5962,5963,1,0,0,0,5963,5966,5,742,0,0,5964,5966,5,655,
0,0,5965,5957,1,0,0,0,5965,5958,1,0,0,0,5965,5961,1,0,0,0,5965,5964,1,0,
0,0,5966,501,1,0,0,0,5967,5980,5,6,0,0,5968,5969,5,347,0,0,5969,5980,5,461,
0,0,5970,5971,5,382,0,0,5971,5980,5,645,0,0,5972,5980,5,385,0,0,5973,5980,
5,463,0,0,5974,5980,5,792,0,0,5975,5976,5,544,0,0,5976,5980,5,426,0,0,5977,
5980,5,621,0,0,5978,5980,5,644,0,0,5979,5967,1,0,0,0,5979,5968,1,0,0,0,5979,
5970,1,0,0,0,5979,5972,1,0,0,0,5979,5973,1,0,0,0,5979,5974,1,0,0,0,5979,
5975,1,0,0,0,5979,5977,1,0,0,0,5979,5978,1,0,0,0,5980,503,1,0,0,0,5981,5982,
5,345,0,0,5982,5983,5,1148,0,0,5983,505,1,0,0,0,5984,5985,5,351,0,0,5985,
5986,5,81,0,0,5986,5991,3,518,259,0,5987,5988,5,1135,0,0,5988,5990,3,518,
259,0,5989,5987,1,0,0,0,5990,5993,1,0,0,0,5991,5989,1,0,0,0,5991,5992,1,
0,0,0,5992,6001,1,0,0,0,5993,5991,1,0,0,0,5994,5995,5,129,0,0,5995,5998,
5,1133,0,0,5996,5999,3,616,308,0,5997,5999,5,6,0,0,5998,5996,1,0,0,0,5998,
5997,1,0,0,0,5999,6000,1,0,0,0,6000,6002,5,1134,0,0,6001,5994,1,0,0,0,6001,
6002,1,0,0,0,6002,6003,1,0,0,0,6003,6004,5,80,0,0,6004,6005,3,584,292,0,
6005,507,1,0,0,0,6006,6008,5,432,0,0,6007,6009,7,72,0,0,6008,6007,1,0,0,
0,6008,6009,1,0,0,0,6009,6010,1,0,0,0,6010,6015,3,520,260,0,6011,6012,5,
1135,0,0,6012,6014,3,520,260,0,6013,6011,1,0,0,0,6014,6017,1,0,0,0,6015,
6013,1,0,0,0,6015,6016,1,0,0,0,6016,509,1,0,0,0,6017,6015,1,0,0,0,6018,6020,
5,93,0,0,6019,6021,7,85,0,0,6020,6019,1,0,0,0,6020,6021,1,0,0,0,6021,6022,
1,0,0,0,6022,6023,3,688,344,0,6023,511,1,0,0,0,6024,6025,5,102,0,0,6025,
6026,5,81,0,0,6026,6027,5,87,0,0,6027,6028,5,351,0,0,6028,6033,3,524,262,
0,6029,6030,5,1135,0,0,6030,6032,3,524,262,0,6031,6029,1,0,0,0,6032,6035,
1,0,0,0,6033,6031,1,0,0,0,6033,6034,1,0,0,0,6034,513,1,0,0,0,6035,6033,1,
0,0,0,6036,6037,5,589,0,0,6037,6038,5,567,0,0,6038,6039,5,351,0,0,6039,515,
1,0,0,0,6040,6041,5,739,0,0,6041,517,1,0,0,0,6042,6050,3,552,276,0,6043,
6045,7,20,0,0,6044,6043,1,0,0,0,6044,6045,1,0,0,0,6045,6046,1,0,0,0,6046,
6047,5,1133,0,0,6047,6048,3,616,308,0,6048,6049,5,1134,0,0,6049,6051,1,0,
0,0,6050,6044,1,0,0,0,6050,6051,1,0,0,0,6051,519,1,0,0,0,6052,6071,5,394,
0,0,6053,6071,5,447,0,0,6054,6056,7,86,0,0,6055,6054,1,0,0,0,6055,6056,1,
0,0,0,6056,6057,1,0,0,0,6057,6071,5,476,0,0,6058,6071,5,540,0,0,6059,6071,
5,725,0,0,6060,6061,5,567,0,0,6061,6071,5,351,0,0,6062,6071,5,634,0,0,6063,
6071,5,667,0,0,6064,6068,5,742,0,0,6065,6066,5,192,0,0,6066,6067,5,134,0,
0,6067,6069,5,103,0,0,6068,6065,1,0,0,0,6068,6069,1,0,0,0,6069,6071,1,0,
0,0,6070,6052,1,0,0,0,6070,6053,1,0,0,0,6070,6055,1,0,0,0,6070,6058,1,0,
0,0,6070,6059,1,0,0,0,6070,6060,1,0,0,0,6070,6062,1,0,0,0,6070,6063,1,0,
0,0,6070,6064,1,0,0,0,6071,6085,1,0,0,0,6072,6073,5,574,0,0,6073,6075,5,
476,0,0,6074,6076,3,356,178,0,6075,6074,1,0,0,0,6075,6076,1,0,0,0,6076,6085,
1,0,0,0,6077,6079,7,54,0,0,6078,6080,3,620,310,0,6079,6078,1,0,0,0,6079,
6080,1,0,0,0,6080,6082,1,0,0,0,6081,6083,3,522,261,0,6082,6081,1,0,0,0,6082,
6083,1,0,0,0,6083,6085,1,0,0,0,6084,6070,1,0,0,0,6084,6072,1,0,0,0,6084,
6077,1,0,0,0,6085,521,1,0,0,0,6086,6087,5,192,0,0,6087,6088,5,134,0,0,6088,
6092,5,103,0,0,6089,6090,5,65,0,0,6090,6092,5,421,0,0,6091,6086,1,0,0,0,
6091,6089,1,0,0,0,6092,523,1,0,0,0,6093,6101,3,552,276,0,6094,6095,5,129,
0,0,6095,6098,5,1133,0,0,6096,6099,3,616,308,0,6097,6099,5,6,0,0,6098,6096,
1,0,0,0,6098,6097,1,0,0,0,6099,6100,1,0,0,0,6100,6102,5,1134,0,0,6101,6094,
1,0,0,0,6101,6102,1,0,0,0,6102,6110,1,0,0,0,6103,6105,7,20,0,0,6104,6103,
1,0,0,0,6104,6105,1,0,0,0,6105,6106,1,0,0,0,6106,6107,5,1133,0,0,6107,6108,
3,616,308,0,6108,6109,5,1134,0,0,6109,6111,1,0,0,0,6110,6104,1,0,0,0,6110,
6111,1,0,0,0,6111,6114,1,0,0,0,6112,6113,5,78,0,0,6113,6115,5,470,0,0,6114,
6112,1,0,0,0,6114,6115,1,0,0,0,6115,525,1,0,0,0,6116,6117,7,87,0,0,6117,
6120,3,552,276,0,6118,6121,3,584,292,0,6119,6121,5,1148,0,0,6120,6118,1,
0,0,0,6120,6119,1,0,0,0,6120,6121,1,0,0,0,6121,527,1,0,0,0,6122,6126,7,87,
0,0,6123,6124,7,88,0,0,6124,6125,5,1124,0,0,6125,6127,7,89,0,0,6126,6123,
1,0,0,0,6126,6127,1,0,0,0,6127,6128,1,0,0,0,6128,6129,3,548,274,0,6129,529,
1,0,0,0,6130,6131,5,444,0,0,6131,6132,5,1148,0,0,6132,531,1,0,0,0,6133,6134,
5,186,0,0,6134,6135,3,584,292,0,6135,533,1,0,0,0,6136,6144,5,156,0,0,6137,
6139,5,162,0,0,6138,6140,5,669,0,0,6139,6138,1,0,0,0,6139,6140,1,0,0,0,6140,
6141,1,0,0,0,6141,6145,3,594,297,0,6142,6145,5,1156,0,0,6143,6145,5,1157,
0,0,6144,6137,1,0,0,0,6144,6142,1,0,0,0,6144,6143,1,0,0,0,6145,6155,1,0,
0,0,6146,6147,5,153,0,0,6147,6152,3,538,269,0,6148,6149,5,1135,0,0,6149,
6151,3,538,269,0,6150,6148,1,0,0,0,6151,6154,1,0,0,0,6152,6150,1,0,0,0,6152,
6153,1,0,0,0,6153,6156,1,0,0,0,6154,6152,1,0,0,0,6155,6146,1,0,0,0,6155,
6156,1,0,0,0,6156,535,1,0,0,0,6157,6165,5,143,0,0,6158,6160,5,162,0,0,6159,
6161,5,669,0,0,6160,6159,1,0,0,0,6160,6161,1,0,0,0,6161,6162,1,0,0,0,6162,
6166,3,594,297,0,6163,6166,5,1156,0,0,6164,6166,5,1157,0,0,6165,6158,1,0,
0,0,6165,6163,1,0,0,0,6165,6164,1,0,0,0,6165,6166,1,0,0,0,6166,6176,1,0,
0,0,6167,6168,5,153,0,0,6168,6173,3,538,269,0,6169,6170,5,1135,0,0,6170,
6172,3,538,269,0,6171,6169,1,0,0,0,6172,6175,1,0,0,0,6173,6171,1,0,0,0,6173,
6174,1,0,0,0,6174,6177,1,0,0,0,6175,6173,1,0,0,0,6176,6167,1,0,0,0,6176,
6177,1,0,0,0,6177,537,1,0,0,0,6178,6179,7,90,0,0,6179,6184,5,1124,0,0,6180,
6185,3,594,297,0,6181,6185,5,1149,0,0,6182,6185,3,566,283,0,6183,6185,3,
586,293,0,6184,6180,1,0,0,0,6184,6181,1,0,0,0,6184,6182,1,0,0,0,6184,6183,
1,0,0,0,6185,539,1,0,0,0,6186,6188,5,192,0,0,6187,6189,5,571,0,0,6188,6187,
1,0,0,0,6188,6189,1,0,0,0,6189,6190,1,0,0,0,6190,6195,3,50,25,0,6191,6192,
5,1135,0,0,6192,6194,3,50,25,0,6193,6191,1,0,0,0,6194,6197,1,0,0,0,6195,
6193,1,0,0,0,6195,6196,1,0,0,0,6196,541,1,0,0,0,6197,6195,1,0,0,0,6198,6199,
5,172,0,0,6199,6201,3,552,276,0,6200,6202,3,230,115,0,6201,6200,1,0,0,0,
6201,6202,1,0,0,0,6202,6204,1,0,0,0,6203,6205,3,294,147,0,6204,6203,1,0,
0,0,6204,6205,1,0,0,0,6205,543,1,0,0,0,6206,6208,5,71,0,0,6207,6209,7,91,
0,0,6208,6207,1,0,0,0,6208,6209,1,0,0,0,6209,6210,1,0,0,0,6210,6242,5,48,
0,0,6211,6212,3,492,246,0,6212,6213,5,1124,0,0,6213,6221,7,92,0,0,6214,6215,
5,1135,0,0,6215,6216,3,492,246,0,6216,6217,5,1124,0,0,6217,6218,7,92,0,0,
6218,6220,1,0,0,0,6219,6214,1,0,0,0,6220,6223,1,0,0,0,6221,6219,1,0,0,0,
6221,6222,1,0,0,0,6222,6243,1,0,0,0,6223,6221,1,0,0,0,6224,6227,5,29,0,0,
6225,6228,3,590,295,0,6226,6228,3,492,246,0,6227,6225,1,0,0,0,6227,6226,
1,0,0,0,6228,6229,1,0,0,0,6229,6230,3,492,246,0,6230,6231,5,1124,0,0,6231,
6239,3,546,273,0,6232,6233,5,1135,0,0,6233,6234,3,492,246,0,6234,6235,5,
1124,0,0,6235,6236,3,546,273,0,6236,6238,1,0,0,0,6237,6232,1,0,0,0,6238,
6241,1,0,0,0,6239,6237,1,0,0,0,6239,6240,1,0,0,0,6240,6243,1,0,0,0,6241,
6239,1,0,0,0,6242,6211,1,0,0,0,6242,6224,1,0,0,0,6243,545,1,0,0,0,6244,6245,
7,93,0,0,6245,547,1,0,0,0,6246,6252,3,200,100,0,6247,6252,3,186,93,0,6248,
6252,3,192,96,0,6249,6252,3,198,99,0,6250,6252,3,202,101,0,6251,6246,1,0,
0,0,6251,6247,1,0,0,0,6251,6248,1,0,0,0,6251,6249,1,0,0,0,6251,6250,1,0,
0,0,6252,6257,1,0,0,0,6253,6254,5,65,0,0,6254,6255,5,376,0,0,6255,6257,3,
584,292,0,6256,6251,1,0,0,0,6256,6253,1,0,0,0,6257,549,1,0,0,0,6258,6262,
3,584,292,0,6259,6263,5,1155,0,0,6260,6261,5,1132,0,0,6261,6263,3,584,292,
0,6262,6259,1,0,0,0,6262,6260,1,0,0,0,6262,6263,1,0,0,0,6263,551,1,0,0,0,
6264,6265,3,550,275,0,6265,553,1,0,0,0,6266,6269,3,564,282,0,6267,6269,3,
584,292,0,6268,6266,1,0,0,0,6268,6267,1,0,0,0,6269,555,1,0,0,0,6270,6275,
3,584,292,0,6271,6273,3,588,294,0,6272,6274,3,588,294,0,6273,6272,1,0,0,
0,6273,6274,1,0,0,0,6274,6276,1,0,0,0,6275,6271,1,0,0,0,6275,6276,1,0,0,
0,6276,6285,1,0,0,0,6277,6279,9,0,0,0,6278,6277,1,0,0,0,6278,6279,1,0,0,
0,6279,6280,1,0,0,0,6280,6282,3,588,294,0,6281,6283,3,588,294,0,6282,6281,
1,0,0,0,6282,6283,1,0,0,0,6283,6285,1,0,0,0,6284,6270,1,0,0,0,6284,6278,
1,0,0,0,6285,557,1,0,0,0,6286,6289,3,584,292,0,6287,6289,5,1148,0,0,6288,
6286,1,0,0,0,6288,6287,1,0,0,0,6289,6294,1,0,0,0,6290,6291,5,1133,0,0,6291,
6292,3,590,295,0,6292,6293,5,1134,0,0,6293,6295,1,0,0,0,6294,6290,1,0,0,
0,6294,6295,1,0,0,0,6295,6298,1,0,0,0,6296,6298,3,688,344,0,6297,6288,1,
0,0,0,6297,6296,1,0,0,0,6298,6300,1,0,0,0,6299,6301,7,48,0,0,6300,6299,1,
0,0,0,6300,6301,1,0,0,0,6301,559,1,0,0,0,6302,6307,5,1148,0,0,6303,6307,
5,1156,0,0,6304,6307,5,697,0,0,6305,6307,3,718,359,0,6306,6302,1,0,0,0,6306,
6303,1,0,0,0,6306,6304,1,0,0,0,6306,6305,1,0,0,0,6307,561,1,0,0,0,6308,6309,
7,94,0,0,6309,563,1,0,0,0,6310,6316,3,560,280,0,6311,6312,3,560,280,0,6312,
6313,3,562,281,0,6313,6316,1,0,0,0,6314,6316,3,62,31,0,6315,6310,1,0,0,0,
6315,6311,1,0,0,0,6315,6314,1,0,0,0,6316,565,1,0,0,0,6317,6318,7,95,0,0,
6318,567,1,0,0,0,6319,6324,5,226,0,0,6320,6324,3,708,354,0,6321,6324,5,1148,
0,0,6322,6324,5,1145,0,0,6323,6319,1,0,0,0,6323,6320,1,0,0,0,6323,6321,1,
0,0,0,6323,6322,1,0,0,0,6324,569,1,0,0,0,6325,6328,3,584,292,0,6326,6328,
5,1148,0,0,6327,6325,1,0,0,0,6327,6326,1,0,0,0,6328,571,1,0,0,0,6329,6333,
3,574,287,0,6330,6333,5,1156,0,0,6331,6333,5,1148,0,0,6332,6329,1,0,0,0,
6332,6330,1,0,0,0,6332,6331,1,0,0,0,6333,573,1,0,0,0,6334,6335,7,96,0,0,
6335,575,1,0,0,0,6336,6337,3,590,295,0,6337,6338,5,1121,0,0,6338,6339,3,
590,295,0,6339,6340,5,1121,0,0,6340,6341,3,590,295,0,6341,6342,5,1121,0,
0,6342,6343,3,590,295,0,6343,6344,5,1121,0,0,6344,6350,3,590,295,0,6345,
6346,5,1144,0,0,6346,6347,3,590,295,0,6347,6348,5,1121,0,0,6348,6349,3,590,
295,0,6349,6351,1,0,0,0,6350,6345,1,0,0,0,6351,6352,1,0,0,0,6352,6350,1,
0,0,0,6352,6353,1,0,0,0,6353,577,1,0,0,0,6354,6361,3,580,290,0,6355,6356,
5,1135,0,0,6356,6359,3,580,290,0,6357,6358,5,1135,0,0,6358,6360,3,590,295,
0,6359,6357,1,0,0,0,6359,6360,1,0,0,0,6360,6362,1,0,0,0,6361,6355,1,0,0,
0,6361,6362,1,0,0,0,6362,579,1,0,0,0,6363,6371,5,1148,0,0,6364,6371,5,1153,
0,0,6365,6367,5,1150,0,0,6366,6365,1,0,0,0,6367,6368,1,0,0,0,6368,6366,1,
0,0,0,6368,6369,1,0,0,0,6369,6371,1,0,0,0,6370,6363,1,0,0,0,6370,6364,1,
0,0,0,6370,6366,1,0,0,0,6371,581,1,0,0,0,6372,6375,3,584,292,0,6373,6375,
5,1148,0,0,6374,6372,1,0,0,0,6374,6373,1,0,0,0,6375,583,1,0,0,0,6376,6380,
3,586,293,0,6377,6380,5,1145,0,0,6378,6380,5,1148,0,0,6379,6376,1,0,0,0,
6379,6377,1,0,0,0,6379,6378,1,0,0,0,6380,585,1,0,0,0,6381,6391,5,1156,0,
0,6382,6391,3,708,354,0,6383,6391,3,710,355,0,6384,6391,3,574,287,0,6385,
6391,3,712,356,0,6386,6391,3,714,357,0,6387,6391,3,716,358,0,6388,6391,3,
718,359,0,6389,6391,3,680,340,0,6390,6381,1,0,0,0,6390,6382,1,0,0,0,6390,
6383,1,0,0,0,6390,6384,1,0,0,0,6390,6385,1,0,0,0,6390,6386,1,0,0,0,6390,
6387,1,0,0,0,6390,6388,1,0,0,0,6390,6389,1,0,0,0,6391,587,1,0,0,0,6392,6396,
5,1155,0,0,6393,6394,5,1132,0,0,6394,6396,3,584,292,0,6395,6392,1,0,0,0,
6395,6393,1,0,0,0,6396,589,1,0,0,0,6397,6398,7,97,0,0,6398,591,1,0,0,0,6399,
6402,5,1146,0,0,6400,6402,3,590,295,0,6401,6399,1,0,0,0,6401,6400,1,0,0,
0,6402,593,1,0,0,0,6403,6405,5,1154,0,0,6404,6403,1,0,0,0,6404,6405,1,0,
0,0,6405,6406,1,0,0,0,6406,6409,5,1148,0,0,6407,6409,5,1147,0,0,6408,6404,
1,0,0,0,6408,6407,1,0,0,0,6409,6411,1,0,0,0,6410,6412,5,1148,0,0,6411,6410,
1,0,0,0,6412,6413,1,0,0,0,6413,6411,1,0,0,0,6413,6414,1,0,0,0,6414,6427,
1,0,0,0,6415,6417,5,1154,0,0,6416,6415,1,0,0,0,6416,6417,1,0,0,0,6417,6418,
1,0,0,0,6418,6421,5,1148,0,0,6419,6421,5,1147,0,0,6420,6416,1,0,0,0,6420,
6419,1,0,0,0,6421,6424,1,0,0,0,6422,6423,5,27,0,0,6423,6425,3,570,285,0,
6424,6422,1,0,0,0,6424,6425,1,0,0,0,6425,6427,1,0,0,0,6426,6408,1,0,0,0,
6426,6420,1,0,0,0,6427,595,1,0,0,0,6428,6429,7,98,0,0,6429,597,1,0,0,0,6430,
6432,5,1154,0,0,6431,6430,1,0,0,0,6431,6432,1,0,0,0,6432,6433,1,0,0,0,6433,
6434,5,1150,0,0,6434,599,1,0,0,0,6435,6437,5,114,0,0,6436,6435,1,0,0,0,6436,
6437,1,0,0,0,6437,6438,1,0,0,0,6438,6439,7,99,0,0,6439,601,1,0,0,0,6440,
6453,3,594,297,0,6441,6453,3,590,295,0,6442,6443,5,1121,0,0,6443,6453,3,
590,295,0,6444,6453,3,598,299,0,6445,6453,3,596,298,0,6446,6453,5,1151,0,
0,6447,6453,5,1153,0,0,6448,6450,5,114,0,0,6449,6448,1,0,0,0,6449,6450,1,
0,0,0,6450,6451,1,0,0,0,6451,6453,7,99,0,0,6452,6440,1,0,0,0,6452,6441,1,
0,0,0,6452,6442,1,0,0,0,6452,6444,1,0,0,0,6452,6445,1,0,0,0,6452,6446,1,
0,0,0,6452,6447,1,0,0,0,6452,6449,1,0,0,0,6453,603,1,0,0,0,6454,6456,7,100,
0,0,6455,6457,5,238,0,0,6456,6455,1,0,0,0,6456,6457,1,0,0,0,6457,6459,1,
0,0,0,6458,6460,3,610,305,0,6459,6458,1,0,0,0,6459,6460,1,0,0,0,6460,6462,
1,0,0,0,6461,6463,5,226,0,0,6462,6461,1,0,0,0,6462,6463,1,0,0,0,6463,6467,
1,0,0,0,6464,6465,3,60,30,0,6465,6466,3,568,284,0,6466,6468,1,0,0,0,6467,
6464,1,0,0,0,6467,6468,1,0,0,0,6468,6472,1,0,0,0,6469,6470,5,27,0,0,6470,
6473,3,570,285,0,6471,6473,5,226,0,0,6472,6469,1,0,0,0,6472,6471,1,0,0,0,
6472,6473,1,0,0,0,6473,6581,1,0,0,0,6474,6475,5,225,0,0,6475,6476,7,101,
0,0,6476,6478,5,238,0,0,6477,6479,3,610,305,0,6478,6477,1,0,0,0,6478,6479,
1,0,0,0,6479,6481,1,0,0,0,6480,6482,5,226,0,0,6481,6480,1,0,0,0,6481,6482,
1,0,0,0,6482,6581,1,0,0,0,6483,6484,5,225,0,0,6484,6486,7,102,0,0,6485,6487,
3,610,305,0,6486,6485,1,0,0,0,6486,6487,1,0,0,0,6487,6489,1,0,0,0,6488,6490,
5,226,0,0,6489,6488,1,0,0,0,6489,6490,1,0,0,0,6490,6581,1,0,0,0,6491,6492,
5,518,0,0,6492,6494,5,223,0,0,6493,6495,3,610,305,0,6494,6493,1,0,0,0,6494,
6495,1,0,0,0,6495,6497,1,0,0,0,6496,6498,5,226,0,0,6497,6496,1,0,0,0,6497,
6498,1,0,0,0,6498,6581,1,0,0,0,6499,6501,7,103,0,0,6500,6502,3,610,305,0,
6501,6500,1,0,0,0,6501,6502,1,0,0,0,6502,6506,1,0,0,0,6503,6505,7,104,0,
0,6504,6503,1,0,0,0,6505,6508,1,0,0,0,6506,6504,1,0,0,0,6506,6507,1,0,0,
0,6507,6581,1,0,0,0,6508,6506,1,0,0,0,6509,6511,5,208,0,0,6510,6512,3,612,
306,0,6511,6510,1,0,0,0,6511,6512,1,0,0,0,6512,6516,1,0,0,0,6513,6515,7,
104,0,0,6514,6513,1,0,0,0,6515,6518,1,0,0,0,6516,6514,1,0,0,0,6516,6517,
1,0,0,0,6517,6581,1,0,0,0,6518,6516,1,0,0,0,6519,6521,5,209,0,0,6520,6522,
5,210,0,0,6521,6520,1,0,0,0,6521,6522,1,0,0,0,6522,6524,1,0,0,0,6523,6525,
3,612,306,0,6524,6523,1,0,0,0,6524,6525,1,0,0,0,6525,6529,1,0,0,0,6526,6528,
7,104,0,0,6527,6526,1,0,0,0,6528,6531,1,0,0,0,6529,6527,1,0,0,0,6529,6530,
1,0,0,0,6530,6581,1,0,0,0,6531,6529,1,0,0,0,6532,6534,7,105,0,0,6533,6535,
3,614,307,0,6534,6533,1,0,0,0,6534,6535,1,0,0,0,6535,6539,1,0,0,0,6536,6538,
7,104,0,0,6537,6536,1,0,0,0,6538,6541,1,0,0,0,6539,6537,1,0,0,0,6539,6540,
1,0,0,0,6540,6581,1,0,0,0,6541,6539,1,0,0,0,6542,6581,7,106,0,0,6543,6545,
7,107,0,0,6544,6546,3,610,305,0,6545,6544,1,0,0,0,6545,6546,1,0,0,0,6546,
6581,1,0,0,0,6547,6548,7,108,0,0,6548,6550,3,606,303,0,6549,6551,5,226,0,
0,6550,6549,1,0,0,0,6550,6551,1,0,0,0,6551,6555,1,0,0,0,6552,6553,3,60,30,
0,6553,6554,3,568,284,0,6554,6556,1,0,0,0,6555,6552,1,0,0,0,6555,6556,1,
0,0,0,6556,6581,1,0,0,0,6557,6560,7,109,0,0,6558,6559,5,1012,0,0,6559,6561,
3,590,295,0,6560,6558,1,0,0,0,6560,6561,1,0,0,0,6561,6581,1,0,0,0,6562,6564,
5,231,0,0,6563,6565,5,223,0,0,6564,6563,1,0,0,0,6564,6565,1,0,0,0,6565,6567,
1,0,0,0,6566,6568,5,226,0,0,6567,6566,1,0,0,0,6567,6568,1,0,0,0,6568,6572,
1,0,0,0,6569,6570,3,60,30,0,6570,6571,3,568,284,0,6571,6573,1,0,0,0,6572,
6569,1,0,0,0,6572,6573,1,0,0,0,6573,6576,1,0,0,0,6574,6575,5,27,0,0,6575,
6577,3,570,285,0,6576,6574,1,0,0,0,6576,6577,1,0,0,0,6577,6581,1,0,0,0,6578,
6579,5,231,0,0,6579,6581,5,227,0,0,6580,6454,1,0,0,0,6580,6474,1,0,0,0,6580,
6483,1,0,0,0,6580,6491,1,0,0,0,6580,6499,1,0,0,0,6580,6509,1,0,0,0,6580,
6519,1,0,0,0,6580,6532,1,0,0,0,6580,6542,1,0,0,0,6580,6543,1,0,0,0,6580,
6547,1,0,0,0,6580,6557,1,0,0,0,6580,6562,1,0,0,0,6580,6578,1,0,0,0,6581,
605,1,0,0,0,6582,6583,5,1133,0,0,6583,6588,5,1148,0,0,6584,6585,5,1135,0,
0,6585,6587,5,1148,0,0,6586,6584,1,0,0,0,6587,6590,1,0,0,0,6588,6586,1,0,
0,0,6588,6589,1,0,0,0,6589,6591,1,0,0,0,6590,6588,1,0,0,0,6591,6592,5,1134,
0,0,6592,607,1,0,0,0,6593,6595,7,110,0,0,6594,6596,3,610,305,0,6595,6594,
1,0,0,0,6595,6596,1,0,0,0,6596,6616,1,0,0,0,6597,6599,5,222,0,0,6598,6600,
3,610,305,0,6599,6598,1,0,0,0,6599,6600,1,0,0,0,6600,6604,1,0,0,0,6601,6602,
3,60,30,0,6602,6603,3,568,284,0,6603,6605,1,0,0,0,6604,6601,1,0,0,0,6604,
6605,1,0,0,0,6605,6616,1,0,0,0,6606,6616,7,111,0,0,6607,6609,7,112,0,0,6608,
6610,3,614,307,0,6609,6608,1,0,0,0,6609,6610,1,0,0,0,6610,6616,1,0,0,0,6611,
6613,7,113,0,0,6612,6614,7,114,0,0,6613,6612,1,0,0,0,6613,6614,1,0,0,0,6614,
6616,1,0,0,0,6615,6593,1,0,0,0,6615,6597,1,0,0,0,6615,6606,1,0,0,0,6615,
6607,1,0,0,0,6615,6611,1,0,0,0,6616,6618,1,0,0,0,6617,6619,5,11,0,0,6618,
6617,1,0,0,0,6618,6619,1,0,0,0,6619,609,1,0,0,0,6620,6621,5,1133,0,0,6621,
6622,3,590,295,0,6622,6623,5,1134,0,0,6623,611,1,0,0,0,6624,6625,5,1133,
0,0,6625,6626,3,590,295,0,6626,6627,5,1135,0,0,6627,6628,3,590,295,0,6628,
6629,5,1134,0,0,6629,613,1,0,0,0,6630,6631,5,1133,0,0,6631,6634,3,590,295,
0,6632,6633,5,1135,0,0,6633,6635,3,590,295,0,6634,6632,1,0,0,0,6634,6635,
1,0,0,0,6635,6636,1,0,0,0,6636,6637,5,1134,0,0,6637,615,1,0,0,0,6638,6643,
3,584,292,0,6639,6640,5,1135,0,0,6640,6642,3,584,292,0,6641,6639,1,0,0,0,
6642,6645,1,0,0,0,6643,6641,1,0,0,0,6643,6644,1,0,0,0,6644,617,1,0,0,0,6645,
6643,1,0,0,0,6646,6651,3,556,278,0,6647,6648,5,1135,0,0,6648,6650,3,556,
278,0,6649,6647,1,0,0,0,6650,6653,1,0,0,0,6651,6649,1,0,0,0,6651,6652,1,
0,0,0,6652,619,1,0,0,0,6653,6651,1,0,0,0,6654,6659,3,552,276,0,6655,6656,
5,1135,0,0,6656,6658,3,552,276,0,6657,6655,1,0,0,0,6658,6661,1,0,0,0,6659,
6657,1,0,0,0,6659,6660,1,0,0,0,6660,621,1,0,0,0,6661,6659,1,0,0,0,6662,6663,
5,1133,0,0,6663,6668,3,558,279,0,6664,6665,5,1135,0,0,6665,6667,3,558,279,
0,6666,6664,1,0,0,0,6667,6670,1,0,0,0,6668,6666,1,0,0,0,6668,6669,1,0,0,
0,6669,6671,1,0,0,0,6670,6668,1,0,0,0,6671,6672,5,1134,0,0,6672,623,1,0,
0,0,6673,6678,3,688,344,0,6674,6675,5,1135,0,0,6675,6677,3,688,344,0,6676,
6674,1,0,0,0,6677,6680,1,0,0,0,6678,6676,1,0,0,0,6678,6679,1,0,0,0,6679,
625,1,0,0,0,6680,6678,1,0,0,0,6681,6686,3,638,319,0,6682,6683,5,1135,0,0,
6683,6685,3,638,319,0,6684,6682,1,0,0,0,6685,6688,1,0,0,0,6686,6684,1,0,
0,0,6686,6687,1,0,0,0,6687,627,1,0,0,0,6688,6686,1,0,0,0,6689,6694,3,602,
301,0,6690,6691,5,1135,0,0,6691,6693,3,602,301,0,6692,6690,1,0,0,0,6693,
6696,1,0,0,0,6694,6692,1,0,0,0,6694,6695,1,0,0,0,6695,629,1,0,0,0,6696,6694,
1,0,0,0,6697,6702,5,1148,0,0,6698,6699,5,1135,0,0,6699,6701,5,1148,0,0,6700,
6698,1,0,0,0,6701,6704,1,0,0,0,6702,6700,1,0,0,0,6702,6703,1,0,0,0,6703,
631,1,0,0,0,6704,6702,1,0,0,0,6705,6710,5,1159,0,0,6706,6707,5,1135,0,0,
6707,6709,5,1159,0,0,6708,6706,1,0,0,0,6709,6712,1,0,0,0,6710,6708,1,0,0,
0,6710,6711,1,0,0,0,6711,633,1,0,0,0,6712,6710,1,0,0,0,6713,6740,5,116,0,
0,6714,6715,5,23,0,0,6715,6716,5,1133,0,0,6716,6717,3,688,344,0,6717,6718,
5,12,0,0,6718,6719,3,608,304,0,6719,6720,5,1134,0,0,6720,6740,1,0,0,0,6721,
6723,3,694,347,0,6722,6721,1,0,0,0,6722,6723,1,0,0,0,6723,6724,1,0,0,0,6724,
6740,3,602,301,0,6725,6729,3,636,318,0,6726,6727,5,118,0,0,6727,6728,5,184,
0,0,6728,6730,3,636,318,0,6729,6726,1,0,0,0,6729,6730,1,0,0,0,6730,6740,
1,0,0,0,6731,6732,5,1133,0,0,6732,6733,3,688,344,0,6733,6734,5,1134,0,0,
6734,6740,1,0,0,0,6735,6736,5,1133,0,0,6736,6737,3,550,275,0,6737,6738,5,
1134,0,0,6738,6740,1,0,0,0,6739,6713,1,0,0,0,6739,6714,1,0,0,0,6739,6722,
1,0,0,0,6739,6725,1,0,0,0,6739,6731,1,0,0,0,6739,6735,1,0,0,0,6740,635,1,
0,0,0,6741,6747,7,115,0,0,6742,6744,5,1133,0,0,6743,6745,3,590,295,0,6744,
6743,1,0,0,0,6744,6745,1,0,0,0,6745,6746,1,0,0,0,6746,6748,5,1134,0,0,6747,
6742,1,0,0,0,6747,6748,1,0,0,0,6748,6756,1,0,0,0,6749,6750,5,323,0,0,6750,
6752,5,1133,0,0,6751,6753,3,590,295,0,6752,6751,1,0,0,0,6752,6753,1,0,0,
0,6753,6754,1,0,0,0,6754,6756,5,1134,0,0,6755,6741,1,0,0,0,6755,6749,1,0,
0,0,6756,637,1,0,0,0,6757,6760,3,688,344,0,6758,6760,5,42,0,0,6759,6757,
1,0,0,0,6759,6758,1,0,0,0,6760,639,1,0,0,0,6761,6762,5,77,0,0,6762,6763,
5,60,0,0,6763,641,1,0,0,0,6764,6765,5,77,0,0,6765,6766,5,114,0,0,6766,6767,
5,60,0,0,6767,643,1,0,0,0,6768,6769,5,123,0,0,6769,6770,5,141,0,0,6770,645,
1,0,0,0,6771,6772,5,674,0,0,6772,6775,3,590,295,0,6773,6775,5,527,0,0,6774,
6771,1,0,0,0,6774,6773,1,0,0,0,6775,647,1,0,0,0,6776,6795,3,650,325,0,6777,
6795,3,658,329,0,6778,6795,3,660,330,0,6779,6780,3,680,340,0,6780,6782,5,
1133,0,0,6781,6783,3,684,342,0,6782,6781,1,0,0,0,6782,6783,1,0,0,0,6783,
6784,1,0,0,0,6784,6785,5,1134,0,0,6785,6795,1,0,0,0,6786,6787,3,550,275,
0,6787,6789,5,1133,0,0,6788,6790,3,684,342,0,6789,6788,1,0,0,0,6789,6790,
1,0,0,0,6790,6791,1,0,0,0,6791,6792,5,1134,0,0,6792,6795,1,0,0,0,6793,6795,
3,682,341,0,6794,6776,1,0,0,0,6794,6777,1,0,0,0,6794,6778,1,0,0,0,6794,6779,
1,0,0,0,6794,6786,1,0,0,0,6794,6793,1,0,0,0,6795,649,1,0,0,0,6796,6799,7,
116,0,0,6797,6798,5,1133,0,0,6798,6800,5,1134,0,0,6799,6797,1,0,0,0,6799,
6800,1,0,0,0,6800,6976,1,0,0,0,6801,6976,3,62,31,0,6802,6803,5,32,0,0,6803,
6804,5,1133,0,0,6804,6805,3,688,344,0,6805,6806,5,1135,0,0,6806,6807,3,608,
304,0,6807,6808,5,1134,0,0,6808,6976,1,0,0,0,6809,6810,5,32,0,0,6810,6811,
5,1133,0,0,6811,6812,3,688,344,0,6812,6813,5,187,0,0,6813,6814,3,568,284,
0,6814,6815,5,1134,0,0,6815,6976,1,0,0,0,6816,6817,5,23,0,0,6817,6818,5,
1133,0,0,6818,6819,3,688,344,0,6819,6820,5,12,0,0,6820,6821,3,608,304,0,
6821,6822,5,1134,0,0,6822,6976,1,0,0,0,6823,6824,5,188,0,0,6824,6825,5,1133,
0,0,6825,6826,3,556,278,0,6826,6827,5,1134,0,0,6827,6976,1,0,0,0,6828,6829,
5,22,0,0,6829,6831,3,688,344,0,6830,6832,3,652,326,0,6831,6830,1,0,0,0,6832,
6833,1,0,0,0,6833,6831,1,0,0,0,6833,6834,1,0,0,0,6834,6837,1,0,0,0,6835,
6836,5,53,0,0,6836,6838,3,686,343,0,6837,6835,1,0,0,0,6837,6838,1,0,0,0,
6838,6839,1,0,0,0,6839,6840,5,407,0,0,6840,6976,1,0,0,0,6841,6843,5,22,0,
0,6842,6844,3,652,326,0,6843,6842,1,0,0,0,6844,6845,1,0,0,0,6845,6843,1,
0,0,0,6845,6846,1,0,0,0,6846,6849,1,0,0,0,6847,6848,5,53,0,0,6848,6850,3,
686,343,0,6849,6847,1,0,0,0,6849,6850,1,0,0,0,6850,6851,1,0,0,0,6851,6852,
5,407,0,0,6852,6976,1,0,0,0,6853,6854,5,222,0,0,6854,6855,5,1133,0,0,6855,
6858,3,684,342,0,6856,6857,5,187,0,0,6857,6859,3,568,284,0,6858,6856,1,0,
0,0,6858,6859,1,0,0,0,6859,6860,1,0,0,0,6860,6861,5,1134,0,0,6861,6976,1,
0,0,0,6862,6863,5,324,0,0,6863,6866,5,1133,0,0,6864,6867,3,594,297,0,6865,
6867,3,688,344,0,6866,6864,1,0,0,0,6866,6865,1,0,0,0,6867,6868,1,0,0,0,6868,
6871,5,80,0,0,6869,6872,3,594,297,0,6870,6872,3,688,344,0,6871,6869,1,0,
0,0,6871,6870,1,0,0,0,6872,6873,1,0,0,0,6873,6874,5,1134,0,0,6874,6976,1,
0,0,0,6875,6876,7,117,0,0,6876,6879,5,1133,0,0,6877,6880,3,594,297,0,6878,
6880,3,688,344,0,6879,6877,1,0,0,0,6879,6878,1,0,0,0,6880,6881,1,0,0,0,6881,
6884,5,68,0,0,6882,6885,3,590,295,0,6883,6885,3,688,344,0,6884,6882,1,0,
0,0,6884,6883,1,0,0,0,6885,6891,1,0,0,0,6886,6889,5,65,0,0,6887,6890,3,590,
295,0,6888,6890,3,688,344,0,6889,6887,1,0,0,0,6889,6888,1,0,0,0,6890,6892,
1,0,0,0,6891,6886,1,0,0,0,6891,6892,1,0,0,0,6892,6893,1,0,0,0,6893,6894,
5,1134,0,0,6894,6976,1,0,0,0,6895,6896,5,328,0,0,6896,6897,5,1133,0,0,6897,
6900,7,118,0,0,6898,6901,3,594,297,0,6899,6901,3,688,344,0,6900,6898,1,0,
0,0,6900,6899,1,0,0,0,6900,6901,1,0,0,0,6901,6902,1,0,0,0,6902,6905,5,68,
0,0,6903,6906,3,594,297,0,6904,6906,3,688,344,0,6905,6903,1,0,0,0,6905,6904,
1,0,0,0,6906,6907,1,0,0,0,6907,6908,5,1134,0,0,6908,6976,1,0,0,0,6909,6910,
5,328,0,0,6910,6913,5,1133,0,0,6911,6914,3,594,297,0,6912,6914,3,688,344,
0,6913,6911,1,0,0,0,6913,6912,1,0,0,0,6914,6915,1,0,0,0,6915,6918,5,68,0,
0,6916,6919,3,594,297,0,6917,6919,3,688,344,0,6918,6916,1,0,0,0,6918,6917,
1,0,0,0,6919,6920,1,0,0,0,6920,6921,5,1134,0,0,6921,6976,1,0,0,0,6922,6923,
5,1103,0,0,6923,6926,5,1133,0,0,6924,6927,3,594,297,0,6925,6927,3,688,344,
0,6926,6924,1,0,0,0,6926,6925,1,0,0,0,6927,6934,1,0,0,0,6928,6929,5,12,0,
0,6929,6930,7,119,0,0,6930,6931,5,1133,0,0,6931,6932,3,590,295,0,6932,6933,
5,1134,0,0,6933,6935,1,0,0,0,6934,6928,1,0,0,0,6934,6935,1,0,0,0,6935,6937,
1,0,0,0,6936,6938,3,654,327,0,6937,6936,1,0,0,0,6937,6938,1,0,0,0,6938,6939,
1,0,0,0,6939,6940,5,1134,0,0,6940,6976,1,0,0,0,6941,6942,5,321,0,0,6942,
6943,5,1133,0,0,6943,6944,3,72,36,0,6944,6947,5,68,0,0,6945,6948,3,594,297,
0,6946,6948,3,688,344,0,6947,6945,1,0,0,0,6947,6946,1,0,0,0,6948,6949,1,
0,0,0,6949,6950,5,1134,0,0,6950,6976,1,0,0,0,6951,6952,5,900,0,0,6952,6953,
5,1133,0,0,6953,6954,7,120,0,0,6954,6955,5,1135,0,0,6955,6956,3,594,297,
0,6956,6957,5,1134,0,0,6957,6976,1,0,0,0,6958,6959,5,282,0,0,6959,6960,5,
1133,0,0,6960,6961,3,688,344,0,6961,6962,5,1135,0,0,6962,6965,3,688,344,
0,6963,6964,5,593,0,0,6964,6966,3,608,304,0,6965,6963,1,0,0,0,6965,6966,
1,0,0,0,6966,6968,1,0,0,0,6967,6969,3,268,134,0,6968,6967,1,0,0,0,6968,6969,
1,0,0,0,6969,6971,1,0,0,0,6970,6972,3,270,135,0,6971,6970,1,0,0,0,6971,6972,
1,0,0,0,6972,6973,1,0,0,0,6973,6974,5,1134,0,0,6974,6976,1,0,0,0,6975,6796,
1,0,0,0,6975,6801,1,0,0,0,6975,6802,1,0,0,0,6975,6809,1,0,0,0,6975,6816,
1,0,0,0,6975,6823,1,0,0,0,6975,6828,1,0,0,0,6975,6841,1,0,0,0,6975,6853,
1,0,0,0,6975,6862,1,0,0,0,6975,6875,1,0,0,0,6975,6895,1,0,0,0,6975,6909,
1,0,0,0,6975,6922,1,0,0,0,6975,6941,1,0,0,0,6975,6951,1,0,0,0,6975,6958,
1,0,0,0,6976,651,1,0,0,0,6977,6978,5,189,0,0,6978,6979,3,686,343,0,6979,
6980,5,174,0,0,6980,6981,3,686,343,0,6981,653,1,0,0,0,6982,6983,5,472,0,
0,6983,6988,3,656,328,0,6984,6985,5,1135,0,0,6985,6987,3,656,328,0,6986,
6984,1,0,0,0,6987,6990,1,0,0,0,6988,6986,1,0,0,0,6988,6989,1,0,0,0,6989,
6997,1,0,0,0,6990,6988,1,0,0,0,6991,6992,5,472,0,0,6992,6993,3,590,295,0,
6993,6994,5,1121,0,0,6994,6995,3,590,295,0,6995,6997,1,0,0,0,6996,6982,1,
0,0,0,6996,6991,1,0,0,0,6997,655,1,0,0,0,6998,7000,3,590,295,0,6999,7001,
7,121,0,0,7000,6999,1,0,0,0,7000,7001,1,0,0,0,7001,657,1,0,0,0,7002,7003,
7,122,0,0,7003,7005,5,1133,0,0,7004,7006,7,44,0,0,7005,7004,1,0,0,0,7005,
7006,1,0,0,0,7006,7007,1,0,0,0,7007,7008,3,686,343,0,7008,7010,5,1134,0,
0,7009,7011,3,662,331,0,7010,7009,1,0,0,0,7010,7011,1,0,0,0,7011,7062,1,
0,0,0,7012,7013,5,290,0,0,7013,7021,5,1133,0,0,7014,7022,5,1117,0,0,7015,
7017,5,6,0,0,7016,7015,1,0,0,0,7016,7017,1,0,0,0,7017,7018,1,0,0,0,7018,
7022,3,686,343,0,7019,7020,5,49,0,0,7020,7022,3,684,342,0,7021,7014,1,0,
0,0,7021,7016,1,0,0,0,7021,7019,1,0,0,0,7022,7023,1,0,0,0,7023,7025,5,1134,
0,0,7024,7026,3,662,331,0,7025,7024,1,0,0,0,7025,7026,1,0,0,0,7026,7062,
1,0,0,0,7027,7028,7,123,0,0,7028,7030,5,1133,0,0,7029,7031,5,6,0,0,7030,
7029,1,0,0,0,7030,7031,1,0,0,0,7031,7032,1,0,0,0,7032,7033,3,686,343,0,7033,
7035,5,1134,0,0,7034,7036,3,662,331,0,7035,7034,1,0,0,0,7035,7036,1,0,0,
0,7036,7062,1,0,0,0,7037,7038,5,294,0,0,7038,7040,5,1133,0,0,7039,7041,5,
49,0,0,7040,7039,1,0,0,0,7040,7041,1,0,0,0,7041,7042,1,0,0,0,7042,7053,3,
684,342,0,7043,7044,5,124,0,0,7044,7045,5,19,0,0,7045,7050,3,232,116,0,7046,
7047,5,1135,0,0,7047,7049,3,232,116,0,7048,7046,1,0,0,0,7049,7052,1,0,0,
0,7050,7048,1,0,0,0,7050,7051,1,0,0,0,7051,7054,1,0,0,0,7052,7050,1,0,0,
0,7053,7043,1,0,0,0,7053,7054,1,0,0,0,7054,7057,1,0,0,0,7055,7056,5,154,
0,0,7056,7058,5,1148,0,0,7057,7055,1,0,0,0,7057,7058,1,0,0,0,7058,7059,1,
0,0,0,7059,7060,5,1134,0,0,7060,7062,1,0,0,0,7061,7002,1,0,0,0,7061,7012,
1,0,0,0,7061,7027,1,0,0,0,7061,7037,1,0,0,0,7062,659,1,0,0,0,7063,7064,7,
124,0,0,7064,7065,5,1133,0,0,7065,7068,3,688,344,0,7066,7067,5,1135,0,0,
7067,7069,3,590,295,0,7068,7066,1,0,0,0,7068,7069,1,0,0,0,7069,7072,1,0,
0,0,7070,7071,5,1135,0,0,7071,7073,3,590,295,0,7072,7070,1,0,0,0,7072,7073,
1,0,0,0,7073,7074,1,0,0,0,7074,7075,5,1134,0,0,7075,7076,3,662,331,0,7076,
7102,1,0,0,0,7077,7078,7,125,0,0,7078,7079,5,1133,0,0,7079,7080,3,688,344,
0,7080,7081,5,1134,0,0,7081,7082,3,662,331,0,7082,7102,1,0,0,0,7083,7084,
7,126,0,0,7084,7085,5,1133,0,0,7085,7086,5,1134,0,0,7086,7102,3,662,331,
0,7087,7088,5,301,0,0,7088,7089,5,1133,0,0,7089,7090,3,688,344,0,7090,7091,
5,1135,0,0,7091,7092,3,590,295,0,7092,7093,5,1134,0,0,7093,7094,3,662,331,
0,7094,7102,1,0,0,0,7095,7096,5,300,0,0,7096,7097,5,1133,0,0,7097,7098,3,
590,295,0,7098,7099,5,1134,0,0,7099,7100,3,662,331,0,7100,7102,1,0,0,0,7101,
7063,1,0,0,0,7101,7077,1,0,0,0,7101,7083,1,0,0,0,7101,7087,1,0,0,0,7101,
7095,1,0,0,0,7102,661,1,0,0,0,7103,7109,5,128,0,0,7104,7105,5,1133,0,0,7105,
7106,3,664,332,0,7106,7107,5,1134,0,0,7107,7110,1,0,0,0,7108,7110,3,666,
333,0,7109,7104,1,0,0,0,7109,7108,1,0,0,0,7110,663,1,0,0,0,7111,7113,3,666,
333,0,7112,7111,1,0,0,0,7112,7113,1,0,0,0,7113,7115,1,0,0,0,7114,7116,3,
678,339,0,7115,7114,1,0,0,0,7115,7116,1,0,0,0,7116,7118,1,0,0,0,7117,7119,
3,230,115,0,7118,7117,1,0,0,0,7118,7119,1,0,0,0,7119,7121,1,0,0,0,7120,7122,
3,668,334,0,7121,7120,1,0,0,0,7121,7122,1,0,0,0,7122,665,1,0,0,0,7123,7124,
3,584,292,0,7124,667,1,0,0,0,7125,7126,3,670,335,0,7126,7127,3,672,336,0,
7127,669,1,0,0,0,7128,7129,7,127,0,0,7129,671,1,0,0,0,7130,7133,3,676,338,
0,7131,7133,3,674,337,0,7132,7130,1,0,0,0,7132,7131,1,0,0,0,7133,673,1,0,
0,0,7134,7135,5,16,0,0,7135,7136,3,676,338,0,7136,7137,5,10,0,0,7137,7138,
3,676,338,0,7138,675,1,0,0,0,7139,7140,5,35,0,0,7140,7147,5,600,0,0,7141,
7142,5,657,0,0,7142,7147,7,128,0,0,7143,7144,3,688,344,0,7144,7145,7,128,
0,0,7145,7147,1,0,0,0,7146,7139,1,0,0,0,7146,7141,1,0,0,0,7146,7143,1,0,
0,0,7147,677,1,0,0,0,7148,7149,5,129,0,0,7149,7150,5,19,0,0,7150,7155,3,
688,344,0,7151,7152,5,1135,0,0,7152,7154,3,688,344,0,7153,7151,1,0,0,0,7154,
7157,1,0,0,0,7155,7153,1,0,0,0,7155,7156,1,0,0,0,7156,679,1,0,0,0,7157,7155,
1,0,0,0,7158,7183,3,720,360,0,7159,7183,5,747,0,0,7160,7183,5,317,0,0,7161,
7183,5,313,0,0,7162,7183,5,314,0,0,7163,7183,5,315,0,0,7164,7183,5,318,0,
0,7165,7183,5,319,0,0,7166,7183,5,320,0,0,7167,7183,5,77,0,0,7168,7183,5,
85,0,0,7169,7183,5,316,0,0,7170,7183,5,322,0,0,7171,7183,5,508,0,0,7172,
7183,5,323,0,0,7173,7183,5,140,0,0,7174,7183,5,141,0,0,7175,7183,5,325,0,
0,7176,7183,5,326,0,0,7177,7183,5,327,0,0,7178,7183,5,328,0,0,7179,7183,
5,329,0,0,7180,7183,5,330,0,0,7181,7183,5,331,0,0,7182,7158,1,0,0,0,7182,
7159,1,0,0,0,7182,7160,1,0,0,0,7182,7161,1,0,0,0,7182,7162,1,0,0,0,7182,
7163,1,0,0,0,7182,7164,1,0,0,0,7182,7165,1,0,0,0,7182,7166,1,0,0,0,7182,
7167,1,0,0,0,7182,7168,1,0,0,0,7182,7169,1,0,0,0,7182,7170,1,0,0,0,7182,
7171,1,0,0,0,7182,7172,1,0,0,0,7182,7173,1,0,0,0,7182,7174,1,0,0,0,7182,
7175,1,0,0,0,7182,7176,1,0,0,0,7182,7177,1,0,0,0,7182,7178,1,0,0,0,7182,
7179,1,0,0,0,7182,7180,1,0,0,0,7182,7181,1,0,0,0,7183,681,1,0,0,0,7184,7185,
7,129,0,0,7185,7186,5,1133,0,0,7186,7187,3,686,343,0,7187,7188,5,1134,0,
0,7188,683,1,0,0,0,7189,7194,3,602,301,0,7190,7194,3,556,278,0,7191,7194,
3,648,324,0,7192,7194,3,688,344,0,7193,7189,1,0,0,0,7193,7190,1,0,0,0,7193,
7191,1,0,0,0,7193,7192,1,0,0,0,7194,7204,1,0,0,0,7195,7200,5,1135,0,0,7196,
7201,3,602,301,0,7197,7201,3,556,278,0,7198,7201,3,648,324,0,7199,7201,3,
688,344,0,7200,7196,1,0,0,0,7200,7197,1,0,0,0,7200,7198,1,0,0,0,7200,7199,
1,0,0,0,7201,7203,1,0,0,0,7202,7195,1,0,0,0,7203,7206,1,0,0,0,7204,7202,
1,0,0,0,7204,7205,1,0,0,0,7205,685,1,0,0,0,7206,7204,1,0,0,0,7207,7212,3,
602,301,0,7208,7212,3,556,278,0,7209,7212,3,648,324,0,7210,7212,3,688,344,
0,7211,7207,1,0,0,0,7211,7208,1,0,0,0,7211,7209,1,0,0,0,7211,7210,1,0,0,
0,7212,687,1,0,0,0,7213,7214,6,344,-1,0,7214,7215,7,130,0,0,7215,7225,3,
688,344,4,7216,7217,3,690,345,0,7217,7219,5,88,0,0,7218,7220,5,114,0,0,7219,
7218,1,0,0,0,7219,7220,1,0,0,0,7220,7221,1,0,0,0,7221,7222,7,131,0,0,7222,
7225,1,0,0,0,7223,7225,3,690,345,0,7224,7213,1,0,0,0,7224,7216,1,0,0,0,7224,
7223,1,0,0,0,7225,7232,1,0,0,0,7226,7227,10,3,0,0,7227,7228,3,698,349,0,
7228,7229,3,688,344,4,7229,7231,1,0,0,0,7230,7226,1,0,0,0,7231,7234,1,0,
0,0,7232,7230,1,0,0,0,7232,7233,1,0,0,0,7233,689,1,0,0,0,7234,7232,1,0,0,
0,7235,7236,6,345,-1,0,7236,7237,3,692,346,0,7237,7302,1,0,0,0,7238,7239,
10,8,0,0,7239,7240,3,696,348,0,7240,7241,3,690,345,9,7241,7301,1,0,0,0,7242,
7244,10,6,0,0,7243,7245,5,114,0,0,7244,7243,1,0,0,0,7244,7245,1,0,0,0,7245,
7246,1,0,0,0,7246,7247,5,16,0,0,7247,7248,3,690,345,0,7248,7249,5,10,0,0,
7249,7250,3,690,345,7,7250,7301,1,0,0,0,7251,7252,10,5,0,0,7252,7253,5,620,
0,0,7253,7254,5,98,0,0,7254,7301,3,690,345,6,7255,7257,10,3,0,0,7256,7258,
5,114,0,0,7257,7256,1,0,0,0,7257,7258,1,0,0,0,7258,7259,1,0,0,0,7259,7260,
7,132,0,0,7260,7301,3,690,345,4,7261,7263,10,10,0,0,7262,7264,5,114,0,0,
7263,7262,1,0,0,0,7263,7264,1,0,0,0,7264,7265,1,0,0,0,7265,7266,5,80,0,0,
7266,7269,5,1133,0,0,7267,7270,3,200,100,0,7268,7270,3,624,312,0,7269,7267,
1,0,0,0,7269,7268,1,0,0,0,7270,7271,1,0,0,0,7271,7272,5,1134,0,0,7272,7301,
1,0,0,0,7273,7274,10,9,0,0,7274,7275,5,88,0,0,7275,7301,3,600,300,0,7276,
7277,10,7,0,0,7277,7278,3,696,348,0,7278,7279,7,133,0,0,7279,7280,5,1133,
0,0,7280,7281,3,200,100,0,7281,7282,5,1134,0,0,7282,7301,1,0,0,0,7283,7285,
10,4,0,0,7284,7286,5,114,0,0,7285,7284,1,0,0,0,7285,7286,1,0,0,0,7286,7287,
1,0,0,0,7287,7288,5,98,0,0,7288,7291,3,690,345,0,7289,7290,5,413,0,0,7290,
7292,5,1148,0,0,7291,7289,1,0,0,0,7291,7292,1,0,0,0,7292,7301,1,0,0,0,7293,
7294,10,2,0,0,7294,7295,5,505,0,0,7295,7296,5,533,0,0,7296,7297,5,1133,0,
0,7297,7298,3,690,345,0,7298,7299,5,1134,0,0,7299,7301,1,0,0,0,7300,7238,
1,0,0,0,7300,7242,1,0,0,0,7300,7251,1,0,0,0,7300,7255,1,0,0,0,7300,7261,
1,0,0,0,7300,7273,1,0,0,0,7300,7276,1,0,0,0,7300,7283,1,0,0,0,7300,7293,
1,0,0,0,7301,7304,1,0,0,0,7302,7300,1,0,0,0,7302,7303,1,0,0,0,7303,691,1,
0,0,0,7304,7302,1,0,0,0,7305,7306,6,346,-1,0,7306,7354,3,602,301,0,7307,
7354,3,556,278,0,7308,7354,3,648,324,0,7309,7354,3,566,283,0,7310,7311,3,
694,347,0,7311,7312,3,692,346,12,7312,7354,1,0,0,0,7313,7314,5,226,0,0,7314,
7354,3,692,346,11,7315,7316,5,1159,0,0,7316,7317,5,1108,0,0,7317,7354,3,
692,346,10,7318,7319,5,1133,0,0,7319,7324,3,688,344,0,7320,7321,5,1135,0,
0,7321,7323,3,688,344,0,7322,7320,1,0,0,0,7323,7326,1,0,0,0,7324,7322,1,
0,0,0,7324,7325,1,0,0,0,7325,7327,1,0,0,0,7326,7324,1,0,0,0,7327,7328,5,
1134,0,0,7328,7354,1,0,0,0,7329,7330,5,600,0,0,7330,7331,5,1133,0,0,7331,
7334,3,688,344,0,7332,7333,5,1135,0,0,7333,7335,3,688,344,0,7334,7332,1,
0,0,0,7335,7336,1,0,0,0,7336,7334,1,0,0,0,7336,7337,1,0,0,0,7337,7338,1,
0,0,0,7338,7339,5,1134,0,0,7339,7354,1,0,0,0,7340,7341,5,60,0,0,7341,7342,
5,1133,0,0,7342,7343,3,200,100,0,7343,7344,5,1134,0,0,7344,7354,1,0,0,0,
7345,7346,5,1133,0,0,7346,7347,3,200,100,0,7347,7348,5,1134,0,0,7348,7354,
1,0,0,0,7349,7350,5,86,0,0,7350,7351,3,688,344,0,7351,7352,3,72,36,0,7352,
7354,1,0,0,0,7353,7305,1,0,0,0,7353,7307,1,0,0,0,7353,7308,1,0,0,0,7353,
7309,1,0,0,0,7353,7310,1,0,0,0,7353,7313,1,0,0,0,7353,7315,1,0,0,0,7353,
7318,1,0,0,0,7353,7329,1,0,0,0,7353,7340,1,0,0,0,7353,7345,1,0,0,0,7353,
7349,1,0,0,0,7354,7376,1,0,0,0,7355,7356,10,4,0,0,7356,7357,3,700,350,0,
7357,7358,3,692,346,5,7358,7375,1,0,0,0,7359,7360,10,3,0,0,7360,7361,3,702,
351,0,7361,7362,3,692,346,4,7362,7375,1,0,0,0,7363,7364,10,2,0,0,7364,7365,
3,704,352,0,7365,7366,3,692,346,3,7366,7375,1,0,0,0,7367,7368,10,1,0,0,7368,
7369,3,706,353,0,7369,7370,3,692,346,2,7370,7375,1,0,0,0,7371,7372,10,14,
0,0,7372,7373,5,27,0,0,7373,7375,3,570,285,0,7374,7355,1,0,0,0,7374,7359,
1,0,0,0,7374,7363,1,0,0,0,7374,7367,1,0,0,0,7374,7371,1,0,0,0,7375,7378,
1,0,0,0,7376,7374,1,0,0,0,7376,7377,1,0,0,0,7377,693,1,0,0,0,7378,7376,1,
0,0,0,7379,7380,7,134,0,0,7380,695,1,0,0,0,7381,7396,5,1124,0,0,7382,7396,
5,1125,0,0,7383,7396,5,1126,0,0,7384,7385,5,1126,0,0,7385,7396,5,1124,0,
0,7386,7387,5,1125,0,0,7387,7396,5,1124,0,0,7388,7389,5,1126,0,0,7389,7396,
5,1125,0,0,7390,7391,5,1127,0,0,7391,7396,5,1124,0,0,7392,7393,5,1126,0,
0,7393,7394,5,1124,0,0,7394,7396,5,1125,0,0,7395,7381,1,0,0,0,7395,7382,
1,0,0,0,7395,7383,1,0,0,0,7395,7384,1,0,0,0,7395,7386,1,0,0,0,7395,7388,
1,0,0,0,7395,7390,1,0,0,0,7395,7392,1,0,0,0,7396,697,1,0,0,0,7397,7405,5,
10,0,0,7398,7399,5,1130,0,0,7399,7405,5,1130,0,0,7400,7405,5,194,0,0,7401,
7405,5,123,0,0,7402,7403,5,1129,0,0,7403,7405,5,1129,0,0,7404,7397,1,0,0,
0,7404,7398,1,0,0,0,7404,7400,1,0,0,0,7404,7401,1,0,0,0,7404,7402,1,0,0,
0,7405,699,1,0,0,0,7406,7407,5,1126,0,0,7407,7414,5,1126,0,0,7408,7409,5,
1125,0,0,7409,7414,5,1125,0,0,7410,7414,5,1130,0,0,7411,7414,5,1131,0,0,
7412,7414,5,1129,0,0,7413,7406,1,0,0,0,7413,7408,1,0,0,0,7413,7410,1,0,0,
0,7413,7411,1,0,0,0,7413,7412,1,0,0,0,7414,701,1,0,0,0,7415,7416,7,135,0,
0,7416,703,1,0,0,0,7417,7418,7,136,0,0,7418,705,1,0,0,0,7419,7420,5,1121,
0,0,7420,7425,5,1125,0,0,7421,7422,5,1121,0,0,7422,7423,5,1125,0,0,7423,
7425,5,1125,0,0,7424,7419,1,0,0,0,7424,7421,1,0,0,0,7425,707,1,0,0,0,7426,
7427,7,137,0,0,7427,709,1,0,0,0,7428,7429,7,138,0,0,7429,711,1,0,0,0,7430,
7431,7,139,0,0,7431,713,1,0,0,0,7432,7433,7,140,0,0,7433,715,1,0,0,0,7434,
7435,7,141,0,0,7435,717,1,0,0,0,7436,7437,7,142,0,0,7437,719,1,0,0,0,7438,
7439,7,143,0,0,7439,721,1,0,0,0,1085,723,727,734,737,740,742,748,751,754,
763,805,820,831,848,853,865,892,901,906,912,917,921,930,933,936,940,947,
950,955,963,968,973,976,978,990,993,997,1000,1004,1007,1011,1014,1017,1021,
1024,1028,1034,1040,1046,1053,1060,1063,1067,1072,1078,1087,1092,1097,1104,
1121,1128,1132,1142,1146,1150,1154,1158,1163,1166,1169,1172,1175,1181,1185,
1191,1196,1199,1202,1204,1215,1219,1222,1236,1239,1243,1246,1250,1253,1257,
1260,1264,1267,1270,1274,1277,1281,1287,1300,1306,1317,1322,1330,1338,1343,
1346,1351,1359,1364,1370,1375,1379,1381,1384,1388,1392,1395,1399,1403,1407,
1413,1416,1423,1428,1434,1441,1447,1455,1458,1465,1468,1470,1476,1482,1499,
1506,1513,1525,1530,1533,1536,1549,1562,1567,1583,1591,1601,1604,1607,1613,
1617,1620,1631,1634,1639,1652,1659,1666,1668,1675,1679,1681,1686,1689,1695,
1700,1702,1706,1709,1712,1718,1723,1725,1730,1737,1739,1746,1751,1755,1758,
1766,1774,1776,1786,1790,1793,1799,1804,1807,1813,1816,1820,1823,1827,1832,
1837,1842,1846,1850,1854,1858,1862,1866,1871,1876,1881,1887,1892,1897,1902,
1907,1912,1918,1923,1928,1933,1938,1943,1948,1953,1960,1965,1970,1975,1979,
1984,1992,1997,2003,2015,2022,2024,2032,2037,2040,2048,2054,2058,2071,2083,
2085,2088,2096,2102,2108,2121,2128,2137,2142,2153,2162,2167,2179,2186,2195,
2200,2212,2219,2228,2233,2240,2249,2254,2256,2261,2269,2278,2282,2285,2289,
2294,2300,2306,2311,2316,2321,2326,2329,2334,2339,2349,2353,2360,2365,2368,
2373,2376,2380,2384,2392,2411,2414,2417,2421,2431,2444,2451,2454,2459,2466,
2469,2472,2483,2486,2490,2498,2501,2506,2514,2520,2524,2528,2533,2538,2545,
2549,2560,2568,2571,2577,2583,2585,2590,2593,2599,2605,2607,2611,2614,2617,
2623,2629,2632,2638,2644,2646,2651,2659,2661,2670,2673,2676,2681,2683,2692,
2695,2698,2703,2705,2714,2719,2727,2731,2739,2749,2754,2761,2765,2769,2788,
2798,2804,2821,2825,2835,2840,2843,2852,2863,2871,2877,2887,2899,2906,2913,
2928,2941,2947,2953,2959,2965,2971,2977,2982,2989,2996,3003,3008,3011,3013,
3027,3034,3041,3047,3051,3055,3062,3065,3070,3077,3084,3088,3093,3100,3113,
3116,3121,3126,3130,3136,3145,3154,3163,3166,3170,3179,3183,3186,3189,3195,
3198,3202,3205,3209,3212,3220,3223,3234,3237,3242,3245,3250,3260,3265,3271,
3273,3279,3281,3287,3295,3300,3308,3311,3316,3319,3324,3332,3340,3346,3354,
3359,3367,3370,3374,3377,3385,3391,3400,3403,3407,3411,3415,3420,3424,3428,
3430,3433,3436,3439,3445,3449,3452,3455,3458,3461,3468,3470,3474,3479,3485,
3490,3497,3503,3508,3511,3517,3521,3529,3533,3536,3539,3544,3547,3554,3558,
3561,3565,3569,3572,3575,3580,3586,3590,3600,3606,3610,3616,3620,3626,3629,
3641,3645,3649,3657,3661,3669,3672,3676,3679,3687,3692,3695,3698,3702,3705,
3714,3719,3728,3733,3740,3747,3755,3761,3769,3772,3775,3782,3785,3792,3795,
3803,3809,3820,3823,3827,3833,3842,3847,3851,3857,3863,3865,3869,3878,3888,
3898,3904,3909,3913,3916,3919,3922,3925,3931,3937,3940,3943,3946,3949,3952,
3954,3960,3966,3969,3972,3975,3978,3982,3988,3992,4000,4004,4007,4009,4022,
4025,4032,4042,4045,4050,4052,4056,4064,4070,4079,4092,4096,4102,4111,4114,
4118,4121,4125,4129,4132,4134,4142,4154,4160,4162,4168,4170,4172,4178,4186,
4194,4198,4202,4211,4216,4236,4241,4247,4254,4259,4268,4271,4275,4279,4283,
4286,4289,4292,4296,4300,4303,4306,4309,4316,4320,4335,4339,4351,4359,4369,
4373,4376,4382,4385,4388,4397,4406,4416,4420,4430,4440,4448,4451,4460,4463,
4467,4472,4476,4485,4488,4519,4522,4525,4581,4586,4614,4628,4635,4639,4645,
4653,4655,4666,4676,4683,4689,4697,4702,4710,4718,4726,4734,4740,4745,4750,
4755,4761,4763,4774,4779,4786,4788,4802,4808,4813,4818,4824,4831,4839,4847,
4852,4858,4861,4869,4876,4885,4888,4905,4913,4921,4925,4932,4938,4946,4955,
4961,4968,4975,4980,4983,4985,4991,4993,4997,4999,5006,5011,5015,5021,5030,
5036,5043,5049,5055,5060,5063,5065,5071,5073,5077,5079,5086,5088,5093,5100,
5109,5114,5123,5130,5135,5138,5140,5146,5148,5151,5159,5164,5169,5173,5179,
5184,5188,5194,5196,5207,5210,5217,5220,5232,5238,5247,5256,5261,5270,5276,
5287,5293,5298,5302,5308,5313,5317,5320,5332,5339,5344,5374,5378,5383,5390,
5393,5399,5409,5419,5429,5435,5444,5450,5457,5459,5469,5473,5477,5487,5492,
5564,5582,5590,5602,5609,5611,5621,5624,5632,5639,5643,5650,5655,5658,5661,
5670,5674,5678,5701,5708,5712,5719,5726,5729,5745,5748,5758,5762,5768,5771,
5776,5780,5787,5790,5796,5820,5823,5835,5838,5848,5856,5860,5867,5870,5879,
5885,5891,5901,5903,5909,5912,5915,5927,5930,5936,5939,5947,5955,5961,5965,
5979,5991,5998,6001,6008,6015,6020,6033,6044,6050,6055,6068,6070,6075,6079,
6082,6084,6091,6098,6101,6104,6110,6114,6120,6126,6139,6144,6152,6155,6160,
6165,6173,6176,6184,6188,6195,6201,6204,6208,6221,6227,6239,6242,6251,6256,
6262,6268,6273,6275,6278,6282,6284,6288,6294,6297,6300,6306,6315,6323,6327,
6332,6352,6359,6361,6368,6370,6374,6379,6390,6395,6401,6404,6408,6413,6416,
6420,6424,6426,6431,6436,6449,6452,6456,6459,6462,6467,6472,6478,6481,6486,
6489,6494,6497,6501,6506,6511,6516,6521,6524,6529,6534,6539,6545,6550,6555,
6560,6564,6567,6572,6576,6580,6588,6595,6599,6604,6609,6613,6615,6618,6634,
6643,6651,6659,6668,6678,6686,6694,6702,6710,6722,6729,6739,6744,6747,6752,
6755,6759,6774,6782,6789,6794,6799,6833,6837,6845,6849,6858,6866,6871,6879,
6884,6889,6891,6900,6905,6913,6918,6926,6934,6937,6947,6965,6968,6971,6975,
6988,6996,7000,7005,7010,7016,7021,7025,7030,7035,7040,7050,7053,7057,7061,
7068,7072,7101,7109,7112,7115,7118,7121,7132,7146,7155,7182,7193,7200,7204,
7211,7219,7224,7232,7244,7257,7263,7269,7285,7291,7300,7302,7324,7336,7353,
7374,7376,7395,7404,7413,7424];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class MySqlParser extends antlr4.Parser {

    static grammarFileName = "MySqlParser.g4";
    static literalNames = [ null, null, null, null, null, "'ADD'", "'ALL'", 
                            "'ALTER'", "'ALWAYS'", "'ANALYZE'", "'AND'", 
                            "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", "'BEFORE'", 
                            "'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", 
                            "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", 
                            "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
                            "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", 
                            "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
                            "'CURRENT_ROLE'", "'CURRENT_USER'", "'CURSOR'", 
                            "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", 
                            "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", 
                            "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", 
                            "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
                            "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ENFORCED'", 
                            "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", 
                            "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", 
                            "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", 
                            "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
                            "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", 
                            "'IF'", "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", 
                            "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", 
                            "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", 
                            "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LATERAL'", 
                            "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", 
                            "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", 
                            "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", 
                            "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'", 
                            "'MATCH'", "'MAXVALUE'", "'MINVALUE'", "'MODIFIES'", 
                            "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
                            "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", 
                            "'OPTION'", "'OPTIONAL'", "'OPTIONALLY'", "'OR'", 
                            "'ORDER'", "'OUT'", "'OUTER'", "'OUTFILE'", 
                            "'OVER'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", 
                            "'PURGE'", "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", 
                            "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", 
                            "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", 
                            "'RETAIN'", "'RETURN'", "'REVOKE'", "'RIGHT'", 
                            "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", 
                            "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", 
                            "'SKIP'", "'SKIP_QUERY_REWRITE'", "'SPATIAL'", 
                            "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", 
                            "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
                            "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", 
                            "'STARTING'", "'STATEMENT'", "'STRAIGHT_JOIN'", 
                            "'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", 
                            "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", 
                            "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", 
                            "'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", 
                            "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", 
                            "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
                            "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", 
                            "'INT2'", "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", 
                            "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
                            "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", 
                            "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", 
                            "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
                            "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
                            "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", 
                            "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", 
                            "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", 
                            "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", 
                            "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
                            "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", 
                            "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'", 
                            "'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", 
                            "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_DEPTH'", 
                            "'JSON_EXTRACT'", "'JSON_INSERT'", "'JSON_KEYS'", 
                            "'JSON_LENGTH'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
                            "'JSON_MERGE_PRESERVE'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", 
                            "'JSON_OVERLAPS'", "'JSON_PRETTY'", "'JSON_QUOTE'", 
                            "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", 
                            "'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_SEARCH'", 
                            "'JSON_SET'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", 
                            "'JSON_TABLE'", "'JSON_TYPE'", "'JSON_UNQUOTE'", 
                            "'JSON_VALID'", "'JSON_VALUE'", "'NESTED'", 
                            "'ORDINALITY'", "'PATH'", "'AVG'", "'BIT_AND'", 
                            "'BIT_OR'", "'BIT_XOR'", "'COUNT'", "'CUME_DIST'", 
                            "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", 
                            "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", 
                            "'MIN'", "'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", 
                            "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", 
                            "'STDDEV_POP'", "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", 
                            "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
                            "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", 
                            "'CURDATE'", "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", 
                            "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", 
                            "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
                            "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
                            "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
                            "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
                            "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", 
                            "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'", 
                            "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
                            "'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", 
                            "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
                            "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
                            "'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", 
                            "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", 
                            "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", 
                            "'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", 
                            "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", 
                            "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
                            "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", 
                            "'COPY'", "'CPU'", "'CYCLE'", "'CURSOR_NAME'", 
                            "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
                            "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", 
                            "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'", 
                            "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
                            "'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", "'ENCRYPTION_KEY_ID'", 
                            "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
                            "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", 
                            "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'", 
                            "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", 
                            "'EXTENT_SIZE'", "'FAILED_LOGIN_ATTEMPTS'", 
                            "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
                            "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", 
                            "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", 
                            "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", 
                            "'GROUP_REPLICATION'", "'HANDLER'", "'HASH'", 
                            "'HELP'", "'HISTORY'", "'HOST'", "'HOSTS'", 
                            "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", 
                            "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", 
                            "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", 
                            "'INSTANCE'", "'INSTANT'", "'INVISIBLE'", "'INVOKER'", 
                            "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", 
                            "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", 
                            "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", 
                            "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
                            "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
                            "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", 
                            "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
                            "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", 
                            "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", 
                            "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", 
                            "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", 
                            "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
                            "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", 
                            "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", 
                            "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", 
                            "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", 
                            "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", 
                            "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
                            "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
                            "'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", 
                            "'NOMAXVALUE'", "'NOMINVALUE'", "'NOWAIT'", 
                            "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", 
                            "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", 
                            "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
                            "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", 
                            "'PAGE_COMPRESSED'", "'PAGE_COMPRESSION_LEVEL'", 
                            "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", 
                            "'PASSWORD'", "'PASSWORD_LOCK_TIME'", "'PHASE'", 
                            "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", 
                            "'PRECEDES'", "'PRECEDING'", "'PREPARE'", "'PRESERVE'", 
                            "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", 
                            "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'", 
                            "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", 
                            "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
                            "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", 
                            "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", 
                            "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'", 
                            "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
                            "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", 
                            "'REPLICATION'", "'RESET'", "'RESTART'", "'RESUME'", 
                            "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'", 
                            "'REUSE'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", 
                            "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", 
                            "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
                            "'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", 
                            "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'", 
                            "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", 
                            "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
                            "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", 
                            "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
                            "'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", 
                            "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'", 
                            "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
                            "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", 
                            "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", 
                            "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
                            "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", 
                            "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", 
                            "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", 
                            "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", 
                            "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
                            "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", 
                            "'USER_RESOURCES'", "'VALIDATION'", "'VALUE'", 
                            "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", 
                            "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", 
                            "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'", 
                            "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", 
                            "'INTERNAL'", "'QUARTER'", "'MONTH'", "'DAY'", 
                            "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
                            "'MICROSECOND'", "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", 
                            "'AUDIT_ABORT_EXEMPT'", "'AUDIT_ADMIN'", "'AUTHENTICATION_POLICY_ADMIN'", 
                            "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
                            "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", 
                            "'EXECUTE'", "'FILE'", "'FIREWALL_ADMIN'", "'FIREWALL_EXEMPT'", 
                            "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", 
                            "'FLUSH_STATUS'", "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", 
                            "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
                            "'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", "'LAMBDA'", 
                            "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", 
                            "'PERSIST_RO_VARIABLES_ADMIN'", "'PRIVILEGES'", 
                            "'PROCESS'", "'RELOAD'", "'REPLICATION_APPLIER'", 
                            "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", 
                            "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'ROUTINE'", 
                            "'S3'", "'SERVICE_CONNECTION_ADMIN'", null, 
                            "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SHUTDOWN'", 
                            "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLES'", 
                            "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", 
                            "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
                            "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", 
                            "'CP1257'", "'CP850'", "'CP852'", "'CP866'", 
                            "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", 
                            "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", 
                            "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", 
                            "'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", 
                            "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'", 
                            "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", 
                            "'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", 
                            "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
                            "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
                            "'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", 
                            "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'", 
                            "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
                            "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", 
                            "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
                            "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", 
                            "'POLYGON'", "'ABS'", "'ACOS'", "'ADDDATE'", 
                            "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
                            "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", 
                            "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
                            "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", 
                            "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
                            "'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", 
                            "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", "'CATALOG_NAME'", 
                            "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
                            "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", 
                            "'COLLATION'", "'COMPRESS'", "'CONCAT'", "'CONCAT_WS'", 
                            "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
                            "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
                            "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", 
                            "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
                            "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", 
                            "'DAYOFWEEK'", "'DAYOFYEAR'", "'DECODE'", "'DEGREES'", 
                            "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
                            "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", 
                            "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", "'ENVELOPE'", 
                            "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
                            "'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", 
                            "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'", 
                            "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
                            "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
                            "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
                            "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
                            "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", 
                            "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
                            "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
                            "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", 
                            "'INSTR'", "'INTERIORRINGN'", "'INTERSECTS'", 
                            "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", 
                            "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", 
                            "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'", 
                            "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", 
                            "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
                            "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", 
                            "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", 
                            "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
                            "'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", 
                            "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", 
                            "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
                            "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
                            "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", 
                            "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
                            "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", 
                            "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", 
                            "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
                            "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", 
                            "'OCT'", "'OCTET_LENGTH'", "'ORD'", "'OVERLAPS'", 
                            "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
                            "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", 
                            "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
                            "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", 
                            "'RAND'", "'RANDOM'", "'RANDOM_BYTES'", "'RELEASE_LOCK'", 
                            "'REVERSE'", "'ROUND'", "'ROW_COUNT'", "'RPAD'", 
                            "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
                            "'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", 
                            "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", 
                            "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
                            "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", 
                            "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
                            "'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", 
                            "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'", 
                            "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", 
                            "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", 
                            "'ST_EQUALS'", "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", 
                            "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
                            "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
                            "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", 
                            "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", 
                            "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
                            "'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", 
                            "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", 
                            "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                            "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", 
                            "'ST_NUMINTERIORRINGS'", "'ST_NUMPOINTS'", "'ST_OVERLAPS'", 
                            "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", "'ST_POINTN'", 
                            "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
                            "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", 
                            "'ST_SYMDIFFERENCE'", "'ST_TOUCHES'", "'ST_UNION'", 
                            "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
                            "'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", 
                            "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", 
                            "'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", 
                            "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", 
                            "'TP_CONNECTION_ADMIN'", "'UCASE'", "'UNCOMPRESS'", 
                            "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", 
                            "'UPDATEXML'", "'UPPER'", "'UUID'", "'UUID_SHORT'", 
                            "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", 
                            "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", 
                            "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", 
                            "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", 
                            "'-='", "'*='", "'/='", "'%='", "'&='", "'^='", 
                            "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", 
                            "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", 
                            "'|'", "'&'", "'^'", "'.'", "'('", "')'", "','", 
                            "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", 
                            "'`'", "':'" ];
    static symbolicNames = [ null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                             "LINE_COMMENT", "ADD", "ALL", "ALTER", "ALWAYS", 
                             "ANALYZE", "AND", "ARRAY", "AS", "ASC", "ATTRIBUTE", 
                             "BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", 
                             "CALL", "CASCADE", "CASE", "CAST", "CHANGE", 
                             "CHARACTER", "CHECK", "COLLATE", "COLUMN", 
                             "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
                             "CREATE", "CROSS", "CURRENT", "CURRENT_ROLE", 
                             "CURRENT_USER", "CURSOR", "DATABASE", "DATABASES", 
                             "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
                             "DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", 
                             "DISTINCT", "DISTINCTROW", "DROP", "EACH", 
                             "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ENFORCED", 
                             "ESCAPED", "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", 
                             "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
                             "FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", 
                             "GROUP", "HAVING", "HIGH_PRIORITY", "HISTOGRAM", 
                             "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", 
                             "INNER", "INOUT", "INSERT", "INTERVAL", "INTO", 
                             "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", 
                             "LATERAL", "LEADING", "LEAVE", "LEFT", "LIKE", 
                             "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", 
                             "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
                             "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", 
                             "MINVALUE", "MODIFIES", "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", 
                             "NULL_LITERAL", "NUMBER", "ON", "OPTIMIZE", 
                             "OPTION", "OPTIONAL", "OPTIONALLY", "OR", "ORDER", 
                             "OUT", "OUTER", "OUTFILE", "OVER", "PARTITION", 
                             "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", 
                             "READS", "REFERENCES", "REGEXP", "RELEASE", 
                             "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", 
                             "RESTRICT", "RETAIN", "RETURN", "REVOKE", "RIGHT", 
                             "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", 
                             "SEPARATOR", "SHOW", "SIGNAL", "SKIP_", "SKIP_QUERY_REWRITE", 
                             "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
                             "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                             "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
                             "STATEMENT", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
                             "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", 
                             "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", 
                             "UPDATE", "USAGE", "USE", "USING", "VALUES", 
                             "WHEN", "WHERE", "WHILE", "WITH", "WRITE", 
                             "XOR", "ZEROFILL", "TINYINT", "SMALLINT", "MEDIUMINT", 
                             "MIDDLEINT", "INT", "INT1", "INT2", "INT3", 
                             "INT4", "INT8", "INTEGER", "BIGINT", "REAL", 
                             "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", "FLOAT8", 
                             "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", 
                             "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", 
                             "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
                             "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", 
                             "TINYTEXT", "TEXT", "MEDIUMTEXT", "LONGTEXT", 
                             "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
                             "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", 
                             "HOUR_SECOND", "MINUTE_SECOND", "SECOND_MICROSECOND", 
                             "MINUTE_MICROSECOND", "HOUR_MICROSECOND", "DAY_MICROSECOND", 
                             "JSON_ARRAY", "JSON_ARRAYAGG", "JSON_ARRAY_APPEND", 
                             "JSON_ARRAY_INSERT", "JSON_CONTAINS", "JSON_CONTAINS_PATH", 
                             "JSON_DEPTH", "JSON_EXTRACT", "JSON_INSERT", 
                             "JSON_KEYS", "JSON_LENGTH", "JSON_MERGE", "JSON_MERGE_PATCH", 
                             "JSON_MERGE_PRESERVE", "JSON_OBJECT", "JSON_OBJECTAGG", 
                             "JSON_OVERLAPS", "JSON_PRETTY", "JSON_QUOTE", 
                             "JSON_REMOVE", "JSON_REPLACE", "JSON_SCHEMA_VALID", 
                             "JSON_SCHEMA_VALIDATION_REPORT", "JSON_SEARCH", 
                             "JSON_SET", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", 
                             "JSON_TABLE", "JSON_TYPE", "JSON_UNQUOTE", 
                             "JSON_VALID", "JSON_VALUE", "NESTED", "ORDINALITY", 
                             "PATH", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
                             "COUNT", "CUME_DIST", "DENSE_RANK", "FIRST_VALUE", 
                             "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
                             "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", 
                             "RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", 
                             "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
                             "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", 
                             "CURRENT_TIMESTAMP", "LOCALTIME", "CURDATE", 
                             "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", 
                             "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
                             "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
                             "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", 
                             "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", 
                             "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
                             "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", 
                             "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
                             "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
                             "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", 
                             "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", 
                             "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
                             "COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", 
                             "COMPLETION", "COMPRESSED", "COMPRESSION", 
                             "CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", 
                             "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
                             "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
                             "COPY", "CPU", "CYCLE", "CURSOR_NAME", "DATA", 
                             "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", 
                             "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
                             "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", 
                             "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTED", 
                             "ENCRYPTION", "ENCRYPTION_KEY_ID", "END", "ENDS", 
                             "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
                             "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", 
                             "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", 
                             "EXTENT_SIZE", "FAILED_LOGIN_ATTEMPTS", "FAST", 
                             "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", 
                             "FIRST", "FIXED", "FLUSH", "FOLLOWING", "FOLLOWS", 
                             "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", 
                             "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH", 
                             "HELP", "HISTORY", "HOST", "HOSTS", "IDENTIFIED", 
                             "IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", 
                             "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
                             "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", 
                             "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
                             "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", 
                             "LAST", "LEAVES", "LESS", "LEVEL", "LIST", 
                             "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION", 
                             "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", 
                             "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
                             "MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", 
                             "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH", 
                             "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", 
                             "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
                             "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
                             "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", 
                             "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
                             "MEDIUM", "MEMBER", "MERGE", "MESSAGE_TEXT", 
                             "MID", "MIGRATE", "MIN_ROWS", "MODE", "MODIFY", 
                             "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", 
                             "NCHAR", "NEVER", "NEXT", "NO", "NOCACHE", 
                             "NOCOPY", "NOCYCLE", "NOMAXVALUE", "NOMINVALUE", 
                             "NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", 
                             "OFFSET", "OF", "OJ", "OLD_PASSWORD", "ONE", 
                             "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
                             "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PAGE_COMPRESSED", 
                             "PAGE_COMPRESSION_LEVEL", "PARSER", "PARTIAL", 
                             "PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", 
                             "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
                             "PORT", "PRECEDES", "PRECEDING", "PREPARE", 
                             "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", 
                             "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", 
                             "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", 
                             "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
                             "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", 
                             "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
                             "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", 
                             "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
                             "REPLICATION", "RESET", "RESTART", "RESUME", 
                             "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
                             "REUSE", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", 
                             "ROW", "ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", 
                             "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", 
                             "SESSION", "SHARE", "SHARED", "SIGNED", "SIMPLE", 
                             "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", 
                             "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
                             "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", 
                             "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", 
                             "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
                             "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
                             "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT", 
                             "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
                             "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", 
                             "TABLE_TYPE", "TEMPORARY", "TEMPTABLE", "THAN", 
                             "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", 
                             "TRIGGERS", "TRUNCATE", "UNBOUNDED", "UNDEFINED", 
                             "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", 
                             "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", 
                             "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
                             "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
                             "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", 
                             "XA", "XML", "YES", "EUR", "USA", "JIS", "ISO", 
                             "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", 
                             "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
                             "ADMIN", "APPLICATION_PASSWORD_ADMIN", "AUDIT_ABORT_EXEMPT", 
                             "AUDIT_ADMIN", "AUTHENTICATION_POLICY_ADMIN", 
                             "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
                             "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
                             "EXECUTE", "FILE", "FIREWALL_ADMIN", "FIREWALL_EXEMPT", 
                             "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
                             "FLUSH_TABLES", "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", 
                             "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", 
                             "INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", 
                             "PERSIST_RO_VARIABLES_ADMIN", "PRIVILEGES", 
                             "PROCESS", "RELOAD", "REPLICATION_APPLIER", 
                             "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
                             "RESOURCE_GROUP_USER", "ROLE_ADMIN", "ROUTINE", 
                             "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
                             "SET_USER_ID", "SHOW_ROUTINE", "SHUTDOWN", 
                             "SUPER", "SYSTEM_VARIABLES_ADMIN", "TABLES", 
                             "TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", 
                             "XA_RECOVER_ADMIN", "ARMSCII8", "ASCII", "BIG5", 
                             "CP1250", "CP1251", "CP1256", "CP1257", "CP850", 
                             "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
                             "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", 
                             "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
                             "KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", 
                             "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620", 
                             "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
                             "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", 
                             "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
                             "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
                             "TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", 
                             "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION", 
                             "GEOMETRY", "LINESTRING", "MULTILINESTRING", 
                             "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                             "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                             "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", 
                             "ASTEXT", "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", 
                             "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
                             "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", 
                             "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", "BIT_LENGTH", 
                             "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
                             "CENTROID", "CHARACTER_LENGTH", "CHARSET", 
                             "CHAR_LENGTH", "COERCIBILITY", "COLLATION", 
                             "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
                             "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", 
                             "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
                             "CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", 
                             "DATEDIFF", "DATE_FORMAT", "DAYNAME", "DAYOFMONTH", 
                             "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
                             "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", 
                             "DISJOINT", "ELT", "ENCODE", "ENCRYPT", "ENDPOINT", 
                             "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
                             "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", 
                             "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", 
                             "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
                             "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
                             "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", 
                             "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", 
                             "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                             "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                             "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", 
                             "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", 
                             "INTERIORRINGN", "INTERSECTS", "ISCLOSED", 
                             "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
                             "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                             "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", 
                             "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", 
                             "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", 
                             "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", 
                             "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", 
                             "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                             "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                             "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", 
                             "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", 
                             "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
                             "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                             "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", 
                             "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", 
                             "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", 
                             "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                             "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                             "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                             "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                             "POLYGONFROMWKB", "POW", "POWER", "QUOTE", 
                             "RADIANS", "RAND", "RANDOM", "RANDOM_BYTES", 
                             "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
                             "RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", 
                             "SESSION_USER", "SHA", "SHA1", "SHA2", "SCHEMA_NAME", 
                             "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
                             "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", 
                             "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
                             "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
                             "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", 
                             "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", 
                             "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", 
                             "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
                             "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                             "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
                             "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
                             "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", 
                             "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
                             "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
                             "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", 
                             "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
                             "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
                             "ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", 
                             "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
                             "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", 
                             "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", 
                             "ST_TOUCHES", "ST_UNION", "ST_WITHIN", "ST_X", 
                             "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", 
                             "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", 
                             "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
                             "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", 
                             "TP_CONNECTION_ADMIN", "UCASE", "UNCOMPRESS", 
                             "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", 
                             "UPDATEXML", "UPPER", "UUID", "UUID_SHORT", 
                             "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
                             "WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", 
                             "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN", 
                             "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
                             "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
                             "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", 
                             "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
                             "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
                             "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", 
                             "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", 
                             "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", 
                             "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
                             "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", 
                             "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
                             "STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", 
                             "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING", 
                             "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", 
                             "HOST_IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", 
                             "ERROR_RECONGNIGION" ];
    static ruleNames = [ "root", "sqlStatements", "sqlStatement", "emptyStatement_", 
                         "ddlStatement", "dmlStatement", "transactionStatement", 
                         "replicationStatement", "preparedStatement", "compoundStatement", 
                         "administrationStatement", "utilityStatement", 
                         "createDatabase", "createEvent", "createIndex", 
                         "createLogfileGroup", "createProcedure", "createFunction", 
                         "createRole", "createServer", "createTable", "createTablespaceInnodb", 
                         "createTablespaceNdb", "createTrigger", "withClause", 
                         "commonTableExpressions", "cteName", "cteColumnName", 
                         "createView", "createDatabaseOption", "charSet", 
                         "currentUserExpression", "ownerStatement", "scheduleExpression", 
                         "timestampValue", "intervalExpr", "intervalType", 
                         "enableType", "indexType", "indexOption", "procedureParameter", 
                         "functionParameter", "routineOption", "serverOption", 
                         "createDefinitions", "createDefinition", "columnDefinition", 
                         "columnConstraint", "tableConstraint", "referenceDefinition", 
                         "referenceAction", "referenceControlType", "indexColumnDefinition", 
                         "tableOption", "tableType", "tablespaceStorage", 
                         "partitionDefinitions", "partitionFunctionDefinition", 
                         "subpartitionFunctionDefinition", "partitionDefinition", 
                         "partitionDefinerAtom", "partitionDefinerVector", 
                         "subpartitionDefinition", "partitionOption", "alterDatabase", 
                         "alterEvent", "alterFunction", "alterInstance", 
                         "alterLogfileGroup", "alterProcedure", "alterServer", 
                         "alterTable", "alterTablespace", "alterView", "alterSpecification", 
                         "alterPartitionSpecification", "dropDatabase", 
                         "dropEvent", "dropIndex", "dropLogfileGroup", "dropProcedure", 
                         "dropFunction", "dropServer", "dropTable", "dropTablespace", 
                         "dropTrigger", "dropView", "dropRole", "setRole", 
                         "renameTable", "renameTableClause", "truncateTable", 
                         "callStatement", "deleteStatement", "doStatement", 
                         "handlerStatement", "insertStatement", "loadDataStatement", 
                         "loadXmlStatement", "replaceStatement", "selectStatement", 
                         "updateStatement", "valuesStatement", "insertStatementValue", 
                         "updatedElement", "assignmentField", "lockClause", 
                         "singleDeleteStatement", "multipleDeleteStatement", 
                         "handlerOpenStatement", "handlerReadIndexStatement", 
                         "handlerReadStatement", "handlerCloseStatement", 
                         "singleUpdateStatement", "multipleUpdateStatement", 
                         "orderByClause", "orderByExpression", "tableSources", 
                         "tableSource", "tableSourceItem", "indexHint", 
                         "indexHintType", "joinPart", "joinSpec", "queryExpression", 
                         "queryExpressionNointo", "querySpecification", 
                         "querySpecificationNointo", "unionParenthesis", 
                         "unionStatement", "lateralStatement", "jsonTable", 
                         "jsonColumnList", "jsonColumn", "jsonOnEmpty", 
                         "jsonOnError", "selectSpec", "selectElements", 
                         "selectElement", "selectIntoExpression", "selectFieldsInto", 
                         "selectLinesInto", "fromClause", "groupByClause", 
                         "havingClause", "windowClause", "groupByItem", 
                         "limitClause", "limitClauseAtom", "startTransaction", 
                         "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
                         "rollbackStatement", "releaseStatement", "lockTables", 
                         "unlockTables", "setAutocommitStatement", "setTransactionStatement", 
                         "transactionMode", "lockTableElement", "lockAction", 
                         "transactionOption", "transactionLevel", "changeMaster", 
                         "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
                         "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
                         "stopGroupReplication", "masterOption", "stringMasterOption", 
                         "decimalMasterOption", "boolMasterOption", "channelOption", 
                         "replicationFilter", "tablePair", "threadType", 
                         "untilOption", "connectionOption", "gtuidSet", 
                         "xaStartTransaction", "xaEndTransaction", "xaPrepareStatement", 
                         "xaCommitWork", "xaRollbackWork", "xaRecoverWork", 
                         "prepareStatement", "executeStatement", "deallocatePrepare", 
                         "routineBody", "blockStatement", "caseStatement", 
                         "ifStatement", "iterateStatement", "leaveStatement", 
                         "loopStatement", "repeatStatement", "returnStatement", 
                         "whileStatement", "cursorStatement", "declareVariable", 
                         "declareCondition", "declareCursor", "declareHandler", 
                         "handlerConditionValue", "procedureSqlStatement", 
                         "caseAlternative", "elifAlternative", "alterUser", 
                         "createUser", "dropUser", "grantStatement", "roleOption", 
                         "grantProxy", "renameUser", "revokeStatement", 
                         "revokeProxy", "setPasswordStatement", "userSpecification", 
                         "userAuthOption", "authOptionClause", "authenticationRule", 
                         "tlsOption", "userResourceOption", "userPasswordOption", 
                         "userLockOption", "privelegeClause", "privilege", 
                         "privilegeLevel", "renameUserClause", "analyzeTable", 
                         "checkTable", "checksumTable", "optimizeTable", 
                         "repairTable", "checkTableOption", "createUdfunction", 
                         "installPlugin", "uninstallPlugin", "setStatement", 
                         "showStatement", "variableClause", "showCommonEntity", 
                         "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
                         "showProfileType", "binlogStatement", "cacheIndexStatement", 
                         "flushStatement", "killStatement", "loadIndexIntoCache", 
                         "resetStatement", "shutdownStatement", "tableIndexes", 
                         "flushOption", "flushTableOption", "loadedTableIndexes", 
                         "simpleDescribeStatement", "fullDescribeStatement", 
                         "helpStatement", "useStatement", "signalStatement", 
                         "resignalStatement", "signalConditionInformation", 
                         "withStatement", "tableStatement", "diagnosticsStatement", 
                         "diagnosticsConditionInformationName", "describeObjectClause", 
                         "fullId", "tableName", "roleName", "fullColumnName", 
                         "indexColumnName", "simpleUserName", "hostName", 
                         "userName", "mysqlVariable", "charsetName", "collationName", 
                         "engineName", "engineNameBase", "uuidSet", "xid", 
                         "xuidStringId", "authPlugin", "uid", "simpleId", 
                         "dottedId", "decimalLiteral", "fileSizeLiteral", 
                         "stringLiteral", "booleanLiteral", "hexadecimalLiteral", 
                         "nullNotnull", "constant", "dataType", "collectionOptions", 
                         "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
                         "lengthTwoOptionalDimension", "uidList", "fullColumnNameList", 
                         "tables", "indexColumnNames", "expressions", "expressionsWithDefaults", 
                         "constants", "simpleStrings", "userVariables", 
                         "defaultValue", "currentTimestamp", "expressionOrDefault", 
                         "ifExists", "ifNotExists", "orReplace", "waitNowaitClause", 
                         "functionCall", "specificFunction", "caseFuncAlternative", 
                         "levelsInWeightString", "levelInWeightListElement", 
                         "aggregateWindowedFunction", "nonAggregateWindowedFunction", 
                         "overClause", "windowSpec", "windowName", "frameClause", 
                         "frameUnits", "frameExtent", "frameBetween", "frameRange", 
                         "partitionClause", "scalarFunctionName", "passwordFunctionClause", 
                         "functionArgs", "functionArg", "expression", "predicate", 
                         "expressionAtom", "unaryOperator", "comparisonOperator", 
                         "logicalOperator", "bitOperator", "multOperator", 
                         "addOperator", "jsonOperator", "charsetNameBase", 
                         "transactionLevelBase", "privilegesBase", "intervalTypeBase", 
                         "dataTypeBase", "keywordsCanBeId", "functionNameBase" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = MySqlParser.ruleNames;
        this.literalNames = MySqlParser.literalNames;
        this.symbolicNames = MySqlParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 344:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 345:
    	    		return this.predicate_sempred(localctx, predIndex);
    	case 346:
    	    		return this.expressionAtom_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 3);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    predicate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 8);
    		case 2:
    			return this.precpred(this._ctx, 6);
    		case 3:
    			return this.precpred(this._ctx, 5);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 10);
    		case 6:
    			return this.precpred(this._ctx, 9);
    		case 7:
    			return this.precpred(this._ctx, 7);
    		case 8:
    			return this.precpred(this._ctx, 4);
    		case 9:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expressionAtom_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 4);
    		case 11:
    			return this.precpred(this._ctx, 3);
    		case 12:
    			return this.precpred(this._ctx, 2);
    		case 13:
    			return this.precpred(this._ctx, 1);
    		case 14:
    			return this.precpred(this._ctx, 14);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	root() {
	    let localctx = new RootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, MySqlParser.RULE_root);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 723;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 84935296) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 537147393) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 2151694339) !== 0) || ((((_la - 103)) & ~0x1f) === 0 && ((1 << (_la - 103)) & 536936449) !== 0) || ((((_la - 138)) & ~0x1f) === 0 && ((1 << (_la - 138)) & 442923) !== 0) || ((((_la - 172)) & ~0x1f) === 0 && ((1 << (_la - 172)) & 1135617) !== 0) || ((((_la - 344)) & ~0x1f) === 0 && ((1 << (_la - 344)) & 33558659) !== 0) || _la===390 || _la===399 || ((((_la - 432)) & ~0x1f) === 0 && ((1 << (_la - 432)) & 16782337) !== 0) || ((((_la - 560)) & ~0x1f) === 0 && ((1 << (_la - 560)) & 537919489) !== 0) || _la===597 || _la===604 || ((((_la - 629)) & ~0x1f) === 0 && ((1 << (_la - 629)) & 134217793) !== 0) || _la===661 || _la===681 || _la===708 || _la===739 || _la===1133 || _la===1136) {
	            this.state = 722;
	            this.sqlStatements();
	        }

	        this.state = 727;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1121) {
	            this.state = 725;
	            this.match(MySqlParser.MINUS);
	            this.state = 726;
	            this.match(MySqlParser.MINUS);
	        }

	        this.state = 729;
	        this.match(MySqlParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatements() {
	    let localctx = new SqlStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, MySqlParser.RULE_sqlStatements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 742;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,5,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 740;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 7:
	                case 9:
	                case 20:
	                case 24:
	                case 26:
	                case 33:
	                case 44:
	                case 45:
	                case 46:
	                case 51:
	                case 62:
	                case 71:
	                case 72:
	                case 85:
	                case 93:
	                case 102:
	                case 103:
	                case 119:
	                case 132:
	                case 138:
	                case 139:
	                case 141:
	                case 143:
	                case 147:
	                case 152:
	                case 153:
	                case 155:
	                case 156:
	                case 172:
	                case 182:
	                case 184:
	                case 186:
	                case 188:
	                case 192:
	                case 344:
	                case 345:
	                case 351:
	                case 356:
	                case 369:
	                case 390:
	                case 399:
	                case 432:
	                case 442:
	                case 444:
	                case 456:
	                case 560:
	                case 580:
	                case 589:
	                case 597:
	                case 604:
	                case 629:
	                case 635:
	                case 656:
	                case 661:
	                case 681:
	                case 708:
	                case 739:
	                case 1133:
	                    this.state = 731;
	                    this.sqlStatement();
	                    this.state = 734;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===1121) {
	                        this.state = 732;
	                        this.match(MySqlParser.MINUS);
	                        this.state = 733;
	                        this.match(MySqlParser.MINUS);
	                    }

	                    this.state = 737;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	                    if(la_===1) {
	                        this.state = 736;
	                        this.match(MySqlParser.SEMI);

	                    }
	                    break;
	                case 1136:
	                    this.state = 739;
	                    this.emptyStatement_();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 744;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,5,this._ctx);
	        }

	        this.state = 754;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 9:
	        case 20:
	        case 24:
	        case 26:
	        case 33:
	        case 44:
	        case 45:
	        case 46:
	        case 51:
	        case 62:
	        case 71:
	        case 72:
	        case 85:
	        case 93:
	        case 102:
	        case 103:
	        case 119:
	        case 132:
	        case 138:
	        case 139:
	        case 141:
	        case 143:
	        case 147:
	        case 152:
	        case 153:
	        case 155:
	        case 156:
	        case 172:
	        case 182:
	        case 184:
	        case 186:
	        case 188:
	        case 192:
	        case 344:
	        case 345:
	        case 351:
	        case 356:
	        case 369:
	        case 390:
	        case 399:
	        case 432:
	        case 442:
	        case 444:
	        case 456:
	        case 560:
	        case 580:
	        case 589:
	        case 597:
	        case 604:
	        case 629:
	        case 635:
	        case 656:
	        case 661:
	        case 681:
	        case 708:
	        case 739:
	        case 1133:
	            this.state = 745;
	            this.sqlStatement();
	            this.state = 751;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	            if(la_===1) {
	                this.state = 748;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===1121) {
	                    this.state = 746;
	                    this.match(MySqlParser.MINUS);
	                    this.state = 747;
	                    this.match(MySqlParser.MINUS);
	                }

	                this.state = 750;
	                this.match(MySqlParser.SEMI);

	            }
	            break;
	        case 1136:
	            this.state = 753;
	            this.emptyStatement_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlStatement() {
	    let localctx = new SqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, MySqlParser.RULE_sqlStatement);
	    try {
	        this.state = 763;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 756;
	            this.ddlStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 757;
	            this.dmlStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 758;
	            this.transactionStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 759;
	            this.replicationStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 760;
	            this.preparedStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 761;
	            this.administrationStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 762;
	            this.utilityStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, MySqlParser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.match(MySqlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ddlStatement() {
	    let localctx = new DdlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, MySqlParser.RULE_ddlStatement);
	    try {
	        this.state = 805;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 767;
	            this.createDatabase();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 768;
	            this.createEvent();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 769;
	            this.createIndex();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 770;
	            this.createLogfileGroup();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 771;
	            this.createProcedure();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 772;
	            this.createFunction();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 773;
	            this.createServer();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 774;
	            this.createTable();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 775;
	            this.createTablespaceInnodb();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 776;
	            this.createTablespaceNdb();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 777;
	            this.createTrigger();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 778;
	            this.createView();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 779;
	            this.createRole();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 780;
	            this.alterDatabase();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 781;
	            this.alterEvent();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 782;
	            this.alterFunction();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 783;
	            this.alterInstance();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 784;
	            this.alterLogfileGroup();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 785;
	            this.alterProcedure();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 786;
	            this.alterServer();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 787;
	            this.alterTable();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 788;
	            this.alterTablespace();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 789;
	            this.alterView();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 790;
	            this.dropDatabase();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 791;
	            this.dropEvent();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 792;
	            this.dropIndex();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 793;
	            this.dropLogfileGroup();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 794;
	            this.dropProcedure();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 795;
	            this.dropFunction();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 796;
	            this.dropServer();
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 797;
	            this.dropTable();
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 798;
	            this.dropTablespace();
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 799;
	            this.dropTrigger();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 800;
	            this.dropView();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 801;
	            this.dropRole();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 802;
	            this.setRole();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 803;
	            this.renameTable();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 804;
	            this.truncateTable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dmlStatement() {
	    let localctx = new DmlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, MySqlParser.RULE_dmlStatement);
	    try {
	        this.state = 820;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 807;
	            this.selectStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 808;
	            this.insertStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 809;
	            this.updateStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 810;
	            this.deleteStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 811;
	            this.replaceStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 812;
	            this.callStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 813;
	            this.loadDataStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 814;
	            this.loadXmlStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 815;
	            this.doStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 816;
	            this.handlerStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 817;
	            this.valuesStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 818;
	            this.withStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 819;
	            this.tableStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionStatement() {
	    let localctx = new TransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, MySqlParser.RULE_transactionStatement);
	    try {
	        this.state = 831;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 822;
	            this.startTransaction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 823;
	            this.beginWork();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 824;
	            this.commitWork();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 825;
	            this.rollbackWork();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 826;
	            this.savepointStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 827;
	            this.rollbackStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 828;
	            this.releaseStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 829;
	            this.lockTables();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 830;
	            this.unlockTables();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationStatement() {
	    let localctx = new ReplicationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, MySqlParser.RULE_replicationStatement);
	    try {
	        this.state = 848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 833;
	            this.changeMaster();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 834;
	            this.changeReplicationFilter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 835;
	            this.purgeBinaryLogs();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 836;
	            this.resetMaster();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 837;
	            this.resetSlave();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 838;
	            this.startSlave();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 839;
	            this.stopSlave();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 840;
	            this.startGroupReplication();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 841;
	            this.stopGroupReplication();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 842;
	            this.xaStartTransaction();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 843;
	            this.xaEndTransaction();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 844;
	            this.xaPrepareStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 845;
	            this.xaCommitWork();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 846;
	            this.xaRollbackWork();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 847;
	            this.xaRecoverWork();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preparedStatement() {
	    let localctx = new PreparedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, MySqlParser.RULE_preparedStatement);
	    try {
	        this.state = 853;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 560:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 850;
	            this.prepareStatement();
	            break;
	        case 708:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 851;
	            this.executeStatement();
	            break;
	        case 51:
	        case 390:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 852;
	            this.deallocatePrepare();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, MySqlParser.RULE_compoundStatement);
	    try {
	        this.state = 865;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 855;
	            this.blockStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 856;
	            this.caseStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 857;
	            this.ifStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 858;
	            this.leaveStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 859;
	            this.loopStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 860;
	            this.repeatStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 861;
	            this.whileStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 862;
	            this.iterateStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 863;
	            this.returnStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 864;
	            this.cursorStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	administrationStatement() {
	    let localctx = new AdministrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, MySqlParser.RULE_administrationStatement);
	    try {
	        this.state = 892;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 867;
	            this.alterUser();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 868;
	            this.createUser();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 869;
	            this.dropUser();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 870;
	            this.grantStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 871;
	            this.grantProxy();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 872;
	            this.renameUser();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 873;
	            this.revokeStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 874;
	            this.revokeProxy();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 875;
	            this.analyzeTable();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 876;
	            this.checkTable();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 877;
	            this.checksumTable();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 878;
	            this.optimizeTable();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 879;
	            this.repairTable();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 880;
	            this.createUdfunction();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 881;
	            this.installPlugin();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 882;
	            this.uninstallPlugin();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 883;
	            this.setStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 884;
	            this.showStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 885;
	            this.binlogStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 886;
	            this.cacheIndexStatement();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 887;
	            this.flushStatement();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 888;
	            this.killStatement();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 889;
	            this.loadIndexIntoCache();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 890;
	            this.resetStatement();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 891;
	            this.shutdownStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	utilityStatement() {
	    let localctx = new UtilityStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, MySqlParser.RULE_utilityStatement);
	    try {
	        this.state = 901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 894;
	            this.simpleDescribeStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 895;
	            this.fullDescribeStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 896;
	            this.helpStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 897;
	            this.useStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 898;
	            this.signalStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 899;
	            this.resignalStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 900;
	            this.diagnosticsStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabase() {
	    let localctx = new CreateDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, MySqlParser.RULE_createDatabase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        this.match(MySqlParser.CREATE);
	        this.state = 904;
	        localctx.dbFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===150)) {
	            localctx.dbFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 906;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 905;
	            this.ifNotExists();

	        }
	        this.state = 908;
	        this.uid();
	        this.state = 912;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la===134 || _la===222 || _la===405 || _la===841) {
	            this.state = 909;
	            this.createDatabaseOption();
	            this.state = 914;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createEvent() {
	    let localctx = new CreateEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, MySqlParser.RULE_createEvent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 915;
	        this.match(MySqlParser.CREATE);
	        this.state = 917;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===392) {
	            this.state = 916;
	            this.ownerStatement();
	        }

	        this.state = 919;
	        this.match(MySqlParser.EVENT);
	        this.state = 921;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        if(la_===1) {
	            this.state = 920;
	            this.ifNotExists();

	        }
	        this.state = 923;
	        this.fullId();
	        this.state = 924;
	        this.match(MySqlParser.ON);
	        this.state = 925;
	        this.match(MySqlParser.SCHEDULE);
	        this.state = 926;
	        this.scheduleExpression();
	        this.state = 933;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 927;
	            this.match(MySqlParser.ON);
	            this.state = 928;
	            this.match(MySqlParser.COMPLETION);
	            this.state = 930;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 929;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 932;
	            this.match(MySqlParser.PRESERVE);
	        }

	        this.state = 936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===396 || _la===403) {
	            this.state = 935;
	            this.enableType();
	        }

	        this.state = 940;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 938;
	            this.match(MySqlParser.COMMENT);
	            this.state = 939;
	            this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 942;
	        this.match(MySqlParser.DO);
	        this.state = 943;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndex() {
	    let localctx = new CreateIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, MySqlParser.RULE_createIndex);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 945;
	        this.match(MySqlParser.CREATE);
	        this.state = 947;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===531 || _la===537) {
	            this.state = 946;
	            localctx.intimeAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===531 || _la===537)) {
	                localctx.intimeAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69 || _la===159 || _la===181) {
	            this.state = 949;
	            localctx.indexCategory = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===69 || _la===159 || _la===181)) {
	                localctx.indexCategory = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 952;
	        this.match(MySqlParser.INDEX);
	        this.state = 953;
	        this.uid();
	        this.state = 955;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===187) {
	            this.state = 954;
	            this.indexType();
	        }

	        this.state = 957;
	        this.match(MySqlParser.ON);
	        this.state = 958;
	        this.tableName();
	        this.state = 959;
	        this.indexColumnNames();
	        this.state = 963;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 960;
	                this.indexOption(); 
	            }
	            this.state = 965;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	        this.state = 978;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 976;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 336:
	                    this.state = 966;
	                    this.match(MySqlParser.ALGORITHM);
	                    this.state = 968;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===1124) {
	                        this.state = 967;
	                        this.match(MySqlParser.EQUAL_SYMBOL);
	                    }

	                    this.state = 970;
	                    localctx.algType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===42 || _la===384 || _la===454)) {
	                        localctx.algType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                case 103:
	                    this.state = 971;
	                    this.match(MySqlParser.LOCK);
	                    this.state = 973;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===1124) {
	                        this.state = 972;
	                        this.match(MySqlParser.EQUAL_SYMBOL);
	                    }

	                    this.state = 975;
	                    localctx.lockType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===42 || _la===419 || _la===529 || _la===611)) {
	                        localctx.lockType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 980;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createLogfileGroup() {
	    let localctx = new CreateLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, MySqlParser.RULE_createLogfileGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 981;
	        this.match(MySqlParser.CREATE);
	        this.state = 982;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 983;
	        this.match(MySqlParser.GROUP);
	        this.state = 984;
	        this.uid();
	        this.state = 985;
	        this.match(MySqlParser.ADD);
	        this.state = 986;
	        this.match(MySqlParser.UNDOFILE);
	        this.state = 987;
	        localctx.undoFile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===453) {
	            this.state = 988;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 990;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 989;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 992;
	            localctx.initSize = this.fileSizeLiteral();
	        }

	        this.state = 1000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===660) {
	            this.state = 995;
	            this.match(MySqlParser.UNDO_BUFFER_SIZE);
	            this.state = 997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 996;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 999;
	            localctx.undoSize = this.fileSizeLiteral();
	        }

	        this.state = 1007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===572) {
	            this.state = 1002;
	            this.match(MySqlParser.REDO_BUFFER_SIZE);
	            this.state = 1004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1003;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1006;
	            localctx.redoSize = this.fileSizeLiteral();
	        }

	        this.state = 1014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===528) {
	            this.state = 1009;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 1011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1010;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1013;
	            this.uid();
	        }

	        this.state = 1017;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===674) {
	            this.state = 1016;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 1024;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 1019;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1021;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1020;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1023;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 1026;
	        this.match(MySqlParser.ENGINE);
	        this.state = 1028;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1124) {
	            this.state = 1027;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 1030;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createProcedure() {
	    let localctx = new CreateProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, MySqlParser.RULE_createProcedure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1032;
	        this.match(MySqlParser.CREATE);
	        this.state = 1034;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===392) {
	            this.state = 1033;
	            this.ownerStatement();
	        }

	        this.state = 1036;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 1037;
	        this.fullId();
	        this.state = 1038;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1040;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18880721) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172658065) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 1039;
	            this.procedureParameter();
	        }

	        this.state = 1046;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 1042;
	            this.match(MySqlParser.COMMA);
	            this.state = 1043;
	            this.procedureParameter();
	            this.state = 1048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1049;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 1053;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1050;
	                this.routineOption(); 
	            }
	            this.state = 1055;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
	        }

	        this.state = 1056;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunction() {
	    let localctx = new CreateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, MySqlParser.RULE_createFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1058;
	        this.match(MySqlParser.CREATE);
	        this.state = 1060;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===392) {
	            this.state = 1059;
	            this.ownerStatement();
	        }

	        this.state = 1063;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===335) {
	            this.state = 1062;
	            this.match(MySqlParser.AGGREGATE);
	        }

	        this.state = 1065;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 1067;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        if(la_===1) {
	            this.state = 1066;
	            this.ifNotExists();

	        }
	        this.state = 1069;
	        this.fullId();
	        this.state = 1070;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1072;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 1071;
	            this.functionParameter();
	        }

	        this.state = 1078;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 1074;
	            this.match(MySqlParser.COMMA);
	            this.state = 1075;
	            this.functionParameter();
	            this.state = 1080;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1081;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 1082;
	        this.match(MySqlParser.RETURNS);
	        this.state = 1083;
	        this.dataType();
	        this.state = 1087;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,55,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1084;
	                this.routineOption(); 
	            }
	            this.state = 1089;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,55,this._ctx);
	        }

	        this.state = 1092;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 7:
	        case 9:
	        case 11:
	        case 14:
	        case 18:
	        case 20:
	        case 24:
	        case 26:
	        case 29:
	        case 33:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 44:
	        case 45:
	        case 46:
	        case 48:
	        case 51:
	        case 55:
	        case 57:
	        case 59:
	        case 62:
	        case 71:
	        case 72:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 93:
	        case 94:
	        case 97:
	        case 102:
	        case 103:
	        case 117:
	        case 119:
	        case 121:
	        case 124:
	        case 130:
	        case 132:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 143:
	        case 147:
	        case 148:
	        case 150:
	        case 152:
	        case 153:
	        case 155:
	        case 156:
	        case 158:
	        case 168:
	        case 172:
	        case 182:
	        case 184:
	        case 186:
	        case 188:
	        case 192:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1133:
	        case 1145:
	        case 1148:
	        case 1156:
	            this.state = 1090;
	            this.routineBody();
	            break;
	        case 146:
	            this.state = 1091;
	            this.returnStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRole() {
	    let localctx = new CreateRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, MySqlParser.RULE_createRole);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1094;
	        this.match(MySqlParser.CREATE);
	        this.state = 1095;
	        this.match(MySqlParser.ROLE);
	        this.state = 1097;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        if(la_===1) {
	            this.state = 1096;
	            this.ifNotExists();

	        }
	        this.state = 1099;
	        this.roleName();
	        this.state = 1104;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 1100;
	            this.match(MySqlParser.COMMA);
	            this.state = 1101;
	            this.roleName();
	            this.state = 1106;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createServer() {
	    let localctx = new CreateServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, MySqlParser.RULE_createServer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1107;
	        this.match(MySqlParser.CREATE);
	        this.state = 1108;
	        this.match(MySqlParser.SERVER);
	        this.state = 1109;
	        this.uid();
	        this.state = 1110;
	        this.match(MySqlParser.FOREIGN);
	        this.state = 1111;
	        this.match(MySqlParser.DATA);
	        this.state = 1112;
	        this.match(MySqlParser.WRAPPER);
	        this.state = 1113;
	        localctx.wrapperName = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===514 || _la===1148)) {
	            localctx.wrapperName = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1114;
	        this.match(MySqlParser.OPTIONS);
	        this.state = 1115;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1116;
	        this.serverOption();
	        this.state = 1121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 1117;
	            this.match(MySqlParser.COMMA);
	            this.state = 1118;
	            this.serverOption();
	            this.state = 1123;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1124;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTable() {
	    let localctx = new CreateTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, MySqlParser.RULE_createTable);
	    var _la = 0;
	    try {
	        this.state = 1204;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CopyCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1126;
	            this.match(MySqlParser.CREATE);
	            this.state = 1128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===649) {
	                this.state = 1127;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 1130;
	            this.match(MySqlParser.TABLE);
	            this.state = 1132;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            if(la_===1) {
	                this.state = 1131;
	                this.ifNotExists();

	            }
	            this.state = 1134;
	            this.tableName();
	            this.state = 1142;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 98:
	                this.state = 1135;
	                this.match(MySqlParser.LIKE);
	                this.state = 1136;
	                this.tableName();
	                break;
	            case 1133:
	                this.state = 1137;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 1138;
	                this.match(MySqlParser.LIKE);
	                this.state = 1139;
	                localctx.parenthesisTable = this.tableName();
	                this.state = 1140;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            localctx = new QueryCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1144;
	            this.match(MySqlParser.CREATE);
	            this.state = 1146;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===649) {
	                this.state = 1145;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 1148;
	            this.match(MySqlParser.TABLE);
	            this.state = 1150;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            if(la_===1) {
	                this.state = 1149;
	                this.ifNotExists();

	            }
	            this.state = 1152;
	            this.tableName();
	            this.state = 1154;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	            if(la_===1) {
	                this.state = 1153;
	                this.createDefinitions();

	            }
	            this.state = 1166;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la===81 || _la===180 || _la===222 || ((((_la - 341)) & ~0x1f) === 0 && ((1 << (_la - 341)) & 134316039) !== 0) || ((((_la - 373)) & ~0x1f) === 0 && ((1 << (_la - 373)) & 1081353) !== 0) || ((((_la - 405)) & ~0x1f) === 0 && ((1 << (_la - 405)) & 19) !== 0) || _la===455 || _la===467 || _la===500 || _la===510 || ((((_la - 543)) & ~0x1f) === 0 && ((1 << (_la - 543)) & 269) !== 0) || ((((_la - 602)) & ~0x1f) === 0 && ((1 << (_la - 602)) & 3892314113) !== 0) || ((((_la - 636)) & ~0x1f) === 0 && ((1 << (_la - 636)) & 268289) !== 0) || _la===841 || _la===875 || _la===1000 || _la===1148) {
	                this.state = 1156;
	                this.tableOption();
	                this.state = 1163;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la===81 || _la===180 || _la===222 || ((((_la - 341)) & ~0x1f) === 0 && ((1 << (_la - 341)) & 134316039) !== 0) || ((((_la - 373)) & ~0x1f) === 0 && ((1 << (_la - 373)) & 1081353) !== 0) || ((((_la - 405)) & ~0x1f) === 0 && ((1 << (_la - 405)) & 19) !== 0) || _la===455 || _la===467 || _la===500 || _la===510 || ((((_la - 543)) & ~0x1f) === 0 && ((1 << (_la - 543)) & 269) !== 0) || ((((_la - 602)) & ~0x1f) === 0 && ((1 << (_la - 602)) & 3892314113) !== 0) || ((((_la - 636)) & ~0x1f) === 0 && ((1 << (_la - 636)) & 268289) !== 0) || _la===841 || _la===875 || _la===1000 || _la===1135 || _la===1148) {
	                    this.state = 1158;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===1135) {
	                        this.state = 1157;
	                        this.match(MySqlParser.COMMA);
	                    }

	                    this.state = 1160;
	                    this.tableOption();
	                    this.state = 1165;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1169;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===129) {
	                this.state = 1168;
	                this.partitionDefinitions();
	            }

	            this.state = 1172;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===78 || _la===141) {
	                this.state = 1171;
	                localctx.keyViolate = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===78 || _la===141)) {
	                    localctx.keyViolate = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1175;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 1174;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 1177;
	            this.selectStatement();
	            break;

	        case 3:
	            localctx = new ColumnCreateTableContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1179;
	            this.match(MySqlParser.CREATE);
	            this.state = 1181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===649) {
	                this.state = 1180;
	                this.match(MySqlParser.TEMPORARY);
	            }

	            this.state = 1183;
	            this.match(MySqlParser.TABLE);
	            this.state = 1185;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	            if(la_===1) {
	                this.state = 1184;
	                this.ifNotExists();

	            }
	            this.state = 1187;
	            this.tableName();
	            this.state = 1188;
	            this.createDefinitions();
	            this.state = 1199;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	            if(la_===1) {
	                this.state = 1189;
	                this.tableOption();
	                this.state = 1196;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1191;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===1135) {
	                            this.state = 1190;
	                            this.match(MySqlParser.COMMA);
	                        }

	                        this.state = 1193;
	                        this.tableOption(); 
	                    }
	                    this.state = 1198;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	                }


	            }
	            this.state = 1202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===129) {
	                this.state = 1201;
	                this.partitionDefinitions();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTablespaceInnodb() {
	    let localctx = new CreateTablespaceInnodbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, MySqlParser.RULE_createTablespaceInnodb);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1206;
	        this.match(MySqlParser.CREATE);
	        this.state = 1207;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 1208;
	        this.uid();
	        this.state = 1209;
	        this.match(MySqlParser.ADD);
	        this.state = 1210;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 1211;
	        localctx.datafile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 1215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===428) {
	            this.state = 1212;
	            this.match(MySqlParser.FILE_BLOCK_SIZE);
	            this.state = 1213;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 1214;
	            localctx.fileBlockSize = this.fileSizeLiteral();
	        }

	        this.state = 1222;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===409) {
	            this.state = 1217;
	            this.match(MySqlParser.ENGINE);
	            this.state = 1219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1218;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1221;
	            this.engineName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTablespaceNdb() {
	    let localctx = new CreateTablespaceNdbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, MySqlParser.RULE_createTablespaceNdb);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1224;
	        this.match(MySqlParser.CREATE);
	        this.state = 1225;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 1226;
	        this.uid();
	        this.state = 1227;
	        this.match(MySqlParser.ADD);
	        this.state = 1228;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 1229;
	        localctx.datafile = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 1230;
	        this.match(MySqlParser.USE);
	        this.state = 1231;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 1232;
	        this.match(MySqlParser.GROUP);
	        this.state = 1233;
	        this.uid();
	        this.state = 1239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===423) {
	            this.state = 1234;
	            this.match(MySqlParser.EXTENT_SIZE);
	            this.state = 1236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1235;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1238;
	            localctx.extentSize = this.fileSizeLiteral();
	        }

	        this.state = 1246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===453) {
	            this.state = 1241;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 1243;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1242;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1245;
	            localctx.initialSize = this.fileSizeLiteral();
	        }

	        this.state = 1253;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===341) {
	            this.state = 1248;
	            this.match(MySqlParser.AUTOEXTEND_SIZE);
	            this.state = 1250;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1249;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1252;
	            localctx.autoextendSize = this.fileSizeLiteral();
	        }

	        this.state = 1260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===501) {
	            this.state = 1255;
	            this.match(MySqlParser.MAX_SIZE);
	            this.state = 1257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1256;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1259;
	            localctx.maxSize = this.fileSizeLiteral();
	        }

	        this.state = 1267;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===528) {
	            this.state = 1262;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1263;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1266;
	            this.uid();
	        }

	        this.state = 1270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===674) {
	            this.state = 1269;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 1277;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 1272;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1273;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1276;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 1279;
	        this.match(MySqlParser.ENGINE);
	        this.state = 1281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1124) {
	            this.state = 1280;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 1283;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTrigger() {
	    let localctx = new CreateTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, MySqlParser.RULE_createTrigger);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1285;
	        this.match(MySqlParser.CREATE);
	        this.state = 1287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===392) {
	            this.state = 1286;
	            this.ownerStatement();
	        }

	        this.state = 1289;
	        this.match(MySqlParser.TRIGGER);
	        this.state = 1290;
	        localctx.thisTrigger = this.fullId();
	        this.state = 1291;
	        localctx.triggerTime = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===15 || _la===334)) {
	            localctx.triggerTime = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1292;
	        localctx.triggerEvent = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===44 || _la===85 || _la===184)) {
	            localctx.triggerEvent = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1293;
	        this.match(MySqlParser.ON);
	        this.state = 1294;
	        this.tableName();
	        this.state = 1295;
	        this.match(MySqlParser.FOR);
	        this.state = 1296;
	        this.match(MySqlParser.EACH);
	        this.state = 1297;
	        this.match(MySqlParser.ROW);
	        this.state = 1300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        if(la_===1) {
	            this.state = 1298;
	            localctx.triggerPlace = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===434 || _la===558)) {
	                localctx.triggerPlace = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1299;
	            localctx.otherTrigger = this.fullId();

	        }
	        this.state = 1302;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClause() {
	    let localctx = new WithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, MySqlParser.RULE_withClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1304;
	        this.match(MySqlParser.WITH);
	        this.state = 1306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        if(la_===1) {
	            this.state = 1305;
	            this.match(MySqlParser.RECURSIVE);

	        }
	        this.state = 1308;
	        this.commonTableExpressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonTableExpressions() {
	    let localctx = new CommonTableExpressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, MySqlParser.RULE_commonTableExpressions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310;
	        this.cteName();
	        this.state = 1322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1133) {
	            this.state = 1311;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1312;
	            this.cteColumnName();
	            this.state = 1317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 1313;
	                this.match(MySqlParser.COMMA);
	                this.state = 1314;
	                this.cteColumnName();
	                this.state = 1319;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1320;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 1324;
	        this.match(MySqlParser.AS);
	        this.state = 1325;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1326;
	        this.dmlStatement();
	        this.state = 1327;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 1330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        if(la_===1) {
	            this.state = 1328;
	            this.match(MySqlParser.COMMA);
	            this.state = 1329;
	            this.commonTableExpressions();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cteName() {
	    let localctx = new CteNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, MySqlParser.RULE_cteName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cteColumnName() {
	    let localctx = new CteColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, MySqlParser.RULE_cteColumnName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1334;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createView() {
	    let localctx = new CreateViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, MySqlParser.RULE_createView);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this.match(MySqlParser.CREATE);
	        this.state = 1338;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===123) {
	            this.state = 1337;
	            this.orReplace();
	        }

	        this.state = 1343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===336) {
	            this.state = 1340;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 1341;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 1342;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===506 || _la===650 || _la===658)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===392) {
	            this.state = 1345;
	            this.ownerStatement();
	        }

	        this.state = 1351;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===160) {
	            this.state = 1348;
	            this.match(MySqlParser.SQL);
	            this.state = 1349;
	            this.match(MySqlParser.SECURITY);
	            this.state = 1350;
	            localctx.secContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===392 || _la===460)) {
	                localctx.secContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1353;
	        this.match(MySqlParser.VIEW);
	        this.state = 1354;
	        this.fullId();
	        this.state = 1359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1133) {
	            this.state = 1355;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1356;
	            this.uidList();
	            this.state = 1357;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 1361;
	        this.match(MySqlParser.AS);
	        this.state = 1381;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1362;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1364;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===192) {
	                this.state = 1363;
	                this.withClause();
	            }

	            this.state = 1366;
	            this.selectStatement();
	            this.state = 1367;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.state = 1370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===192) {
	                this.state = 1369;
	                this.withClause();
	            }

	            this.state = 1372;
	            this.selectStatement();
	            this.state = 1379;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	            if(la_===1) {
	                this.state = 1373;
	                this.match(MySqlParser.WITH);
	                this.state = 1375;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===352 || _la===474) {
	                    this.state = 1374;
	                    localctx.checkOption = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===352 || _la===474)) {
	                        localctx.checkOption = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 1377;
	                this.match(MySqlParser.CHECK);
	                this.state = 1378;
	                this.match(MySqlParser.OPTION);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabaseOption() {
	    let localctx = new CreateDatabaseOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, MySqlParser.RULE_createDatabaseOption);
	    var _la = 0;
	    try {
	        this.state = 1416;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 1383;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1386;
	            this.charSet();
	            this.state = 1388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1387;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1392;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 226:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 1145:
	            case 1148:
	                this.state = 1390;
	                this.charsetName();
	                break;
	            case 42:
	                this.state = 1391;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 1394;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1397;
	            this.match(MySqlParser.COLLATE);
	            this.state = 1399;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1398;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1401;
	            this.collationName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 1402;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1405;
	            this.match(MySqlParser.ENCRYPTION);
	            this.state = 1407;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1406;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1409;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1410;
	            this.match(MySqlParser.READ);
	            this.state = 1411;
	            this.match(MySqlParser.ONLY);
	            this.state = 1413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1412;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1415;
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===1138 || _la===1139)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charSet() {
	    let localctx = new CharSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, MySqlParser.RULE_charSet);
	    try {
	        this.state = 1423;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1418;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 1419;
	            this.match(MySqlParser.SET);
	            break;
	        case 841:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1420;
	            this.match(MySqlParser.CHARSET);
	            break;
	        case 222:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1421;
	            this.match(MySqlParser.CHAR);
	            this.state = 1422;
	            this.match(MySqlParser.SET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currentUserExpression() {
	    let localctx = new CurrentUserExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, MySqlParser.RULE_currentUserExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1425;
	        this.match(MySqlParser.CURRENT_USER);
	        this.state = 1428;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        if(la_===1) {
	            this.state = 1426;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1427;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ownerStatement() {
	    let localctx = new OwnerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, MySqlParser.RULE_ownerStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430;
	        this.match(MySqlParser.DEFINER);
	        this.state = 1431;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 1434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1432;
	            this.userName();
	            break;

	        case 2:
	            this.state = 1433;
	            this.currentUserExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scheduleExpression() {
	    let localctx = new ScheduleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, MySqlParser.RULE_scheduleExpression);
	    var _la = 0;
	    try {
	        this.state = 1470;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 338:
	            localctx = new PreciseScheduleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1436;
	            this.match(MySqlParser.AT);
	            this.state = 1437;
	            this.timestampValue();
	            this.state = 1441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1120) {
	                this.state = 1438;
	                this.intervalExpr();
	                this.state = 1443;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 417:
	            localctx = new IntervalScheduleContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1444;
	            this.match(MySqlParser.EVERY);
	            this.state = 1447;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1445;
	                this.decimalLiteral();
	                break;

	            case 2:
	                this.state = 1446;
	                this.expression(0);
	                break;

	            }
	            this.state = 1449;
	            this.intervalType();
	            this.state = 1458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===630) {
	                this.state = 1450;
	                this.match(MySqlParser.STARTS);
	                this.state = 1451;
	                localctx.startTimestamp = this.timestampValue();
	                this.state = 1455;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1120) {
	                    this.state = 1452;
	                    localctx._intervalExpr = this.intervalExpr();
	                    localctx.startIntervals.push(localctx._intervalExpr);
	                    this.state = 1457;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 1468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===408) {
	                this.state = 1460;
	                this.match(MySqlParser.ENDS);
	                this.state = 1461;
	                localctx.endTimestamp = this.timestampValue();
	                this.state = 1465;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1120) {
	                    this.state = 1462;
	                    localctx._intervalExpr = this.intervalExpr();
	                    localctx.endIntervals.push(localctx._intervalExpr);
	                    this.state = 1467;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timestampValue() {
	    let localctx = new TimestampValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, MySqlParser.RULE_timestampValue);
	    try {
	        this.state = 1476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1472;
	            this.match(MySqlParser.CURRENT_TIMESTAMP);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1473;
	            this.stringLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1474;
	            this.decimalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1475;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalExpr() {
	    let localctx = new IntervalExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, MySqlParser.RULE_intervalExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1478;
	        this.match(MySqlParser.PLUS);
	        this.state = 1479;
	        this.match(MySqlParser.INTERVAL);
	        this.state = 1482;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1480;
	            this.decimalLiteral();
	            break;

	        case 2:
	            this.state = 1481;
	            this.expression(0);
	            break;

	        }
	        this.state = 1484;
	        this.intervalType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalType() {
	    let localctx = new IntervalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, MySqlParser.RULE_intervalType);
	    try {
	        this.state = 1499;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1486;
	            this.intervalTypeBase();
	            break;
	        case 221:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1487;
	            this.match(MySqlParser.YEAR);
	            break;
	        case 240:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1488;
	            this.match(MySqlParser.YEAR_MONTH);
	            break;
	        case 241:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1489;
	            this.match(MySqlParser.DAY_HOUR);
	            break;
	        case 242:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1490;
	            this.match(MySqlParser.DAY_MINUTE);
	            break;
	        case 243:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1491;
	            this.match(MySqlParser.DAY_SECOND);
	            break;
	        case 244:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1492;
	            this.match(MySqlParser.HOUR_MINUTE);
	            break;
	        case 245:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1493;
	            this.match(MySqlParser.HOUR_SECOND);
	            break;
	        case 246:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1494;
	            this.match(MySqlParser.MINUTE_SECOND);
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1495;
	            this.match(MySqlParser.SECOND_MICROSECOND);
	            break;
	        case 248:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1496;
	            this.match(MySqlParser.MINUTE_MICROSECOND);
	            break;
	        case 249:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1497;
	            this.match(MySqlParser.HOUR_MICROSECOND);
	            break;
	        case 250:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1498;
	            this.match(MySqlParser.DAY_MICROSECOND);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enableType() {
	    let localctx = new EnableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, MySqlParser.RULE_enableType);
	    try {
	        this.state = 1506;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1501;
	            this.match(MySqlParser.ENABLE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1502;
	            this.match(MySqlParser.DISABLE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1503;
	            this.match(MySqlParser.DISABLE);
	            this.state = 1504;
	            this.match(MySqlParser.ON);
	            this.state = 1505;
	            this.match(MySqlParser.SLAVE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexType() {
	    let localctx = new IndexTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, MySqlParser.RULE_indexType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1508;
	        this.match(MySqlParser.USING);
	        this.state = 1509;
	        _la = this._input.LA(1);
	        if(!(_la===350 || _la===443)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexOption() {
	    let localctx = new IndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, MySqlParser.RULE_indexOption);
	    var _la = 0;
	    try {
	        this.state = 1533;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 467:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1511;
	            this.match(MySqlParser.KEY_BLOCK_SIZE);
	            this.state = 1513;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1512;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1515;
	            this.fileSizeLiteral();
	            break;
	        case 187:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1516;
	            this.indexType();
	            break;
	        case 192:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1517;
	            this.match(MySqlParser.WITH);
	            this.state = 1518;
	            this.match(MySqlParser.PARSER);
	            this.state = 1519;
	            this.uid();
	            break;
	        case 368:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1520;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1521;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 459:
	        case 673:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1522;
	            _la = this._input.LA(1);
	            if(!(_la===459 || _la===673)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 875:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1523;
	            this.match(MySqlParser.ENGINE_ATTRIBUTE);
	            this.state = 1525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1524;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1527;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 1000:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1528;
	            this.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE);
	            this.state = 1530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1529;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1532;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureParameter() {
	    let localctx = new ProcedureParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, MySqlParser.RULE_procedureParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80 || _la===84 || _la===125) {
	            this.state = 1535;
	            localctx.direction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===80 || _la===84 || _la===125)) {
	                localctx.direction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1538;
	        this.uid();
	        this.state = 1539;
	        this.dataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParameter() {
	    let localctx = new FunctionParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, MySqlParser.RULE_functionParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1541;
	        this.uid();
	        this.state = 1542;
	        this.dataType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineOption() {
	    let localctx = new RoutineOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, MySqlParser.RULE_routineOption);
	    var _la = 0;
	    try {
	        this.state = 1567;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 368:
	            localctx = new RoutineCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1544;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1545;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 468:
	            localctx = new RoutineLanguageContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1546;
	            this.match(MySqlParser.LANGUAGE);
	            this.state = 1547;
	            this.match(MySqlParser.SQL);
	            break;
	        case 47:
	        case 114:
	            localctx = new RoutineBehaviorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1549;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 1548;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 1551;
	            this.match(MySqlParser.DETERMINISTIC);
	            break;
	        case 112:
	        case 135:
	        case 381:
	        case 521:
	            localctx = new RoutineDataContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1562;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 381:
	                this.state = 1552;
	                this.match(MySqlParser.CONTAINS);
	                this.state = 1553;
	                this.match(MySqlParser.SQL);
	                break;
	            case 521:
	                this.state = 1554;
	                this.match(MySqlParser.NO);
	                this.state = 1555;
	                this.match(MySqlParser.SQL);
	                break;
	            case 135:
	                this.state = 1556;
	                this.match(MySqlParser.READS);
	                this.state = 1557;
	                this.match(MySqlParser.SQL);
	                this.state = 1558;
	                this.match(MySqlParser.DATA);
	                break;
	            case 112:
	                this.state = 1559;
	                this.match(MySqlParser.MODIFIES);
	                this.state = 1560;
	                this.match(MySqlParser.SQL);
	                this.state = 1561;
	                this.match(MySqlParser.DATA);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 160:
	            localctx = new RoutineSecurityContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1564;
	            this.match(MySqlParser.SQL);
	            this.state = 1565;
	            this.match(MySqlParser.SECURITY);
	            this.state = 1566;
	            localctx.context = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===392 || _la===460)) {
	                localctx.context = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serverOption() {
	    let localctx = new ServerOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, MySqlParser.RULE_serverOption);
	    try {
	        this.state = 1583;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 446:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1569;
	            this.match(MySqlParser.HOST);
	            this.state = 1570;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1571;
	            this.match(MySqlParser.DATABASE);
	            this.state = 1572;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 665:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1573;
	            this.match(MySqlParser.USER);
	            this.state = 1574;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 551:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1575;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 1576;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 617:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1577;
	            this.match(MySqlParser.SOCKET);
	            this.state = 1578;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 542:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1579;
	            this.match(MySqlParser.OWNER);
	            this.state = 1580;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 557:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1581;
	            this.match(MySqlParser.PORT);
	            this.state = 1582;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDefinitions() {
	    let localctx = new CreateDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, MySqlParser.RULE_createDefinitions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1585;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 1586;
	        this.createDefinition();
	        this.state = 1591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 1587;
	            this.match(MySqlParser.COMMA);
	            this.state = 1588;
	            this.createDefinition();
	            this.state = 1593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1594;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDefinition() {
	    let localctx = new CreateDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, MySqlParser.RULE_createDefinition);
	    var _la = 0;
	    try {
	        this.state = 1607;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ColumnDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1596;
	            this.fullColumnName();
	            this.state = 1597;
	            this.columnDefinition();
	            break;

	        case 2:
	            localctx = new ConstraintDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1599;
	            this.tableConstraint();
	            this.state = 1601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 1600;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 1604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 1603;
	                this.match(MySqlParser.ENFORCED);
	            }

	            break;

	        case 3:
	            localctx = new IndexDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1606;
	            this.indexColumnDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinition() {
	    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, MySqlParser.RULE_columnDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1609;
	        this.dataType();
	        this.state = 1613;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,148,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1610;
	                this.columnConstraint(); 
	            }
	            this.state = 1615;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,148,this._ctx);
	        }

	        this.state = 1617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===114) {
	            this.state = 1616;
	            this.match(MySqlParser.NOT);
	        }

	        this.state = 1620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 1619;
	            this.match(MySqlParser.ENFORCED);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnConstraint() {
	    let localctx = new ColumnConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, MySqlParser.RULE_columnConstraint);
	    var _la = 0;
	    try {
	        this.state = 1675;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 114:
	        case 116:
	        case 1152:
	            localctx = new NullColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1622;
	            this.nullNotnull();
	            break;
	        case 42:
	            localctx = new DefaultColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1623;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 1624;
	            this.defaultValue();
	            break;
	        case 673:
	            localctx = new VisibilityColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1625;
	            this.match(MySqlParser.VISIBLE);
	            break;
	        case 459:
	            localctx = new InvisibilityColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1626;
	            this.match(MySqlParser.INVISIBLE);
	            break;
	        case 118:
	        case 342:
	            localctx = new AutoIncrementColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1631;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 342:
	                this.state = 1627;
	                this.match(MySqlParser.AUTO_INCREMENT);
	                break;
	            case 118:
	                this.state = 1628;
	                this.match(MySqlParser.ON);
	                this.state = 1629;
	                this.match(MySqlParser.UPDATE);
	                this.state = 1630;
	                this.currentTimestamp();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 91:
	        case 130:
	            localctx = new PrimaryKeyColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===130) {
	                this.state = 1633;
	                this.match(MySqlParser.PRIMARY);
	            }

	            this.state = 1636;
	            this.match(MySqlParser.KEY);
	            break;
	        case 181:
	            localctx = new UniqueKeyColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1637;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 1639;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	            if(la_===1) {
	                this.state = 1638;
	                this.match(MySqlParser.KEY);

	            }
	            break;
	        case 368:
	            localctx = new CommentColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1641;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1642;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 366:
	            localctx = new FormatColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1643;
	            this.match(MySqlParser.COLUMN_FORMAT);
	            this.state = 1644;
	            localctx.colformat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===402 || _la===431)) {
	                localctx.colformat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 636:
	            localctx = new StorageColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1645;
	            this.match(MySqlParser.STORAGE);
	            this.state = 1646;
	            localctx.storageval = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===398 || _la===792)) {
	                localctx.storageval = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 136:
	            localctx = new ReferenceColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1647;
	            this.referenceDefinition();
	            break;
	        case 27:
	            localctx = new CollateColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1648;
	            this.match(MySqlParser.COLLATE);
	            this.state = 1649;
	            this.collationName();
	            break;
	        case 12:
	        case 70:
	            localctx = new GeneratedColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===70) {
	                this.state = 1650;
	                this.match(MySqlParser.GENERATED);
	                this.state = 1651;
	                this.match(MySqlParser.ALWAYS);
	            }

	            this.state = 1654;
	            this.match(MySqlParser.AS);
	            this.state = 1655;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1656;
	            this.expression(0);
	            this.state = 1657;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 1659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===637 || _la===672) {
	                this.state = 1658;
	                _la = this._input.LA(1);
	                if(!(_la===637 || _la===672)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 239:
	            localctx = new SerialDefaultColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1661;
	            this.match(MySqlParser.SERIAL);
	            this.state = 1662;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 1663;
	            this.match(MySqlParser.VALUE);
	            break;
	        case 26:
	        case 30:
	            localctx = new CheckColumnConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 1664;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1666;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 1665;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1670;
	            this.match(MySqlParser.CHECK);
	            this.state = 1671;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1672;
	            this.expression(0);
	            this.state = 1673;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraint() {
	    let localctx = new TableConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, MySqlParser.RULE_tableConstraint);
	    var _la = 0;
	    try {
	        this.state = 1746;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,175,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PrimaryKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 1677;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1679;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	                if(la_===1) {
	                    this.state = 1678;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 1683;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 1684;
	            this.match(MySqlParser.KEY);
	            this.state = 1686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 1685;
	                localctx.index = this.uid();
	            }

	            this.state = 1689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===187) {
	                this.state = 1688;
	                this.indexType();
	            }

	            this.state = 1691;
	            this.indexColumnNames();
	            this.state = 1695;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===187 || _la===192 || _la===368 || _la===459 || _la===467 || _la===673 || _la===875 || _la===1000) {
	                this.state = 1692;
	                this.indexOption();
	                this.state = 1697;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new UniqueKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 1698;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1700;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 1699;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1704;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 1706;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===91) {
	                this.state = 1705;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===91)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1709;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 1708;
	                localctx.index = this.uid();
	            }

	            this.state = 1712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===187) {
	                this.state = 1711;
	                this.indexType();
	            }

	            this.state = 1714;
	            this.indexColumnNames();
	            this.state = 1718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===187 || _la===192 || _la===368 || _la===459 || _la===467 || _la===673 || _la===875 || _la===1000) {
	                this.state = 1715;
	                this.indexOption();
	                this.state = 1720;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            localctx = new ForeignKeyTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1725;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 1721;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1723;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 1722;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1727;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 1728;
	            this.match(MySqlParser.KEY);
	            this.state = 1730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 1729;
	                localctx.index = this.uid();
	            }

	            this.state = 1732;
	            this.indexColumnNames();
	            this.state = 1733;
	            this.referenceDefinition();
	            break;

	        case 4:
	            localctx = new CheckTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 1735;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 1737;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 1736;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 1741;
	            this.match(MySqlParser.CHECK);
	            this.state = 1742;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 1743;
	            this.expression(0);
	            this.state = 1744;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceDefinition() {
	    let localctx = new ReferenceDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, MySqlParser.RULE_referenceDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1748;
	        this.match(MySqlParser.REFERENCES);
	        this.state = 1749;
	        this.tableName();
	        this.state = 1751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	        if(la_===1) {
	            this.state = 1750;
	            this.indexColumnNames();

	        }
	        this.state = 1755;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===109) {
	            this.state = 1753;
	            this.match(MySqlParser.MATCH);
	            this.state = 1754;
	            localctx.matchType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===436 || _la===548 || _la===613)) {
	                localctx.matchType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1758;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 1757;
	            this.referenceAction();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceAction() {
	    let localctx = new ReferenceActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, MySqlParser.RULE_referenceAction);
	    try {
	        this.state = 1776;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1760;
	            this.match(MySqlParser.ON);
	            this.state = 1761;
	            this.match(MySqlParser.DELETE);
	            this.state = 1762;
	            localctx.onDelete = this.referenceControlType();
	            this.state = 1766;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	            if(la_===1) {
	                this.state = 1763;
	                this.match(MySqlParser.ON);
	                this.state = 1764;
	                this.match(MySqlParser.UPDATE);
	                this.state = 1765;
	                localctx.onUpdate = this.referenceControlType();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1768;
	            this.match(MySqlParser.ON);
	            this.state = 1769;
	            this.match(MySqlParser.UPDATE);
	            this.state = 1770;
	            localctx.onUpdate = this.referenceControlType();
	            this.state = 1774;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	            if(la_===1) {
	                this.state = 1771;
	                this.match(MySqlParser.ON);
	                this.state = 1772;
	                this.match(MySqlParser.DELETE);
	                this.state = 1773;
	                localctx.onDelete = this.referenceControlType();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceControlType() {
	    let localctx = new ReferenceControlTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, MySqlParser.RULE_referenceControlType);
	    try {
	        this.state = 1786;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1778;
	            this.match(MySqlParser.RESTRICT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1779;
	            this.match(MySqlParser.CASCADE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1780;
	            this.match(MySqlParser.SET);
	            this.state = 1781;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1782;
	            this.match(MySqlParser.NO);
	            this.state = 1783;
	            this.match(MySqlParser.ACTION);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1784;
	            this.match(MySqlParser.SET);
	            this.state = 1785;
	            this.match(MySqlParser.DEFAULT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnDefinition() {
	    let localctx = new IndexColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, MySqlParser.RULE_indexColumnDefinition);
	    var _la = 0;
	    try {
	        this.state = 1816;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	        case 91:
	            localctx = new SimpleIndexDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1788;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===81 || _la===91)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 1789;
	                this.uid();
	            }

	            this.state = 1793;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===187) {
	                this.state = 1792;
	                this.indexType();
	            }

	            this.state = 1795;
	            this.indexColumnNames();
	            this.state = 1799;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===187 || _la===192 || _la===368 || _la===459 || _la===467 || _la===673 || _la===875 || _la===1000) {
	                this.state = 1796;
	                this.indexOption();
	                this.state = 1801;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 69:
	        case 159:
	            localctx = new SpecialIndexDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1802;
	            _la = this._input.LA(1);
	            if(!(_la===69 || _la===159)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===91) {
	                this.state = 1803;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===91)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1807;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 1806;
	                this.uid();
	            }

	            this.state = 1809;
	            this.indexColumnNames();
	            this.state = 1813;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===187 || _la===192 || _la===368 || _la===459 || _la===467 || _la===673 || _la===875 || _la===1000) {
	                this.state = 1810;
	                this.indexOption();
	                this.state = 1815;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableOption() {
	    let localctx = new TableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, MySqlParser.RULE_tableOption);
	    var _la = 0;
	    try {
	        this.state = 2003;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableOptionEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1818;
	            this.match(MySqlParser.ENGINE);
	            this.state = 1820;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1819;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1823;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	            if(la_===1) {
	                this.state = 1822;
	                this.engineName();

	            }
	            break;

	        case 2:
	            localctx = new TableOptionEngineAttributeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1825;
	            this.match(MySqlParser.ENGINE_ATTRIBUTE);
	            this.state = 1827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1826;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1829;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 3:
	            localctx = new TableOptionAutoextendSizeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1830;
	            this.match(MySqlParser.AUTOEXTEND_SIZE);
	            this.state = 1832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1831;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1834;
	            this.decimalLiteral();
	            break;

	        case 4:
	            localctx = new TableOptionAutoIncrementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1835;
	            this.match(MySqlParser.AUTO_INCREMENT);
	            this.state = 1837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1836;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1839;
	            this.decimalLiteral();
	            break;

	        case 5:
	            localctx = new TableOptionAverageContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1840;
	            this.match(MySqlParser.AVG_ROW_LENGTH);
	            this.state = 1842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1841;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1844;
	            this.decimalLiteral();
	            break;

	        case 6:
	            localctx = new TableOptionCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1846;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 1845;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1848;
	            this.charSet();
	            this.state = 1850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1849;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1854;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 226:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 1145:
	            case 1148:
	                this.state = 1852;
	                this.charsetName();
	                break;
	            case 42:
	                this.state = 1853;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 7:
	            localctx = new TableOptionChecksumContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1856;
	            _la = this._input.LA(1);
	            if(!(_la===356 || _la===357)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1857;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1860;
	            localctx.boolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===1138 || _la===1139)) {
	                localctx.boolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 8:
	            localctx = new TableOptionCollateContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 1861;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 1864;
	            this.match(MySqlParser.COLLATE);
	            this.state = 1866;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1865;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1868;
	            this.collationName();
	            break;

	        case 9:
	            localctx = new TableOptionCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1869;
	            this.match(MySqlParser.COMMENT);
	            this.state = 1871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1870;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1873;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 10:
	            localctx = new TableOptionCompressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1874;
	            this.match(MySqlParser.COMPRESSION);
	            this.state = 1876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1875;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1878;
	            _la = this._input.LA(1);
	            if(!(_la===1148 || _la===1156)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 11:
	            localctx = new TableOptionConnectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1879;
	            this.match(MySqlParser.CONNECTION);
	            this.state = 1881;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1880;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1883;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 12:
	            localctx = new TableOptionDataDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1884;
	            _la = this._input.LA(1);
	            if(!(_la===81 || _la===388)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1885;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 1887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1886;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1889;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 13:
	            localctx = new TableOptionDelayContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1890;
	            this.match(MySqlParser.DELAY_KEY_WRITE);
	            this.state = 1892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1891;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1894;
	            localctx.boolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===1138 || _la===1139)) {
	                localctx.boolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 14:
	            localctx = new TableOptionEncryptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1895;
	            this.match(MySqlParser.ENCRYPTION);
	            this.state = 1897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1896;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1899;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 15:
	            localctx = new TableOptionPageCompressedContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1900;
	            _la = this._input.LA(1);
	            if(!(_la===545 || _la===1148)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1902;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1901;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1904;
	            _la = this._input.LA(1);
	            if(!(_la===1138 || _la===1139)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 16:
	            localctx = new TableOptionPageCompressionLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1905;
	            _la = this._input.LA(1);
	            if(!(_la===546 || _la===1148)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1906;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1909;
	            this.decimalLiteral();
	            break;

	        case 17:
	            localctx = new TableOptionEncryptionKeyIdContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1910;
	            this.match(MySqlParser.ENCRYPTION_KEY_ID);
	            this.state = 1912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1911;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1914;
	            this.decimalLiteral();
	            break;

	        case 18:
	            localctx = new TableOptionIndexDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1915;
	            this.match(MySqlParser.INDEX);
	            this.state = 1916;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 1918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1917;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1920;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 19:
	            localctx = new TableOptionInsertMethodContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1921;
	            this.match(MySqlParser.INSERT_METHOD);
	            this.state = 1923;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1922;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1925;
	            localctx.insertMethod = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===430 || _la===469 || _la===521)) {
	                localctx.insertMethod = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 20:
	            localctx = new TableOptionKeyBlockSizeContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1926;
	            this.match(MySqlParser.KEY_BLOCK_SIZE);
	            this.state = 1928;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1927;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1930;
	            this.fileSizeLiteral();
	            break;

	        case 21:
	            localctx = new TableOptionMaxRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1931;
	            this.match(MySqlParser.MAX_ROWS);
	            this.state = 1933;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1932;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1935;
	            this.decimalLiteral();
	            break;

	        case 22:
	            localctx = new TableOptionMinRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1936;
	            this.match(MySqlParser.MIN_ROWS);
	            this.state = 1938;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1937;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1940;
	            this.decimalLiteral();
	            break;

	        case 23:
	            localctx = new TableOptionPackKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1941;
	            this.match(MySqlParser.PACK_KEYS);
	            this.state = 1943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1942;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1945;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===1138 || _la===1139)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 24:
	            localctx = new TableOptionPasswordContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1946;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 1948;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1947;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1950;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 25:
	            localctx = new TableOptionRowFormatContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1951;
	            this.match(MySqlParser.ROW_FORMAT);
	            this.state = 1953;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1952;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1955;
	            localctx.rowFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===370 || _la===372 || _la===402 || _la===431 || _la===573 || _la===1156)) {
	                localctx.rowFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 26:
	            localctx = new TableOptionStartTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1956;
	            this.match(MySqlParser.START);
	            this.state = 1957;
	            this.match(MySqlParser.TRANSACTION);
	            break;

	        case 27:
	            localctx = new TableOptionSecondaryEngineAttributeContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1958;
	            this.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE);
	            this.state = 1960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1959;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1962;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 28:
	            localctx = new TableOptionRecalculationContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1963;
	            this.match(MySqlParser.STATS_AUTO_RECALC);
	            this.state = 1965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1964;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1967;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===1138 || _la===1139)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 29:
	            localctx = new TableOptionPersistentContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1968;
	            this.match(MySqlParser.STATS_PERSISTENT);
	            this.state = 1970;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1969;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1972;
	            localctx.extBoolValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===1138 || _la===1139)) {
	                localctx.extBoolValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 30:
	            localctx = new TableOptionSamplePageContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1973;
	            this.match(MySqlParser.STATS_SAMPLE_PAGES);
	            this.state = 1975;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1974;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1979;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 42:
	                this.state = 1977;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            case 1138:
	            case 1139:
	            case 1140:
	            case 1149:
	            case 1151:
	                this.state = 1978;
	                this.decimalLiteral();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 31:
	            localctx = new TableOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1981;
	            this.match(MySqlParser.TABLESPACE);
	            this.state = 1982;
	            this.uid();
	            this.state = 1984;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	            if(la_===1) {
	                this.state = 1983;
	                this.tablespaceStorage();

	            }
	            break;

	        case 32:
	            localctx = new TableOptionTableTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1986;
	            this.match(MySqlParser.TABLE_TYPE);
	            this.state = 1987;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 1988;
	            this.tableType();
	            break;

	        case 33:
	            localctx = new TableOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1989;
	            this.tablespaceStorage();
	            break;

	        case 34:
	            localctx = new TableOptionTransactionalContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1990;
	            this.match(MySqlParser.TRANSACTIONAL);
	            this.state = 1992;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1991;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1994;
	            _la = this._input.LA(1);
	            if(!(_la===1138 || _la===1139)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 35:
	            localctx = new TableOptionUnionContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1995;
	            this.match(MySqlParser.UNION);
	            this.state = 1997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 1996;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 1999;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2000;
	            this.tables();
	            this.state = 2001;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableType() {
	    let localctx = new TableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, MySqlParser.RULE_tableType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2005;
	        _la = this._input.LA(1);
	        if(!(_la===514 || _la===530)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablespaceStorage() {
	    let localctx = new TablespaceStorageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, MySqlParser.RULE_tablespaceStorage);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2007;
	        this.match(MySqlParser.STORAGE);
	        this.state = 2008;
	        _la = this._input.LA(1);
	        if(!(_la===42 || _la===398 || _la===792)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinitions() {
	    let localctx = new PartitionDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, MySqlParser.RULE_partitionDefinitions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2010;
	        this.match(MySqlParser.PARTITION);
	        this.state = 2011;
	        this.match(MySqlParser.BY);
	        this.state = 2012;
	        this.partitionFunctionDefinition();
	        this.state = 2015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===550) {
	            this.state = 2013;
	            this.match(MySqlParser.PARTITIONS);
	            this.state = 2014;
	            localctx.count = this.decimalLiteral();
	        }

	        this.state = 2024;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===641) {
	            this.state = 2017;
	            this.match(MySqlParser.SUBPARTITION);
	            this.state = 2018;
	            this.match(MySqlParser.BY);
	            this.state = 2019;
	            this.subpartitionFunctionDefinition();
	            this.state = 2022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===642) {
	                this.state = 2020;
	                this.match(MySqlParser.SUBPARTITIONS);
	                this.state = 2021;
	                localctx.subCount = this.decimalLiteral();
	            }

	        }

	        this.state = 2037;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	        if(la_===1) {
	            this.state = 2026;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2027;
	            this.partitionDefinition();
	            this.state = 2032;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2028;
	                this.match(MySqlParser.COMMA);
	                this.state = 2029;
	                this.partitionDefinition();
	                this.state = 2034;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2035;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionFunctionDefinition() {
	    let localctx = new PartitionFunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, MySqlParser.RULE_partitionFunctionDefinition);
	    var _la = 0;
	    try {
	        this.state = 2085;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PartitionFunctionHashContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 2039;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 2042;
	            this.match(MySqlParser.HASH);
	            this.state = 2043;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2044;
	            this.expression(0);
	            this.state = 2045;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            localctx = new PartitionFunctionKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2048;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 2047;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 2050;
	            this.match(MySqlParser.KEY);
	            this.state = 2054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===336) {
	                this.state = 2051;
	                this.match(MySqlParser.ALGORITHM);
	                this.state = 2052;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 2053;
	                localctx.algType = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===1139 || _la===1140)) {
	                    localctx.algType = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2056;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2058;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 2057;
	                this.uidList();
	            }

	            this.state = 2060;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            localctx = new PartitionFunctionRangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2061;
	            this.match(MySqlParser.RANGE);
	            this.state = 2071;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1133:
	                this.state = 2062;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2063;
	                this.expression(0);
	                this.state = 2064;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            case 365:
	                this.state = 2066;
	                this.match(MySqlParser.COLUMNS);
	                this.state = 2067;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2068;
	                this.uidList();
	                this.state = 2069;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new PartitionFunctionListContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2073;
	            this.match(MySqlParser.LIST);
	            this.state = 2083;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1133:
	                this.state = 2074;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2075;
	                this.expression(0);
	                this.state = 2076;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            case 365:
	                this.state = 2078;
	                this.match(MySqlParser.COLUMNS);
	                this.state = 2079;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2080;
	                this.uidList();
	                this.state = 2081;
	                this.match(MySqlParser.RR_BRACKET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpartitionFunctionDefinition() {
	    let localctx = new SubpartitionFunctionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, MySqlParser.RULE_subpartitionFunctionDefinition);
	    var _la = 0;
	    try {
	        this.state = 2108;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SubPartitionFunctionHashContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2088;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 2087;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 2090;
	            this.match(MySqlParser.HASH);
	            this.state = 2091;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2092;
	            this.expression(0);
	            this.state = 2093;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            localctx = new SubPartitionFunctionKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2096;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 2095;
	                this.match(MySqlParser.LINEAR);
	            }

	            this.state = 2098;
	            this.match(MySqlParser.KEY);
	            this.state = 2102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===336) {
	                this.state = 2099;
	                this.match(MySqlParser.ALGORITHM);
	                this.state = 2100;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 2101;
	                localctx.algType = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===1139 || _la===1140)) {
	                    localctx.algType = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2104;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2105;
	            this.uidList();
	            this.state = 2106;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinition() {
	    let localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, MySqlParser.RULE_partitionDefinition);
	    var _la = 0;
	    try {
	        this.state = 2256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PartitionComparisonContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2110;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2111;
	            this.uid();
	            this.state = 2112;
	            this.match(MySqlParser.VALUES);
	            this.state = 2113;
	            this.match(MySqlParser.LESS);
	            this.state = 2114;
	            this.match(MySqlParser.THAN);
	            this.state = 2115;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2116;
	            this.partitionDefinerAtom();
	            this.state = 2121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2117;
	                this.match(MySqlParser.COMMA);
	                this.state = 2118;
	                this.partitionDefinerAtom();
	                this.state = 2123;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2124;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1f) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
	                this.state = 2125;
	                this.partitionOption();
	                this.state = 2130;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2142;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 2131;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2132;
	                this.subpartitionDefinition();
	                this.state = 2137;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 2133;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 2134;
	                    this.subpartitionDefinition();
	                    this.state = 2139;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2140;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            break;

	        case 2:
	            localctx = new PartitionComparisonContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2144;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2145;
	            this.uid();
	            this.state = 2146;
	            this.match(MySqlParser.VALUES);
	            this.state = 2147;
	            this.match(MySqlParser.LESS);
	            this.state = 2148;
	            this.match(MySqlParser.THAN);
	            this.state = 2149;
	            this.partitionDefinerAtom();
	            this.state = 2153;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1f) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
	                this.state = 2150;
	                this.partitionOption();
	                this.state = 2155;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 2156;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2157;
	                this.subpartitionDefinition();
	                this.state = 2162;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 2158;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 2159;
	                    this.subpartitionDefinition();
	                    this.state = 2164;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2165;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            break;

	        case 3:
	            localctx = new PartitionListAtomContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2169;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2170;
	            this.uid();
	            this.state = 2171;
	            this.match(MySqlParser.VALUES);
	            this.state = 2172;
	            this.match(MySqlParser.IN);
	            this.state = 2173;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2174;
	            this.partitionDefinerAtom();
	            this.state = 2179;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2175;
	                this.match(MySqlParser.COMMA);
	                this.state = 2176;
	                this.partitionDefinerAtom();
	                this.state = 2181;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2182;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2186;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1f) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
	                this.state = 2183;
	                this.partitionOption();
	                this.state = 2188;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 2189;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2190;
	                this.subpartitionDefinition();
	                this.state = 2195;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 2191;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 2192;
	                    this.subpartitionDefinition();
	                    this.state = 2197;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2198;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            break;

	        case 4:
	            localctx = new PartitionListVectorContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2202;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2203;
	            this.uid();
	            this.state = 2204;
	            this.match(MySqlParser.VALUES);
	            this.state = 2205;
	            this.match(MySqlParser.IN);
	            this.state = 2206;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2207;
	            this.partitionDefinerVector();
	            this.state = 2212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2208;
	                this.match(MySqlParser.COMMA);
	                this.state = 2209;
	                this.partitionDefinerVector();
	                this.state = 2214;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2215;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 2219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1f) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
	                this.state = 2216;
	                this.partitionOption();
	                this.state = 2221;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2233;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 2222;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2223;
	                this.subpartitionDefinition();
	                this.state = 2228;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 2224;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 2225;
	                    this.subpartitionDefinition();
	                    this.state = 2230;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2231;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            break;

	        case 5:
	            localctx = new PartitionSimpleContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2235;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2236;
	            this.uid();
	            this.state = 2240;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1f) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
	                this.state = 2237;
	                this.partitionOption();
	                this.state = 2242;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2254;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 2243;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2244;
	                this.subpartitionDefinition();
	                this.state = 2249;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 2245;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 2246;
	                    this.subpartitionDefinition();
	                    this.state = 2251;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2252;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinerAtom() {
	    let localctx = new PartitionDefinerAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, MySqlParser.RULE_partitionDefinerAtom);
	    try {
	        this.state = 2261;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2258;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2259;
	            this.expression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2260;
	            this.match(MySqlParser.MAXVALUE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinerVector() {
	    let localctx = new PartitionDefinerVectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, MySqlParser.RULE_partitionDefinerVector);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2263;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2264;
	        this.partitionDefinerAtom();
	        this.state = 2267; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2265;
	            this.match(MySqlParser.COMMA);
	            this.state = 2266;
	            this.partitionDefinerAtom();
	            this.state = 2269; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===1135);
	        this.state = 2271;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpartitionDefinition() {
	    let localctx = new SubpartitionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, MySqlParser.RULE_subpartitionDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2273;
	        this.match(MySqlParser.SUBPARTITION);
	        this.state = 2274;
	        this.uid();
	        this.state = 2278;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===42 || _la===81 || _la===368 || _la===388 || _la===409 || ((((_la - 500)) & ~0x1f) === 0 && ((1 << (_la - 500)) & 268436481) !== 0) || _la===636 || _la===647) {
	            this.state = 2275;
	            this.partitionOption();
	            this.state = 2280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionOption() {
	    let localctx = new PartitionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, MySqlParser.RULE_partitionOption);
	    var _la = 0;
	    try {
	        this.state = 2329;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	        case 409:
	        case 636:
	            localctx = new PartitionOptionEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2282;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 2281;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 2285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===636) {
	                this.state = 2284;
	                this.match(MySqlParser.STORAGE);
	            }

	            this.state = 2287;
	            this.match(MySqlParser.ENGINE);
	            this.state = 2289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2288;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2291;
	            this.engineName();
	            break;
	        case 368:
	            localctx = new PartitionOptionCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2292;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2293;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2296;
	            localctx.comment = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 388:
	            localctx = new PartitionOptionDataDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2297;
	            this.match(MySqlParser.DATA);
	            this.state = 2298;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 2300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2299;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2302;
	            localctx.dataDirectory = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 81:
	            localctx = new PartitionOptionIndexDirectoryContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2303;
	            this.match(MySqlParser.INDEX);
	            this.state = 2304;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 2306;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2305;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2308;
	            localctx.indexDirectory = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 500:
	            localctx = new PartitionOptionMaxRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2309;
	            this.match(MySqlParser.MAX_ROWS);
	            this.state = 2311;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2310;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2313;
	            localctx.maxRows = this.decimalLiteral();
	            break;
	        case 510:
	            localctx = new PartitionOptionMinRowsContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2314;
	            this.match(MySqlParser.MIN_ROWS);
	            this.state = 2316;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2315;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2318;
	            localctx.minRows = this.decimalLiteral();
	            break;
	        case 647:
	            localctx = new PartitionOptionTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2319;
	            this.match(MySqlParser.TABLESPACE);
	            this.state = 2321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2320;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2323;
	            localctx.tablespace = this.uid();
	            break;
	        case 528:
	            localctx = new PartitionOptionNodeGroupContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2324;
	            this.match(MySqlParser.NODEGROUP);
	            this.state = 2326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2325;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2328;
	            localctx.nodegroup = this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabase() {
	    let localctx = new AlterDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, MySqlParser.RULE_alterDatabase);
	    var _la = 0;
	    try {
	        this.state = 2349;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterSimpleDatabaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2331;
	            this.match(MySqlParser.ALTER);
	            this.state = 2332;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===39 || _la===150)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2334;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	            if(la_===1) {
	                this.state = 2333;
	                this.uid();

	            }
	            this.state = 2337; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 2336;
	                this.createDatabaseOption();
	                this.state = 2339; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 131077) !== 0) || _la===134 || _la===222 || _la===405 || _la===841);
	            break;

	        case 2:
	            localctx = new AlterUpgradeNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2341;
	            this.match(MySqlParser.ALTER);
	            this.state = 2342;
	            localctx.dbFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===39 || _la===150)) {
	                localctx.dbFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2343;
	            this.uid();
	            this.state = 2344;
	            this.match(MySqlParser.UPGRADE);
	            this.state = 2345;
	            this.match(MySqlParser.DATA);
	            this.state = 2346;
	            this.match(MySqlParser.DIRECTORY);
	            this.state = 2347;
	            this.match(MySqlParser.NAME);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterEvent() {
	    let localctx = new AlterEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, MySqlParser.RULE_alterEvent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2351;
	        this.match(MySqlParser.ALTER);
	        this.state = 2353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===392) {
	            this.state = 2352;
	            this.ownerStatement();
	        }

	        this.state = 2355;
	        this.match(MySqlParser.EVENT);
	        this.state = 2356;
	        this.fullId();
	        this.state = 2360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	        if(la_===1) {
	            this.state = 2357;
	            this.match(MySqlParser.ON);
	            this.state = 2358;
	            this.match(MySqlParser.SCHEDULE);
	            this.state = 2359;
	            this.scheduleExpression();

	        }
	        this.state = 2368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 2362;
	            this.match(MySqlParser.ON);
	            this.state = 2363;
	            this.match(MySqlParser.COMPLETION);
	            this.state = 2365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 2364;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 2367;
	            this.match(MySqlParser.PRESERVE);
	        }

	        this.state = 2373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	        if(la_===1) {
	            this.state = 2370;
	            this.match(MySqlParser.RENAME);
	            this.state = 2371;
	            this.match(MySqlParser.TO);
	            this.state = 2372;
	            this.fullId();

	        }
	        this.state = 2376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===396 || _la===403) {
	            this.state = 2375;
	            this.enableType();
	        }

	        this.state = 2380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===368) {
	            this.state = 2378;
	            this.match(MySqlParser.COMMENT);
	            this.state = 2379;
	            this.match(MySqlParser.STRING_LITERAL);
	        }

	        this.state = 2384;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        if(la_===1) {
	            this.state = 2382;
	            this.match(MySqlParser.DO);
	            this.state = 2383;
	            this.routineBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterFunction() {
	    let localctx = new AlterFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, MySqlParser.RULE_alterFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2386;
	        this.match(MySqlParser.ALTER);
	        this.state = 2387;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 2388;
	        this.fullId();
	        this.state = 2392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===47 || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 8388613) !== 0) || _la===160 || _la===368 || _la===381 || _la===468 || _la===521) {
	            this.state = 2389;
	            this.routineOption();
	            this.state = 2394;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterInstance() {
	    let localctx = new AlterInstanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, MySqlParser.RULE_alterInstance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2395;
	        this.match(MySqlParser.ALTER);
	        this.state = 2396;
	        this.match(MySqlParser.INSTANCE);
	        this.state = 2397;
	        this.match(MySqlParser.ROTATE);
	        this.state = 2398;
	        this.match(MySqlParser.INNODB);
	        this.state = 2399;
	        this.match(MySqlParser.MASTER);
	        this.state = 2400;
	        this.match(MySqlParser.KEY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLogfileGroup() {
	    let localctx = new AlterLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, MySqlParser.RULE_alterLogfileGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2402;
	        this.match(MySqlParser.ALTER);
	        this.state = 2403;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 2404;
	        this.match(MySqlParser.GROUP);
	        this.state = 2405;
	        this.uid();
	        this.state = 2406;
	        this.match(MySqlParser.ADD);
	        this.state = 2407;
	        this.match(MySqlParser.UNDOFILE);
	        this.state = 2408;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 2414;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===453) {
	            this.state = 2409;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 2411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2410;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2413;
	            this.fileSizeLiteral();
	        }

	        this.state = 2417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===674) {
	            this.state = 2416;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 2419;
	        this.match(MySqlParser.ENGINE);
	        this.state = 2421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1124) {
	            this.state = 2420;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 2423;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterProcedure() {
	    let localctx = new AlterProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, MySqlParser.RULE_alterProcedure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2425;
	        this.match(MySqlParser.ALTER);
	        this.state = 2426;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 2427;
	        this.fullId();
	        this.state = 2431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===47 || ((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 8388613) !== 0) || _la===160 || _la===368 || _la===381 || _la===468 || _la===521) {
	            this.state = 2428;
	            this.routineOption();
	            this.state = 2433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterServer() {
	    let localctx = new AlterServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, MySqlParser.RULE_alterServer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2434;
	        this.match(MySqlParser.ALTER);
	        this.state = 2435;
	        this.match(MySqlParser.SERVER);
	        this.state = 2436;
	        this.uid();
	        this.state = 2437;
	        this.match(MySqlParser.OPTIONS);
	        this.state = 2438;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 2439;
	        this.serverOption();
	        this.state = 2444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 2440;
	            this.match(MySqlParser.COMMA);
	            this.state = 2441;
	            this.serverOption();
	            this.state = 2446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2447;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTable() {
	    let localctx = new AlterTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, MySqlParser.RULE_alterTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2449;
	        this.match(MySqlParser.ALTER);
	        this.state = 2451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===531 || _la===537) {
	            this.state = 2450;
	            localctx.intimeAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===531 || _la===537)) {
	                localctx.intimeAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 2453;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 2456;
	        this.match(MySqlParser.TABLE);
	        this.state = 2457;
	        this.tableName();
	        this.state = 2459;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===527 || _la===674) {
	            this.state = 2458;
	            this.waitNowaitClause();
	        }

	        this.state = 2469;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	        if(la_===1) {
	            this.state = 2461;
	            this.alterSpecification();
	            this.state = 2466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2462;
	                this.match(MySqlParser.COMMA);
	                this.state = 2463;
	                this.alterSpecification();
	                this.state = 2468;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 2472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 2471;
	            this.partitionDefinitions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTablespace() {
	    let localctx = new AlterTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, MySqlParser.RULE_alterTablespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2474;
	        this.match(MySqlParser.ALTER);
	        this.state = 2475;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 2476;
	        this.uid();
	        this.state = 2477;
	        localctx.objectAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===5 || _la===51)) {
	            localctx.objectAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2478;
	        this.match(MySqlParser.DATAFILE);
	        this.state = 2479;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 2483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===453) {
	            this.state = 2480;
	            this.match(MySqlParser.INITIAL_SIZE);
	            this.state = 2481;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 2482;
	            this.fileSizeLiteral();
	        }

	        this.state = 2486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===674) {
	            this.state = 2485;
	            this.match(MySqlParser.WAIT);
	        }

	        this.state = 2488;
	        this.match(MySqlParser.ENGINE);
	        this.state = 2490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1124) {
	            this.state = 2489;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	        }

	        this.state = 2492;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterView() {
	    let localctx = new AlterViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, MySqlParser.RULE_alterView);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2494;
	        this.match(MySqlParser.ALTER);
	        this.state = 2498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===336) {
	            this.state = 2495;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 2496;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 2497;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===506 || _la===650 || _la===658)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2501;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===392) {
	            this.state = 2500;
	            this.ownerStatement();
	        }

	        this.state = 2506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===160) {
	            this.state = 2503;
	            this.match(MySqlParser.SQL);
	            this.state = 2504;
	            this.match(MySqlParser.SECURITY);
	            this.state = 2505;
	            localctx.secContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===392 || _la===460)) {
	                localctx.secContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2508;
	        this.match(MySqlParser.VIEW);
	        this.state = 2509;
	        this.fullId();
	        this.state = 2514;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1133) {
	            this.state = 2510;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2511;
	            this.uidList();
	            this.state = 2512;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 2516;
	        this.match(MySqlParser.AS);
	        this.state = 2517;
	        this.selectStatement();
	        this.state = 2524;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	        if(la_===1) {
	            this.state = 2518;
	            this.match(MySqlParser.WITH);
	            this.state = 2520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===352 || _la===474) {
	                this.state = 2519;
	                localctx.checkOpt = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===352 || _la===474)) {
	                    localctx.checkOpt = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2522;
	            this.match(MySqlParser.CHECK);
	            this.state = 2523;
	            this.match(MySqlParser.OPTION);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterSpecification() {
	    let localctx = new AlterSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, MySqlParser.RULE_alterSpecification);
	    var _la = 0;
	    try {
	        this.state = 2877;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterByTableOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2526;
	            this.tableOption();
	            this.state = 2533;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,311,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2528;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===1135) {
	                        this.state = 2527;
	                        this.match(MySqlParser.COMMA);
	                    }

	                    this.state = 2530;
	                    this.tableOption(); 
	                }
	                this.state = 2535;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,311,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new AlterByAddColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2536;
	            this.match(MySqlParser.ADD);
	            this.state = 2538;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 2537;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2540;
	            this.uid();
	            this.state = 2541;
	            this.columnDefinition();
	            this.state = 2545;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 430:
	            	this.state = 2542;
	            	this.match(MySqlParser.FIRST);
	            	break;
	            case 334:
	            	this.state = 2543;
	            	this.match(MySqlParser.AFTER);
	            	this.state = 2544;
	            	this.uid();
	            	break;
	            case -1:
	            case 7:
	            case 9:
	            case 20:
	            case 24:
	            case 26:
	            case 33:
	            case 44:
	            case 45:
	            case 46:
	            case 51:
	            case 62:
	            case 71:
	            case 72:
	            case 85:
	            case 93:
	            case 102:
	            case 103:
	            case 119:
	            case 129:
	            case 132:
	            case 138:
	            case 139:
	            case 141:
	            case 143:
	            case 147:
	            case 152:
	            case 153:
	            case 155:
	            case 156:
	            case 172:
	            case 182:
	            case 184:
	            case 186:
	            case 188:
	            case 192:
	            case 344:
	            case 345:
	            case 351:
	            case 356:
	            case 369:
	            case 390:
	            case 399:
	            case 432:
	            case 442:
	            case 444:
	            case 456:
	            case 560:
	            case 580:
	            case 589:
	            case 597:
	            case 604:
	            case 629:
	            case 635:
	            case 656:
	            case 661:
	            case 681:
	            case 708:
	            case 739:
	            case 1121:
	            case 1133:
	            case 1135:
	            case 1136:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 3:
	            localctx = new AlterByAddColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2547;
	            this.match(MySqlParser.ADD);
	            this.state = 2549;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 2548;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2551;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2552;
	            this.uid();
	            this.state = 2553;
	            this.columnDefinition();
	            this.state = 2560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2554;
	                this.match(MySqlParser.COMMA);
	                this.state = 2555;
	                this.uid();
	                this.state = 2556;
	                this.columnDefinition();
	                this.state = 2562;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2563;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            localctx = new AlterByAddIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2565;
	            this.match(MySqlParser.ADD);
	            this.state = 2566;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===81 || _la===91)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2568;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 2567;
	                this.uid();
	            }

	            this.state = 2571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===187) {
	                this.state = 2570;
	                this.indexType();
	            }

	            this.state = 2573;
	            this.indexColumnNames();
	            this.state = 2577;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,318,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2574;
	                    this.indexOption(); 
	                }
	                this.state = 2579;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,318,this._ctx);
	            }

	            break;

	        case 5:
	            localctx = new AlterByAddPrimaryKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2580;
	            this.match(MySqlParser.ADD);
	            this.state = 2585;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 2581;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2583;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	                if(la_===1) {
	                    this.state = 2582;
	                    localctx.name = this.uid();

	                }
	            }

	            this.state = 2587;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 2588;
	            this.match(MySqlParser.KEY);
	            this.state = 2590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 2589;
	                localctx.index = this.uid();
	            }

	            this.state = 2593;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===187) {
	                this.state = 2592;
	                this.indexType();
	            }

	            this.state = 2595;
	            this.indexColumnNames();
	            this.state = 2599;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,323,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2596;
	                    this.indexOption(); 
	                }
	                this.state = 2601;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,323,this._ctx);
	            }

	            break;

	        case 6:
	            localctx = new AlterByAddUniqueKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2602;
	            this.match(MySqlParser.ADD);
	            this.state = 2607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 2603;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2605;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 2604;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2609;
	            this.match(MySqlParser.UNIQUE);
	            this.state = 2611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===91) {
	                this.state = 2610;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===91)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 2613;
	                localctx.indexName = this.uid();
	            }

	            this.state = 2617;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===187) {
	                this.state = 2616;
	                this.indexType();
	            }

	            this.state = 2619;
	            this.indexColumnNames();
	            this.state = 2623;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,329,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2620;
	                    this.indexOption(); 
	                }
	                this.state = 2625;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,329,this._ctx);
	            }

	            break;

	        case 7:
	            localctx = new AlterByAddSpecialIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2626;
	            this.match(MySqlParser.ADD);
	            this.state = 2627;
	            localctx.keyType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===69 || _la===159)) {
	                localctx.keyType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===91) {
	                this.state = 2628;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===91)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 2631;
	                this.uid();
	            }

	            this.state = 2634;
	            this.indexColumnNames();
	            this.state = 2638;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,332,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2635;
	                    this.indexOption(); 
	                }
	                this.state = 2640;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,332,this._ctx);
	            }

	            break;

	        case 8:
	            localctx = new AlterByAddForeignKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2641;
	            this.match(MySqlParser.ADD);
	            this.state = 2646;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 2642;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2644;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 2643;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2648;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 2649;
	            this.match(MySqlParser.KEY);
	            this.state = 2651;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 2650;
	                localctx.indexName = this.uid();
	            }

	            this.state = 2653;
	            this.indexColumnNames();
	            this.state = 2654;
	            this.referenceDefinition();
	            break;

	        case 9:
	            localctx = new AlterByAddCheckTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2656;
	            this.match(MySqlParser.ADD);
	            this.state = 2661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 2657;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2659;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 2658;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2663;
	            this.match(MySqlParser.CHECK);
	            this.state = 2670;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2664;
	                this.uid();
	                break;

	            case 2:
	                this.state = 2665;
	                this.stringLiteral();
	                break;

	            case 3:
	                this.state = 2666;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2667;
	                this.expression(0);
	                this.state = 2668;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	            this.state = 2673;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 2672;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 2676;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 2675;
	                this.match(MySqlParser.ENFORCED);
	            }

	            break;

	        case 10:
	            localctx = new AlterByAlterCheckTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2678;
	            this.match(MySqlParser.ALTER);
	            this.state = 2683;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 2679;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2681;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 2680;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2685;
	            this.match(MySqlParser.CHECK);
	            this.state = 2692;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2686;
	                this.uid();
	                break;

	            case 2:
	                this.state = 2687;
	                this.stringLiteral();
	                break;

	            case 3:
	                this.state = 2688;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 2689;
	                this.expression(0);
	                this.state = 2690;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	            this.state = 2695;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 2694;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 2698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===57) {
	                this.state = 2697;
	                this.match(MySqlParser.ENFORCED);
	            }

	            break;

	        case 11:
	            localctx = new AlterByAddCheckTableConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2700;
	            this.match(MySqlParser.ADD);
	            this.state = 2705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===30) {
	                this.state = 2701;
	                this.match(MySqlParser.CONSTRAINT);
	                this.state = 2703;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                    this.state = 2702;
	                    localctx.name = this.uid();
	                }

	            }

	            this.state = 2707;
	            this.match(MySqlParser.CHECK);
	            this.state = 2708;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2709;
	            this.expression(0);
	            this.state = 2710;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 12:
	            localctx = new AlterBySetAlgorithmContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2712;
	            this.match(MySqlParser.ALGORITHM);
	            this.state = 2714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2713;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2716;
	            localctx.algType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===384 || _la===454 || _la===458)) {
	                localctx.algType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 13:
	            localctx = new AlterByChangeDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2717;
	            this.match(MySqlParser.ALTER);
	            this.state = 2719;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 2718;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2721;
	            this.uid();
	            this.state = 2727;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 153:
	                this.state = 2722;
	                this.match(MySqlParser.SET);
	                this.state = 2723;
	                this.match(MySqlParser.DEFAULT);
	                this.state = 2724;
	                this.defaultValue();
	                break;
	            case 51:
	                this.state = 2725;
	                this.match(MySqlParser.DROP);
	                this.state = 2726;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 14:
	            localctx = new AlterByChangeColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2729;
	            this.match(MySqlParser.CHANGE);
	            this.state = 2731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 2730;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2733;
	            localctx.oldColumn = this.uid();
	            this.state = 2734;
	            localctx.newColumn = this.uid();
	            this.state = 2735;
	            this.columnDefinition();
	            this.state = 2739;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 430:
	            	this.state = 2736;
	            	this.match(MySqlParser.FIRST);
	            	break;
	            case 334:
	            	this.state = 2737;
	            	this.match(MySqlParser.AFTER);
	            	this.state = 2738;
	            	localctx.afterColumn = this.uid();
	            	break;
	            case -1:
	            case 7:
	            case 9:
	            case 20:
	            case 24:
	            case 26:
	            case 33:
	            case 44:
	            case 45:
	            case 46:
	            case 51:
	            case 62:
	            case 71:
	            case 72:
	            case 85:
	            case 93:
	            case 102:
	            case 103:
	            case 119:
	            case 129:
	            case 132:
	            case 138:
	            case 139:
	            case 141:
	            case 143:
	            case 147:
	            case 152:
	            case 153:
	            case 155:
	            case 156:
	            case 172:
	            case 182:
	            case 184:
	            case 186:
	            case 188:
	            case 192:
	            case 344:
	            case 345:
	            case 351:
	            case 356:
	            case 369:
	            case 390:
	            case 399:
	            case 432:
	            case 442:
	            case 444:
	            case 456:
	            case 560:
	            case 580:
	            case 589:
	            case 597:
	            case 604:
	            case 629:
	            case 635:
	            case 656:
	            case 661:
	            case 681:
	            case 708:
	            case 739:
	            case 1121:
	            case 1133:
	            case 1135:
	            case 1136:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 15:
	            localctx = new AlterByRenameColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2741;
	            this.match(MySqlParser.RENAME);
	            this.state = 2742;
	            this.match(MySqlParser.COLUMN);
	            this.state = 2743;
	            localctx.oldColumn = this.uid();
	            this.state = 2744;
	            this.match(MySqlParser.TO);
	            this.state = 2745;
	            localctx.newColumn = this.uid();
	            break;

	        case 16:
	            localctx = new AlterByLockContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2747;
	            this.match(MySqlParser.LOCK);
	            this.state = 2749;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 2748;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 2751;
	            localctx.lockType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===42 || _la===419 || _la===529 || _la===611)) {
	                localctx.lockType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 17:
	            localctx = new AlterByModifyColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2752;
	            this.match(MySqlParser.MODIFY);
	            this.state = 2754;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 2753;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2756;
	            this.uid();
	            this.state = 2757;
	            this.columnDefinition();
	            this.state = 2761;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 430:
	            	this.state = 2758;
	            	this.match(MySqlParser.FIRST);
	            	break;
	            case 334:
	            	this.state = 2759;
	            	this.match(MySqlParser.AFTER);
	            	this.state = 2760;
	            	this.uid();
	            	break;
	            case -1:
	            case 7:
	            case 9:
	            case 20:
	            case 24:
	            case 26:
	            case 33:
	            case 44:
	            case 45:
	            case 46:
	            case 51:
	            case 62:
	            case 71:
	            case 72:
	            case 85:
	            case 93:
	            case 102:
	            case 103:
	            case 119:
	            case 129:
	            case 132:
	            case 138:
	            case 139:
	            case 141:
	            case 143:
	            case 147:
	            case 152:
	            case 153:
	            case 155:
	            case 156:
	            case 172:
	            case 182:
	            case 184:
	            case 186:
	            case 188:
	            case 192:
	            case 344:
	            case 345:
	            case 351:
	            case 356:
	            case 369:
	            case 390:
	            case 399:
	            case 432:
	            case 442:
	            case 444:
	            case 456:
	            case 560:
	            case 580:
	            case 589:
	            case 597:
	            case 604:
	            case 629:
	            case 635:
	            case 656:
	            case 661:
	            case 681:
	            case 708:
	            case 739:
	            case 1121:
	            case 1133:
	            case 1135:
	            case 1136:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 18:
	            localctx = new AlterByDropColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2763;
	            this.match(MySqlParser.DROP);
	            this.state = 2765;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 2764;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2767;
	            this.uid();
	            this.state = 2769;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===144) {
	                this.state = 2768;
	                this.match(MySqlParser.RESTRICT);
	            }

	            break;

	        case 19:
	            localctx = new AlterByDropConstraintCheckContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2771;
	            this.match(MySqlParser.DROP);
	            this.state = 2772;
	            _la = this._input.LA(1);
	            if(!(_la===26 || _la===30)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2773;
	            this.uid();
	            break;

	        case 20:
	            localctx = new AlterByDropPrimaryKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2774;
	            this.match(MySqlParser.DROP);
	            this.state = 2775;
	            this.match(MySqlParser.PRIMARY);
	            this.state = 2776;
	            this.match(MySqlParser.KEY);
	            break;

	        case 21:
	            localctx = new AlterByDropIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2777;
	            this.match(MySqlParser.DROP);
	            this.state = 2778;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===81 || _la===91)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2779;
	            this.uid();
	            break;

	        case 22:
	            localctx = new AlterByRenameIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2780;
	            this.match(MySqlParser.RENAME);
	            this.state = 2781;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===81 || _la===91)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2782;
	            this.uid();
	            this.state = 2783;
	            this.match(MySqlParser.TO);
	            this.state = 2784;
	            this.uid();
	            break;

	        case 23:
	            localctx = new AlterByAlterColumnDefaultContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2786;
	            this.match(MySqlParser.ALTER);
	            this.state = 2788;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 2787;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2790;
	            this.uid();
	            this.state = 2804;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2791;
	                this.match(MySqlParser.SET);
	                this.state = 2792;
	                this.match(MySqlParser.DEFAULT);
	                this.state = 2798;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 1147:
	                case 1148:
	                case 1154:
	                    this.state = 2793;
	                    this.stringLiteral();
	                    break;
	                case 1133:
	                    this.state = 2794;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 2795;
	                    this.expression(0);
	                    this.state = 2796;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 2:
	                this.state = 2800;
	                this.match(MySqlParser.SET);
	                this.state = 2801;
	                _la = this._input.LA(1);
	                if(!(_la===459 || _la===673)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;

	            case 3:
	                this.state = 2802;
	                this.match(MySqlParser.DROP);
	                this.state = 2803;
	                this.match(MySqlParser.DEFAULT);
	                break;

	            }
	            break;

	        case 24:
	            localctx = new AlterByAlterIndexVisibilityContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2806;
	            this.match(MySqlParser.ALTER);
	            this.state = 2807;
	            this.match(MySqlParser.INDEX);
	            this.state = 2808;
	            this.uid();
	            this.state = 2809;
	            _la = this._input.LA(1);
	            if(!(_la===459 || _la===673)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 25:
	            localctx = new AlterByDropForeignKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2811;
	            this.match(MySqlParser.DROP);
	            this.state = 2812;
	            this.match(MySqlParser.FOREIGN);
	            this.state = 2813;
	            this.match(MySqlParser.KEY);
	            this.state = 2814;
	            this.uid();
	            break;

	        case 26:
	            localctx = new AlterByDisableKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2815;
	            this.match(MySqlParser.DISABLE);
	            this.state = 2816;
	            this.match(MySqlParser.KEYS);
	            break;

	        case 27:
	            localctx = new AlterByEnableKeysContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 2817;
	            this.match(MySqlParser.ENABLE);
	            this.state = 2818;
	            this.match(MySqlParser.KEYS);
	            break;

	        case 28:
	            localctx = new AlterByRenameContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 2819;
	            this.match(MySqlParser.RENAME);
	            this.state = 2821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12 || _la===175) {
	                this.state = 2820;
	                localctx.renameFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===12 || _la===175)) {
	                    localctx.renameFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 2825;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2823;
	                this.uid();
	                break;

	            case 2:
	                this.state = 2824;
	                this.fullId();
	                break;

	            }
	            break;

	        case 29:
	            localctx = new AlterByOrderContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 2827;
	            this.match(MySqlParser.ORDER);
	            this.state = 2828;
	            this.match(MySqlParser.BY);
	            this.state = 2829;
	            this.uidList();
	            break;

	        case 30:
	            localctx = new AlterByConvertCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 2830;
	            this.match(MySqlParser.CONVERT);
	            this.state = 2831;
	            this.match(MySqlParser.TO);
	            this.state = 2835;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 841:
	                this.state = 2832;
	                this.match(MySqlParser.CHARSET);
	                break;
	            case 25:
	                this.state = 2833;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 2834;
	                this.match(MySqlParser.SET);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2837;
	            this.charsetName();
	            this.state = 2840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2838;
	                this.match(MySqlParser.COLLATE);
	                this.state = 2839;
	                this.collationName();
	            }

	            break;

	        case 31:
	            localctx = new AlterByDefaultCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 2843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 2842;
	                this.match(MySqlParser.DEFAULT);
	            }

	            this.state = 2845;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 2846;
	            this.match(MySqlParser.SET);
	            this.state = 2847;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 2848;
	            this.charsetName();
	            this.state = 2852;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 2849;
	                this.match(MySqlParser.COLLATE);
	                this.state = 2850;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 2851;
	                this.collationName();
	            }

	            break;

	        case 32:
	            localctx = new AlterByDiscardTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 2854;
	            this.match(MySqlParser.DISCARD);
	            this.state = 2855;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 33:
	            localctx = new AlterByImportTablespaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 2856;
	            this.match(MySqlParser.IMPORT);
	            this.state = 2857;
	            this.match(MySqlParser.TABLESPACE);
	            break;

	        case 34:
	            localctx = new AlterByForceContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 2858;
	            this.match(MySqlParser.FORCE);
	            break;

	        case 35:
	            localctx = new AlterByValidateContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 2859;
	            localctx.validationFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===192 || _la===677)) {
	                localctx.validationFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2860;
	            this.match(MySqlParser.VALIDATION);
	            break;

	        case 36:
	            localctx = new AlterByAddDefinitionsContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 2861;
	            this.match(MySqlParser.ADD);
	            this.state = 2863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===28) {
	                this.state = 2862;
	                this.match(MySqlParser.COLUMN);
	            }

	            this.state = 2865;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2866;
	            this.createDefinition();
	            this.state = 2871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2867;
	                this.match(MySqlParser.COMMA);
	                this.state = 2868;
	                this.createDefinition();
	                this.state = 2873;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2874;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 37:
	            localctx = new AlterPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 2876;
	            this.alterPartitionSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPartitionSpecification() {
	    let localctx = new AlterPartitionSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, MySqlParser.RULE_alterPartitionSpecification);
	    var _la = 0;
	    try {
	        this.state = 2977;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            localctx = new AlterByAddPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2879;
	            this.match(MySqlParser.ADD);
	            this.state = 2880;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2881;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2882;
	            this.partitionDefinition();
	            this.state = 2887;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2883;
	                this.match(MySqlParser.COMMA);
	                this.state = 2884;
	                this.partitionDefinition();
	                this.state = 2889;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2890;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 51:
	            localctx = new AlterByDropPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2892;
	            this.match(MySqlParser.DROP);
	            this.state = 2893;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2894;
	            this.uidList();
	            break;
	        case 397:
	            localctx = new AlterByDiscardPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2895;
	            this.match(MySqlParser.DISCARD);
	            this.state = 2896;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2899;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 2897;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 2898;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2901;
	            this.match(MySqlParser.TABLESPACE);
	            break;
	        case 450:
	            localctx = new AlterByImportPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2902;
	            this.match(MySqlParser.IMPORT);
	            this.state = 2903;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2906;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 2904;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 2905;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 2908;
	            this.match(MySqlParser.TABLESPACE);
	            break;
	        case 656:
	            localctx = new AlterByTruncatePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2909;
	            this.match(MySqlParser.TRUNCATE);
	            this.state = 2910;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2913;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 2911;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 2912;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 363:
	            localctx = new AlterByCoalescePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2915;
	            this.match(MySqlParser.COALESCE);
	            this.state = 2916;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2917;
	            this.decimalLiteral();
	            break;
	        case 579:
	            localctx = new AlterByReorganizePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2918;
	            this.match(MySqlParser.REORGANIZE);
	            this.state = 2919;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2920;
	            this.uidList();
	            this.state = 2921;
	            this.match(MySqlParser.INTO);
	            this.state = 2922;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 2923;
	            this.partitionDefinition();
	            this.state = 2928;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 2924;
	                this.match(MySqlParser.COMMA);
	                this.state = 2925;
	                this.partitionDefinition();
	                this.state = 2930;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2931;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 418:
	            localctx = new AlterByExchangePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2933;
	            this.match(MySqlParser.EXCHANGE);
	            this.state = 2934;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2935;
	            this.uid();
	            this.state = 2936;
	            this.match(MySqlParser.WITH);
	            this.state = 2937;
	            this.match(MySqlParser.TABLE);
	            this.state = 2938;
	            this.tableName();
	            this.state = 2941;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,375,this._ctx);
	            if(la_===1) {
	                this.state = 2939;
	                localctx.validationFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===192 || _la===677)) {
	                    localctx.validationFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2940;
	                this.match(MySqlParser.VALIDATION);

	            }
	            break;
	        case 9:
	            localctx = new AlterByAnalyzePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2943;
	            this.match(MySqlParser.ANALYZE);
	            this.state = 2944;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2947;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 2945;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 2946;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 26:
	            localctx = new AlterByCheckPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2949;
	            this.match(MySqlParser.CHECK);
	            this.state = 2950;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2953;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 2951;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 2952;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 119:
	            localctx = new AlterByOptimizePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2955;
	            this.match(MySqlParser.OPTIMIZE);
	            this.state = 2956;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2959;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 2957;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 2958;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 569:
	            localctx = new AlterByRebuildPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2961;
	            this.match(MySqlParser.REBUILD);
	            this.state = 2962;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2965;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 2963;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 2964;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 580:
	            localctx = new AlterByRepairPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2967;
	            this.match(MySqlParser.REPAIR);
	            this.state = 2968;
	            this.match(MySqlParser.PARTITION);
	            this.state = 2971;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 2969;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 2970;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 578:
	            localctx = new AlterByRemovePartitioningContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2973;
	            this.match(MySqlParser.REMOVE);
	            this.state = 2974;
	            this.match(MySqlParser.PARTITIONING);
	            break;
	        case 664:
	            localctx = new AlterByUpgradePartitioningContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2975;
	            this.match(MySqlParser.UPGRADE);
	            this.state = 2976;
	            this.match(MySqlParser.PARTITIONING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDatabase() {
	    let localctx = new DropDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, MySqlParser.RULE_dropDatabase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2979;
	        this.match(MySqlParser.DROP);
	        this.state = 2980;
	        localctx.dbFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===150)) {
	            localctx.dbFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	        if(la_===1) {
	            this.state = 2981;
	            this.ifExists();

	        }
	        this.state = 2984;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropEvent() {
	    let localctx = new DropEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, MySqlParser.RULE_dropEvent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2986;
	        this.match(MySqlParser.DROP);
	        this.state = 2987;
	        this.match(MySqlParser.EVENT);
	        this.state = 2989;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
	        if(la_===1) {
	            this.state = 2988;
	            this.ifExists();

	        }
	        this.state = 2991;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndex() {
	    let localctx = new DropIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, MySqlParser.RULE_dropIndex);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2993;
	        this.match(MySqlParser.DROP);
	        this.state = 2994;
	        this.match(MySqlParser.INDEX);
	        this.state = 2996;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
	        if(la_===1) {
	            this.state = 2995;
	            localctx.intimeAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===531 || _la===537)) {
	                localctx.intimeAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 2998;
	        this.uid();
	        this.state = 2999;
	        this.match(MySqlParser.ON);
	        this.state = 3000;
	        this.tableName();
	        this.state = 3013;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,388,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3011;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 336:
	                    this.state = 3001;
	                    this.match(MySqlParser.ALGORITHM);
	                    this.state = 3003;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===1124) {
	                        this.state = 3002;
	                        this.match(MySqlParser.EQUAL_SYMBOL);
	                    }

	                    this.state = 3005;
	                    localctx.algType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===42 || _la===384 || _la===454)) {
	                        localctx.algType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                case 103:
	                    this.state = 3006;
	                    this.match(MySqlParser.LOCK);
	                    this.state = 3008;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===1124) {
	                        this.state = 3007;
	                        this.match(MySqlParser.EQUAL_SYMBOL);
	                    }

	                    this.state = 3010;
	                    localctx.lockType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===42 || _la===419 || _la===529 || _la===611)) {
	                        localctx.lockType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 3015;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,388,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropLogfileGroup() {
	    let localctx = new DropLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, MySqlParser.RULE_dropLogfileGroup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3016;
	        this.match(MySqlParser.DROP);
	        this.state = 3017;
	        this.match(MySqlParser.LOGFILE);
	        this.state = 3018;
	        this.match(MySqlParser.GROUP);
	        this.state = 3019;
	        this.uid();
	        this.state = 3020;
	        this.match(MySqlParser.ENGINE);
	        this.state = 3021;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 3022;
	        this.engineName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropProcedure() {
	    let localctx = new DropProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, MySqlParser.RULE_dropProcedure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3024;
	        this.match(MySqlParser.DROP);
	        this.state = 3025;
	        this.match(MySqlParser.PROCEDURE);
	        this.state = 3027;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,389,this._ctx);
	        if(la_===1) {
	            this.state = 3026;
	            this.ifExists();

	        }
	        this.state = 3029;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunction() {
	    let localctx = new DropFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, MySqlParser.RULE_dropFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3031;
	        this.match(MySqlParser.DROP);
	        this.state = 3032;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 3034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
	        if(la_===1) {
	            this.state = 3033;
	            this.ifExists();

	        }
	        this.state = 3036;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropServer() {
	    let localctx = new DropServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, MySqlParser.RULE_dropServer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3038;
	        this.match(MySqlParser.DROP);
	        this.state = 3039;
	        this.match(MySqlParser.SERVER);
	        this.state = 3041;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,391,this._ctx);
	        if(la_===1) {
	            this.state = 3040;
	            this.ifExists();

	        }
	        this.state = 3043;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTable() {
	    let localctx = new DropTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, MySqlParser.RULE_dropTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3045;
	        this.match(MySqlParser.DROP);
	        this.state = 3047;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===649) {
	            this.state = 3046;
	            this.match(MySqlParser.TEMPORARY);
	        }

	        this.state = 3049;
	        this.match(MySqlParser.TABLE);
	        this.state = 3051;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
	        if(la_===1) {
	            this.state = 3050;
	            this.ifExists();

	        }
	        this.state = 3053;
	        this.tables();
	        this.state = 3055;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21 || _la===144) {
	            this.state = 3054;
	            localctx.dropType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===21 || _la===144)) {
	                localctx.dropType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTablespace() {
	    let localctx = new DropTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, MySqlParser.RULE_dropTablespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3057;
	        this.match(MySqlParser.DROP);
	        this.state = 3058;
	        this.match(MySqlParser.TABLESPACE);
	        this.state = 3059;
	        this.uid();
	        this.state = 3065;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===409) {
	            this.state = 3060;
	            this.match(MySqlParser.ENGINE);
	            this.state = 3062;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1124) {
	                this.state = 3061;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	            }

	            this.state = 3064;
	            this.engineName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTrigger() {
	    let localctx = new DropTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, MySqlParser.RULE_dropTrigger);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3067;
	        this.match(MySqlParser.DROP);
	        this.state = 3068;
	        this.match(MySqlParser.TRIGGER);
	        this.state = 3070;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,397,this._ctx);
	        if(la_===1) {
	            this.state = 3069;
	            this.ifExists();

	        }
	        this.state = 3072;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropView() {
	    let localctx = new DropViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, MySqlParser.RULE_dropView);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3074;
	        this.match(MySqlParser.DROP);
	        this.state = 3075;
	        this.match(MySqlParser.VIEW);
	        this.state = 3077;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
	        if(la_===1) {
	            this.state = 3076;
	            this.ifExists();

	        }
	        this.state = 3079;
	        this.fullId();
	        this.state = 3084;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 3080;
	            this.match(MySqlParser.COMMA);
	            this.state = 3081;
	            this.fullId();
	            this.state = 3086;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3088;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21 || _la===144) {
	            this.state = 3087;
	            localctx.dropType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===21 || _la===144)) {
	                localctx.dropType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRole() {
	    let localctx = new DropRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, MySqlParser.RULE_dropRole);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3090;
	        this.match(MySqlParser.DROP);
	        this.state = 3091;
	        this.match(MySqlParser.ROLE);
	        this.state = 3093;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,401,this._ctx);
	        if(la_===1) {
	            this.state = 3092;
	            this.ifExists();

	        }
	        this.state = 3095;
	        this.roleName();
	        this.state = 3100;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 3096;
	            this.match(MySqlParser.COMMA);
	            this.state = 3097;
	            this.roleName();
	            this.state = 3102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setRole() {
	    let localctx = new SetRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, MySqlParser.RULE_setRole);
	    var _la = 0;
	    try {
	        this.state = 3136;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,408,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3103;
	            this.match(MySqlParser.SET);
	            this.state = 3104;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 3105;
	            this.match(MySqlParser.ROLE);
	            this.state = 3116;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,404,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3106;
	                this.match(MySqlParser.NONE);
	                break;

	            case 2:
	                this.state = 3107;
	                this.match(MySqlParser.ALL);
	                break;

	            case 3:
	                this.state = 3108;
	                this.roleName();
	                this.state = 3113;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 3109;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 3110;
	                    this.roleName();
	                    this.state = 3115;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            }
	            this.state = 3118;
	            this.match(MySqlParser.TO);
	            this.state = 3121;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,405,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3119;
	                this.userName();
	                break;

	            case 2:
	                this.state = 3120;
	                this.uid();
	                break;

	            }
	            this.state = 3130;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3123;
	                this.match(MySqlParser.COMMA);
	                this.state = 3126;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,406,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 3124;
	                    this.userName();
	                    break;

	                case 2:
	                    this.state = 3125;
	                    this.uid();
	                    break;

	                }
	                this.state = 3132;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3133;
	            this.match(MySqlParser.SET);
	            this.state = 3134;
	            this.match(MySqlParser.ROLE);
	            this.state = 3135;
	            this.roleOption();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameTable() {
	    let localctx = new RenameTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, MySqlParser.RULE_renameTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3138;
	        this.match(MySqlParser.RENAME);
	        this.state = 3139;
	        this.match(MySqlParser.TABLE);
	        this.state = 3140;
	        this.renameTableClause();
	        this.state = 3145;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 3141;
	            this.match(MySqlParser.COMMA);
	            this.state = 3142;
	            this.renameTableClause();
	            this.state = 3147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameTableClause() {
	    let localctx = new RenameTableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, MySqlParser.RULE_renameTableClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3148;
	        this.tableName();
	        this.state = 3149;
	        this.match(MySqlParser.TO);
	        this.state = 3150;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateTable() {
	    let localctx = new TruncateTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, MySqlParser.RULE_truncateTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3152;
	        this.match(MySqlParser.TRUNCATE);
	        this.state = 3154;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===172) {
	            this.state = 3153;
	            this.match(MySqlParser.TABLE);
	        }

	        this.state = 3156;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callStatement() {
	    let localctx = new CallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, MySqlParser.RULE_callStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3158;
	        this.match(MySqlParser.CALL);
	        this.state = 3159;
	        this.fullId();
	        this.state = 3166;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,412,this._ctx);
	        if(la_===1) {
	            this.state = 3160;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3163;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,411,this._ctx);
	            if(la_===1) {
	                this.state = 3161;
	                this.constants();

	            } else if(la_===2) {
	                this.state = 3162;
	                this.expressions();

	            }
	            this.state = 3165;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, MySqlParser.RULE_deleteStatement);
	    try {
	        this.state = 3170;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3168;
	            this.singleDeleteStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3169;
	            this.multipleDeleteStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, MySqlParser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3172;
	        this.match(MySqlParser.DO);
	        this.state = 3173;
	        this.expressions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerStatement() {
	    let localctx = new HandlerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, MySqlParser.RULE_handlerStatement);
	    try {
	        this.state = 3179;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3175;
	            this.handlerOpenStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3176;
	            this.handlerReadIndexStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3177;
	            this.handlerReadStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3178;
	            this.handlerCloseStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatement() {
	    let localctx = new InsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, MySqlParser.RULE_insertStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3181;
	        this.match(MySqlParser.INSERT);
	        this.state = 3183;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43 || _la===75 || _la===106) {
	            this.state = 3182;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===75 || _la===106)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3186;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 3185;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===87) {
	            this.state = 3188;
	            this.match(MySqlParser.INTO);
	        }

	        this.state = 3191;
	        this.tableName();
	        this.state = 3198;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 3192;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3193;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3195;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 3194;
	                localctx.partitions = this.uidList();
	            }

	            this.state = 3197;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 3223;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 152:
	        case 188:
	        case 669:
	        case 1133:
	            this.state = 3205;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,421,this._ctx);
	            if(la_===1) {
	                this.state = 3200;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3202;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,420,this._ctx);
	                if(la_===1) {
	                    this.state = 3201;
	                    localctx.columns = this.fullColumnNameList();

	                }
	                this.state = 3204;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 3207;
	            this.insertStatementValue();
	            this.state = 3212;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,423,this._ctx);
	            if(la_===1) {
	                this.state = 3209;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===12) {
	                    this.state = 3208;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 3211;
	                this.uid();

	            }
	            break;
	        case 153:
	            this.state = 3214;
	            this.match(MySqlParser.SET);
	            this.state = 3215;
	            localctx.setFirst = this.updatedElement();
	            this.state = 3220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3216;
	                this.match(MySqlParser.COMMA);
	                this.state = 3217;
	                localctx._updatedElement = this.updatedElement();
	                localctx.setElements.push(localctx._updatedElement);
	                this.state = 3222;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3237;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===118) {
	            this.state = 3225;
	            this.match(MySqlParser.ON);
	            this.state = 3226;
	            this.match(MySqlParser.DUPLICATE);
	            this.state = 3227;
	            this.match(MySqlParser.KEY);
	            this.state = 3228;
	            this.match(MySqlParser.UPDATE);
	            this.state = 3229;
	            localctx.duplicatedFirst = this.updatedElement();
	            this.state = 3234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3230;
	                this.match(MySqlParser.COMMA);
	                this.state = 3231;
	                localctx._updatedElement = this.updatedElement();
	                localctx.duplicatedElements.push(localctx._updatedElement);
	                this.state = 3236;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataStatement() {
	    let localctx = new LoadDataStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, MySqlParser.RULE_loadDataStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3239;
	        this.match(MySqlParser.LOAD);
	        this.state = 3240;
	        this.match(MySqlParser.DATA);
	        this.state = 3242;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106 || _la===374) {
	            this.state = 3241;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===106 || _la===374)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3244;
	            this.match(MySqlParser.LOCAL);
	        }

	        this.state = 3247;
	        this.match(MySqlParser.INFILE);
	        this.state = 3248;
	        localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 3250;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78 || _la===141) {
	            this.state = 3249;
	            localctx.violation = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===78 || _la===141)) {
	                localctx.violation = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3252;
	        this.match(MySqlParser.INTO);
	        this.state = 3253;
	        this.match(MySqlParser.TABLE);
	        this.state = 3254;
	        this.tableName();
	        this.state = 3260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 3255;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3256;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3257;
	            this.uidList();
	            this.state = 3258;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 3265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 3262;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 3263;
	            this.match(MySqlParser.SET);
	            this.state = 3264;
	            localctx.charset = this.charsetName();
	        }

	        this.state = 3273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===365 || _la===427) {
	            this.state = 3267;
	            localctx.fieldsFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===365 || _la===427)) {
	                localctx.fieldsFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3269; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3268;
	                this.selectFieldsInto();
	                this.state = 3271; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===56 || _la===58 || _la===122 || _la===173);
	        }

	        this.state = 3281;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===101) {
	            this.state = 3275;
	            this.match(MySqlParser.LINES);
	            this.state = 3277; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3276;
	                this.selectLinesInto();
	                this.state = 3279; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===169 || _la===173);
	        }

	        this.state = 3287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 3283;
	            this.match(MySqlParser.IGNORE);
	            this.state = 3284;
	            this.decimalLiteral();
	            this.state = 3285;
	            localctx.linesFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===101 || _la===601)) {
	                localctx.linesFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
	        if(la_===1) {
	            this.state = 3289;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3290;
	            this.assignmentField();
	            this.state = 3295;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3291;
	                this.match(MySqlParser.COMMA);
	                this.state = 3292;
	                this.assignmentField();
	                this.state = 3297;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3298;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 3311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,441,this._ctx);
	        if(la_===1) {
	            this.state = 3302;
	            this.match(MySqlParser.SET);
	            this.state = 3303;
	            this.updatedElement();
	            this.state = 3308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3304;
	                this.match(MySqlParser.COMMA);
	                this.state = 3305;
	                this.updatedElement();
	                this.state = 3310;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadXmlStatement() {
	    let localctx = new LoadXmlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, MySqlParser.RULE_loadXmlStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3313;
	        this.match(MySqlParser.LOAD);
	        this.state = 3314;
	        this.match(MySqlParser.XML);
	        this.state = 3316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106 || _la===374) {
	            this.state = 3315;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===106 || _la===374)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3319;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===474) {
	            this.state = 3318;
	            this.match(MySqlParser.LOCAL);
	        }

	        this.state = 3321;
	        this.match(MySqlParser.INFILE);
	        this.state = 3322;
	        localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	        this.state = 3324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78 || _la===141) {
	            this.state = 3323;
	            localctx.violation = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===78 || _la===141)) {
	                localctx.violation = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3326;
	        this.match(MySqlParser.INTO);
	        this.state = 3327;
	        this.match(MySqlParser.TABLE);
	        this.state = 3328;
	        this.tableName();
	        this.state = 3332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 3329;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 3330;
	            this.match(MySqlParser.SET);
	            this.state = 3331;
	            localctx.charset = this.charsetName();
	        }

	        this.state = 3340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===601) {
	            this.state = 3334;
	            this.match(MySqlParser.ROWS);
	            this.state = 3335;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 3336;
	            this.match(MySqlParser.BY);
	            this.state = 3337;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 3338;
	            localctx.tag = this.match(MySqlParser.STRING_LITERAL);
	            this.state = 3339;
	            this.match(MySqlParser.GREATER_SYMBOL);
	        }

	        this.state = 3346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 3342;
	            this.match(MySqlParser.IGNORE);
	            this.state = 3343;
	            this.decimalLiteral();
	            this.state = 3344;
	            localctx.linesFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===101 || _la===601)) {
	                localctx.linesFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3359;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,449,this._ctx);
	        if(la_===1) {
	            this.state = 3348;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3349;
	            this.assignmentField();
	            this.state = 3354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3350;
	                this.match(MySqlParser.COMMA);
	                this.state = 3351;
	                this.assignmentField();
	                this.state = 3356;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3357;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 3370;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
	        if(la_===1) {
	            this.state = 3361;
	            this.match(MySqlParser.SET);
	            this.state = 3362;
	            this.updatedElement();
	            this.state = 3367;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3363;
	                this.match(MySqlParser.COMMA);
	                this.state = 3364;
	                this.updatedElement();
	                this.state = 3369;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceStatement() {
	    let localctx = new ReplaceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, MySqlParser.RULE_replaceStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3372;
	        this.match(MySqlParser.REPLACE);
	        this.state = 3374;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43 || _la===106) {
	            this.state = 3373;
	            localctx.priority = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===43 || _la===106)) {
	                localctx.priority = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===87) {
	            this.state = 3376;
	            this.match(MySqlParser.INTO);
	        }

	        this.state = 3379;
	        this.tableName();
	        this.state = 3385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 3380;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3381;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3382;
	            localctx.partitions = this.uidList();
	            this.state = 3383;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 3403;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 152:
	        case 188:
	        case 669:
	        case 1133:
	            this.state = 3391;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
	            if(la_===1) {
	                this.state = 3387;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3388;
	                localctx.columns = this.uidList();
	                this.state = 3389;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            this.state = 3393;
	            this.insertStatementValue();
	            break;
	        case 153:
	            this.state = 3394;
	            this.match(MySqlParser.SET);
	            this.state = 3395;
	            localctx.setFirst = this.updatedElement();
	            this.state = 3400;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3396;
	                this.match(MySqlParser.COMMA);
	                this.state = 3397;
	                localctx._updatedElement = this.updatedElement();
	                localctx.setElements.push(localctx._updatedElement);
	                this.state = 3402;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, MySqlParser.RULE_selectStatement);
	    var _la = 0;
	    try {
	        this.state = 3470;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3405;
	            this.querySpecification();
	            this.state = 3407;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,458,this._ctx);
	            if(la_===1) {
	                this.state = 3406;
	                this.lockClause();

	            }
	            break;

	        case 2:
	            localctx = new ParenthesisSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3409;
	            this.queryExpression();
	            this.state = 3411;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,459,this._ctx);
	            if(la_===1) {
	                this.state = 3410;
	                this.lockClause();

	            }
	            break;

	        case 3:
	            localctx = new UnionSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3415;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 152:
	                this.state = 3413;
	                this.querySpecificationNointo();
	                break;
	            case 1133:
	                this.state = 3414;
	                this.queryExpressionNointo();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 3418; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3417;
	            		this.unionStatement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3420; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,461, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 3430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===180) {
	                this.state = 3422;
	                this.match(MySqlParser.UNION);
	                this.state = 3424;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===6 || _la===49) {
	                    this.state = 3423;
	                    localctx.unionType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===6 || _la===49)) {
	                        localctx.unionType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 3428;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 152:
	                    this.state = 3426;
	                    this.querySpecification();
	                    break;
	                case 1133:
	                    this.state = 3427;
	                    this.queryExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 3433;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	            if(la_===1) {
	                this.state = 3432;
	                this.orderByClause();

	            }
	            this.state = 3436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===99) {
	                this.state = 3435;
	                this.limitClause();
	            }

	            this.state = 3439;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
	            if(la_===1) {
	                this.state = 3438;
	                this.lockClause();

	            }
	            break;

	        case 4:
	            localctx = new UnionParenthesisSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3441;
	            this.queryExpressionNointo();
	            this.state = 3443; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3442;
	            		this.unionParenthesis();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3445; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,468, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 3452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===180) {
	                this.state = 3447;
	                this.match(MySqlParser.UNION);
	                this.state = 3449;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===6 || _la===49) {
	                    this.state = 3448;
	                    localctx.unionType = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===6 || _la===49)) {
	                        localctx.unionType = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 3451;
	                this.queryExpression();
	            }

	            this.state = 3455;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	            if(la_===1) {
	                this.state = 3454;
	                this.orderByClause();

	            }
	            this.state = 3458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===99) {
	                this.state = 3457;
	                this.limitClause();
	            }

	            this.state = 3461;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	            if(la_===1) {
	                this.state = 3460;
	                this.lockClause();

	            }
	            break;

	        case 5:
	            localctx = new WithLateralStatementContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3463;
	            this.querySpecificationNointo();
	            this.state = 3466; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3464;
	                this.match(MySqlParser.COMMA);
	                this.state = 3465;
	                this.lateralStatement();
	                this.state = 3468; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1135);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateStatement() {
	    let localctx = new UpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, MySqlParser.RULE_updateStatement);
	    try {
	        this.state = 3474;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,476,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3472;
	            this.singleUpdateStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3473;
	            this.multipleUpdateStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesStatement() {
	    let localctx = new ValuesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, MySqlParser.RULE_valuesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3476;
	        this.match(MySqlParser.VALUES);
	        this.state = 3477;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 3479;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
	        if(la_===1) {
	            this.state = 3478;
	            this.expressionsWithDefaults();

	        }
	        this.state = 3481;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 3490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 3482;
	            this.match(MySqlParser.COMMA);
	            this.state = 3483;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3485;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,478,this._ctx);
	            if(la_===1) {
	                this.state = 3484;
	                this.expressionsWithDefaults();

	            }
	            this.state = 3487;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 3492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatementValue() {
	    let localctx = new InsertStatementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, MySqlParser.RULE_insertStatementValue);
	    var _la = 0;
	    try {
	        this.state = 3511;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 152:
	        case 1133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3493;
	            this.selectStatement();
	            break;
	        case 188:
	        case 669:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3494;
	            localctx.insertFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===188 || _la===669)) {
	                localctx.insertFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3495;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,480,this._ctx);
	            if(la_===1) {
	                this.state = 3496;
	                this.expressionsWithDefaults();

	            }
	            this.state = 3499;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 3508;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3500;
	                this.match(MySqlParser.COMMA);
	                this.state = 3501;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3503;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,481,this._ctx);
	                if(la_===1) {
	                    this.state = 3502;
	                    this.expressionsWithDefaults();

	                }
	                this.state = 3505;
	                this.match(MySqlParser.RR_BRACKET);
	                this.state = 3510;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updatedElement() {
	    let localctx = new UpdatedElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, MySqlParser.RULE_updatedElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3513;
	        this.fullColumnName();
	        this.state = 3514;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 3517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,484,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3515;
	            this.expression(0);
	            break;

	        case 2:
	            this.state = 3516;
	            this.match(MySqlParser.DEFAULT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentField() {
	    let localctx = new AssignmentFieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, MySqlParser.RULE_assignmentField);
	    try {
	        this.state = 3521;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 14:
	        case 18:
	        case 29:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 48:
	        case 55:
	        case 57:
	        case 59:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 94:
	        case 97:
	        case 117:
	        case 121:
	        case 124:
	        case 130:
	        case 140:
	        case 141:
	        case 148:
	        case 150:
	        case 158:
	        case 168:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1145:
	        case 1148:
	        case 1156:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3519;
	            this.uid();
	            break;
	        case 1159:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3520;
	            this.match(MySqlParser.LOCAL_ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockClause() {
	    let localctx = new LockClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, MySqlParser.RULE_lockClause);
	    try {
	        this.state = 3529;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3523;
	            this.match(MySqlParser.FOR);
	            this.state = 3524;
	            this.match(MySqlParser.UPDATE);
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3525;
	            this.match(MySqlParser.LOCK);
	            this.state = 3526;
	            this.match(MySqlParser.IN);
	            this.state = 3527;
	            this.match(MySqlParser.SHARE);
	            this.state = 3528;
	            this.match(MySqlParser.MODE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleDeleteStatement() {
	    let localctx = new SingleDeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, MySqlParser.RULE_singleDeleteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3531;
	        this.match(MySqlParser.DELETE);
	        this.state = 3533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106) {
	            this.state = 3532;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 3536;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===568) {
	            this.state = 3535;
	            this.match(MySqlParser.QUICK);
	        }

	        this.state = 3539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 3538;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3541;
	        this.match(MySqlParser.FROM);
	        this.state = 3542;
	        this.tableName();
	        this.state = 3547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
	        if(la_===1) {
	            this.state = 3544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 3543;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 3546;
	            this.uid();

	        }
	        this.state = 3554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 3549;
	            this.match(MySqlParser.PARTITION);
	            this.state = 3550;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3551;
	            this.uidList();
	            this.state = 3552;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 3558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 3556;
	            this.match(MySqlParser.WHERE);
	            this.state = 3557;
	            this.expression(0);
	        }

	        this.state = 3561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124) {
	            this.state = 3560;
	            this.orderByClause();
	        }

	        this.state = 3565;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 3563;
	            this.match(MySqlParser.LIMIT);
	            this.state = 3564;
	            this.limitClauseAtom();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleDeleteStatement() {
	    let localctx = new MultipleDeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, MySqlParser.RULE_multipleDeleteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3567;
	        this.match(MySqlParser.DELETE);
	        this.state = 3569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106) {
	            this.state = 3568;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 3572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,497,this._ctx);
	        if(la_===1) {
	            this.state = 3571;
	            this.match(MySqlParser.QUICK);

	        }
	        this.state = 3575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 3574;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3616;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 14:
	        case 18:
	        case 29:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 48:
	        case 55:
	        case 57:
	        case 59:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 94:
	        case 97:
	        case 117:
	        case 121:
	        case 124:
	        case 130:
	        case 140:
	        case 141:
	        case 148:
	        case 150:
	        case 158:
	        case 168:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1145:
	        case 1148:
	        case 1156:
	            this.state = 3577;
	            this.tableName();
	            this.state = 3580;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1132) {
	                this.state = 3578;
	                this.match(MySqlParser.DOT);
	                this.state = 3579;
	                this.match(MySqlParser.STAR);
	            }

	            this.state = 3590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3582;
	                this.match(MySqlParser.COMMA);
	                this.state = 3583;
	                this.tableName();
	                this.state = 3586;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===1132) {
	                    this.state = 3584;
	                    this.match(MySqlParser.DOT);
	                    this.state = 3585;
	                    this.match(MySqlParser.STAR);
	                }

	                this.state = 3592;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3593;
	            this.match(MySqlParser.FROM);
	            this.state = 3594;
	            this.tableSources();
	            break;
	        case 68:
	            this.state = 3596;
	            this.match(MySqlParser.FROM);
	            this.state = 3597;
	            this.tableName();
	            this.state = 3600;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1132) {
	                this.state = 3598;
	                this.match(MySqlParser.DOT);
	                this.state = 3599;
	                this.match(MySqlParser.STAR);
	            }

	            this.state = 3610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 3602;
	                this.match(MySqlParser.COMMA);
	                this.state = 3603;
	                this.tableName();
	                this.state = 3606;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===1132) {
	                    this.state = 3604;
	                    this.match(MySqlParser.DOT);
	                    this.state = 3605;
	                    this.match(MySqlParser.STAR);
	                }

	                this.state = 3612;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3613;
	            this.match(MySqlParser.USING);
	            this.state = 3614;
	            this.tableSources();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 3618;
	            this.match(MySqlParser.WHERE);
	            this.state = 3619;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerOpenStatement() {
	    let localctx = new HandlerOpenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, MySqlParser.RULE_handlerOpenStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3622;
	        this.match(MySqlParser.HANDLER);
	        this.state = 3623;
	        this.tableName();
	        this.state = 3624;
	        this.match(MySqlParser.OPEN);
	        this.state = 3629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,508,this._ctx);
	        if(la_===1) {
	            this.state = 3626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 3625;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 3628;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerReadIndexStatement() {
	    let localctx = new HandlerReadIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, MySqlParser.RULE_handlerReadIndexStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3631;
	        this.match(MySqlParser.HANDLER);
	        this.state = 3632;
	        this.tableName();
	        this.state = 3633;
	        this.match(MySqlParser.READ);
	        this.state = 3634;
	        localctx.index = this.uid();
	        this.state = 3641;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1124:
	        case 1125:
	        case 1126:
	        case 1127:
	            this.state = 3635;
	            this.comparisonOperator();
	            this.state = 3636;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3637;
	            this.constants();
	            this.state = 3638;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 430:
	        case 469:
	        case 520:
	        case 562:
	            this.state = 3640;
	            localctx.moveOrder = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===430 || _la===469 || _la===520 || _la===562)) {
	                localctx.moveOrder = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 3643;
	            this.match(MySqlParser.WHERE);
	            this.state = 3644;
	            this.expression(0);
	        }

	        this.state = 3649;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 3647;
	            this.match(MySqlParser.LIMIT);
	            this.state = 3648;
	            this.limitClauseAtom();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerReadStatement() {
	    let localctx = new HandlerReadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, MySqlParser.RULE_handlerReadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3651;
	        this.match(MySqlParser.HANDLER);
	        this.state = 3652;
	        this.tableName();
	        this.state = 3653;
	        this.match(MySqlParser.READ);
	        this.state = 3654;
	        localctx.moveOrder = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===430 || _la===520)) {
	            localctx.moveOrder = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 3655;
	            this.match(MySqlParser.WHERE);
	            this.state = 3656;
	            this.expression(0);
	        }

	        this.state = 3661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 3659;
	            this.match(MySqlParser.LIMIT);
	            this.state = 3660;
	            this.limitClauseAtom();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerCloseStatement() {
	    let localctx = new HandlerCloseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, MySqlParser.RULE_handlerCloseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3663;
	        this.match(MySqlParser.HANDLER);
	        this.state = 3664;
	        this.tableName();
	        this.state = 3665;
	        this.match(MySqlParser.CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleUpdateStatement() {
	    let localctx = new SingleUpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, MySqlParser.RULE_singleUpdateStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3667;
	        this.match(MySqlParser.UPDATE);
	        this.state = 3669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106) {
	            this.state = 3668;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 3672;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 3671;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3674;
	        this.tableName();
	        this.state = 3679;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537155584) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 3676;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 3675;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 3678;
	            this.uid();
	        }

	        this.state = 3681;
	        this.match(MySqlParser.SET);
	        this.state = 3682;
	        this.updatedElement();
	        this.state = 3687;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 3683;
	            this.match(MySqlParser.COMMA);
	            this.state = 3684;
	            this.updatedElement();
	            this.state = 3689;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 3690;
	            this.match(MySqlParser.WHERE);
	            this.state = 3691;
	            this.expression(0);
	        }

	        this.state = 3695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124) {
	            this.state = 3694;
	            this.orderByClause();
	        }

	        this.state = 3698;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 3697;
	            this.limitClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multipleUpdateStatement() {
	    let localctx = new MultipleUpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, MySqlParser.RULE_multipleUpdateStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3700;
	        this.match(MySqlParser.UPDATE);
	        this.state = 3702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===106) {
	            this.state = 3701;
	            localctx.priority = this.match(MySqlParser.LOW_PRIORITY);
	        }

	        this.state = 3705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 3704;
	            this.match(MySqlParser.IGNORE);
	        }

	        this.state = 3707;
	        this.tableSources();
	        this.state = 3708;
	        this.match(MySqlParser.SET);
	        this.state = 3709;
	        this.updatedElement();
	        this.state = 3714;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 3710;
	            this.match(MySqlParser.COMMA);
	            this.state = 3711;
	            this.updatedElement();
	            this.state = 3716;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 3717;
	            this.match(MySqlParser.WHERE);
	            this.state = 3718;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, MySqlParser.RULE_orderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3721;
	        this.match(MySqlParser.ORDER);
	        this.state = 3722;
	        this.match(MySqlParser.BY);
	        this.state = 3723;
	        this.orderByExpression();
	        this.state = 3728;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,526,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3724;
	                this.match(MySqlParser.COMMA);
	                this.state = 3725;
	                this.orderByExpression(); 
	            }
	            this.state = 3730;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,526,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByExpression() {
	    let localctx = new OrderByExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, MySqlParser.RULE_orderByExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3731;
	        this.expression(0);
	        this.state = 3733;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,527,this._ctx);
	        if(la_===1) {
	            this.state = 3732;
	            localctx.order = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===13 || _la===45)) {
	                localctx.order = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSources() {
	    let localctx = new TableSourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, MySqlParser.RULE_tableSources);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3735;
	        this.tableSource();
	        this.state = 3740;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,528,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3736;
	                this.match(MySqlParser.COMMA);
	                this.state = 3737;
	                this.tableSource(); 
	            }
	            this.state = 3742;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,528,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSource() {
	    let localctx = new TableSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, MySqlParser.RULE_tableSource);
	    var _la = 0;
	    try {
	        this.state = 3761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableSourceBaseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3743;
	            this.tableSourceItem();
	            this.state = 3747;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,529,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3744;
	                    this.joinPart(); 
	                }
	                this.state = 3749;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,529,this._ctx);
	            }

	            break;

	        case 2:
	            localctx = new TableSourceNestedContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3750;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3751;
	            this.tableSourceItem();
	            this.state = 3755;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===34 || ((((_la - 83)) & ~0x1f) === 0 && ((1 << (_la - 83)) & 1073758337) !== 0) || _la===148 || _la===171) {
	                this.state = 3752;
	                this.joinPart();
	                this.state = 3757;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3758;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            localctx = new TableJsonContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3760;
	            this.jsonTable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSourceItem() {
	    let localctx = new TableSourceItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, MySqlParser.RULE_tableSourceItem);
	    var _la = 0;
	    try {
	        this.state = 3803;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,539,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AtomTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3763;
	            this.tableName();
	            this.state = 3769;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===129) {
	                this.state = 3764;
	                this.match(MySqlParser.PARTITION);
	                this.state = 3765;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3766;
	                this.uidList();
	                this.state = 3767;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            this.state = 3775;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,534,this._ctx);
	            if(la_===1) {
	                this.state = 3772;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===12) {
	                    this.state = 3771;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 3774;
	                localctx.alias = this.uid();

	            }
	            this.state = 3785;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,536,this._ctx);
	            if(la_===1) {
	                this.state = 3777;
	                this.indexHint();
	                this.state = 3782;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,535,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 3778;
	                        this.match(MySqlParser.COMMA);
	                        this.state = 3779;
	                        this.indexHint(); 
	                    }
	                    this.state = 3784;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,535,this._ctx);
	                }


	            }
	            break;

	        case 2:
	            localctx = new SubqueryTableItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3792;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,537,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3787;
	                this.selectStatement();
	                break;

	            case 2:
	                this.state = 3788;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 3789;
	                localctx.parenthesisSubquery = this.selectStatement();
	                this.state = 3790;
	                this.match(MySqlParser.RR_BRACKET);
	                break;

	            }
	            this.state = 3795;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 3794;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 3797;
	            localctx.alias = this.uid();
	            break;

	        case 3:
	            localctx = new TableSourcesItemContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3799;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3800;
	            this.tableSources();
	            this.state = 3801;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHint() {
	    let localctx = new IndexHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, MySqlParser.RULE_indexHint);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3805;
	        localctx.indexHintAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===66 || _la===78 || _la===186)) {
	            localctx.indexHintAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3806;
	        localctx.keyFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===81 || _la===91)) {
	            localctx.keyFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3809;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 3807;
	            this.match(MySqlParser.FOR);
	            this.state = 3808;
	            this.indexHintType();
	        }

	        this.state = 3811;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 3812;
	        this.uidList();
	        this.state = 3813;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintType() {
	    let localctx = new IndexHintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, MySqlParser.RULE_indexHintType);
	    try {
	        this.state = 3820;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 90:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3815;
	            this.match(MySqlParser.JOIN);
	            break;
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3816;
	            this.match(MySqlParser.ORDER);
	            this.state = 3817;
	            this.match(MySqlParser.BY);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3818;
	            this.match(MySqlParser.GROUP);
	            this.state = 3819;
	            this.match(MySqlParser.BY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinPart() {
	    let localctx = new JoinPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, MySqlParser.RULE_joinPart);
	    var _la = 0;
	    try {
	        this.state = 3869;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	        case 83:
	        case 90:
	            localctx = new InnerJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34 || _la===83) {
	                this.state = 3822;
	                _la = this._input.LA(1);
	                if(!(_la===34 || _la===83)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3825;
	            this.match(MySqlParser.JOIN);
	            this.state = 3827;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,543,this._ctx);
	            if(la_===1) {
	                this.state = 3826;
	                this.match(MySqlParser.LATERAL);

	            }
	            this.state = 3829;
	            this.tableSourceItem();
	            this.state = 3833;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,544,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3830;
	                    this.joinSpec(); 
	                }
	                this.state = 3835;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,544,this._ctx);
	            }

	            break;
	        case 171:
	            localctx = new StraightJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3836;
	            this.match(MySqlParser.STRAIGHT_JOIN);
	            this.state = 3837;
	            this.tableSourceItem();
	            this.state = 3842;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,545,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3838;
	                    this.match(MySqlParser.ON);
	                    this.state = 3839;
	                    this.expression(0); 
	                }
	                this.state = 3844;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,545,this._ctx);
	            }

	            break;
	        case 97:
	        case 148:
	            localctx = new OuterJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3845;
	            _la = this._input.LA(1);
	            if(!(_la===97 || _la===148)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===126) {
	                this.state = 3846;
	                this.match(MySqlParser.OUTER);
	            }

	            this.state = 3849;
	            this.match(MySqlParser.JOIN);
	            this.state = 3851;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,547,this._ctx);
	            if(la_===1) {
	                this.state = 3850;
	                this.match(MySqlParser.LATERAL);

	            }
	            this.state = 3853;
	            this.tableSourceItem();
	            this.state = 3857;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,548,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3854;
	                    this.joinSpec(); 
	                }
	                this.state = 3859;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,548,this._ctx);
	            }

	            break;
	        case 113:
	            localctx = new NaturalJoinContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3860;
	            this.match(MySqlParser.NATURAL);
	            this.state = 3865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===97 || _la===148) {
	                this.state = 3861;
	                _la = this._input.LA(1);
	                if(!(_la===97 || _la===148)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 3863;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===126) {
	                    this.state = 3862;
	                    this.match(MySqlParser.OUTER);
	                }

	            }

	            this.state = 3867;
	            this.match(MySqlParser.JOIN);
	            this.state = 3868;
	            this.tableSourceItem();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinSpec() {
	    let localctx = new JoinSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, MySqlParser.RULE_joinSpec);
	    try {
	        this.state = 3878;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 118:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3871;
	            this.match(MySqlParser.ON);
	            this.state = 3872;
	            this.expression(0);
	            break;
	        case 187:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3873;
	            this.match(MySqlParser.USING);
	            this.state = 3874;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3875;
	            this.uidList();
	            this.state = 3876;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpression() {
	    let localctx = new QueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, MySqlParser.RULE_queryExpression);
	    try {
	        this.state = 3888;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,553,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3880;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3881;
	            this.querySpecification();
	            this.state = 3882;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3884;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3885;
	            this.queryExpression();
	            this.state = 3886;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionNointo() {
	    let localctx = new QueryExpressionNointoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, MySqlParser.RULE_queryExpressionNointo);
	    try {
	        this.state = 3898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,554,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3890;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3891;
	            this.querySpecificationNointo();
	            this.state = 3892;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3894;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 3895;
	            this.queryExpressionNointo();
	            this.state = 3896;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, MySqlParser.RULE_querySpecification);
	    var _la = 0;
	    try {
	        this.state = 3954;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,569,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3900;
	            this.match(MySqlParser.SELECT);
	            this.state = 3904;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,555,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3901;
	                    this.selectSpec(); 
	                }
	                this.state = 3906;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,555,this._ctx);
	            }

	            this.state = 3907;
	            this.selectElements();
	            this.state = 3909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===87) {
	                this.state = 3908;
	                this.selectIntoExpression();
	            }

	            this.state = 3911;
	            this.fromClause();
	            this.state = 3913;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,557,this._ctx);
	            if(la_===1) {
	                this.state = 3912;
	                this.groupByClause();

	            }
	            this.state = 3916;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===74) {
	                this.state = 3915;
	                this.havingClause();
	            }

	            this.state = 3919;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===676) {
	                this.state = 3918;
	                this.windowClause();
	            }

	            this.state = 3922;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,560,this._ctx);
	            if(la_===1) {
	                this.state = 3921;
	                this.orderByClause();

	            }
	            this.state = 3925;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,561,this._ctx);
	            if(la_===1) {
	                this.state = 3924;
	                this.limitClause();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3927;
	            this.match(MySqlParser.SELECT);
	            this.state = 3931;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,562,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3928;
	                    this.selectSpec(); 
	                }
	                this.state = 3933;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,562,this._ctx);
	            }

	            this.state = 3934;
	            this.selectElements();
	            this.state = 3935;
	            this.fromClause();
	            this.state = 3937;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,563,this._ctx);
	            if(la_===1) {
	                this.state = 3936;
	                this.groupByClause();

	            }
	            this.state = 3940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===74) {
	                this.state = 3939;
	                this.havingClause();
	            }

	            this.state = 3943;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===676) {
	                this.state = 3942;
	                this.windowClause();
	            }

	            this.state = 3946;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,566,this._ctx);
	            if(la_===1) {
	                this.state = 3945;
	                this.orderByClause();

	            }
	            this.state = 3949;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,567,this._ctx);
	            if(la_===1) {
	                this.state = 3948;
	                this.limitClause();

	            }
	            this.state = 3952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===87) {
	                this.state = 3951;
	                this.selectIntoExpression();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecificationNointo() {
	    let localctx = new QuerySpecificationNointoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, MySqlParser.RULE_querySpecificationNointo);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3956;
	        this.match(MySqlParser.SELECT);
	        this.state = 3960;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,570,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3957;
	                this.selectSpec(); 
	            }
	            this.state = 3962;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,570,this._ctx);
	        }

	        this.state = 3963;
	        this.selectElements();
	        this.state = 3964;
	        this.fromClause();
	        this.state = 3966;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,571,this._ctx);
	        if(la_===1) {
	            this.state = 3965;
	            this.groupByClause();

	        }
	        this.state = 3969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===74) {
	            this.state = 3968;
	            this.havingClause();
	        }

	        this.state = 3972;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===676) {
	            this.state = 3971;
	            this.windowClause();
	        }

	        this.state = 3975;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,574,this._ctx);
	        if(la_===1) {
	            this.state = 3974;
	            this.orderByClause();

	        }
	        this.state = 3978;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,575,this._ctx);
	        if(la_===1) {
	            this.state = 3977;
	            this.limitClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionParenthesis() {
	    let localctx = new UnionParenthesisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, MySqlParser.RULE_unionParenthesis);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3980;
	        this.match(MySqlParser.UNION);
	        this.state = 3982;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6 || _la===49) {
	            this.state = 3981;
	            localctx.unionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===6 || _la===49)) {
	                localctx.unionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3984;
	        this.queryExpressionNointo();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionStatement() {
	    let localctx = new UnionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, MySqlParser.RULE_unionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3986;
	        this.match(MySqlParser.UNION);
	        this.state = 3988;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6 || _la===49) {
	            this.state = 3987;
	            localctx.unionType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===6 || _la===49)) {
	                localctx.unionType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 3992;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 152:
	            this.state = 3990;
	            this.querySpecificationNointo();
	            break;
	        case 1133:
	            this.state = 3991;
	            this.queryExpressionNointo();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lateralStatement() {
	    let localctx = new LateralStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, MySqlParser.RULE_lateralStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3994;
	        this.match(MySqlParser.LATERAL);
	        this.state = 4009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,582,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3995;
	            this.querySpecificationNointo();
	            break;

	        case 2:
	            this.state = 3996;
	            this.queryExpressionNointo();
	            break;

	        case 3:
	            this.state = 3997;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4000;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 152:
	                this.state = 3998;
	                this.querySpecificationNointo();
	                break;
	            case 1133:
	                this.state = 3999;
	                this.queryExpressionNointo();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 4002;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 4007;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,581,this._ctx);
	            if(la_===1) {
	                this.state = 4004;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===12) {
	                    this.state = 4003;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 4006;
	                this.uid();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonTable() {
	    let localctx = new JsonTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, MySqlParser.RULE_jsonTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4011;
	        this.match(MySqlParser.JSON_TABLE);
	        this.state = 4012;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 4013;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 4014;
	        this.match(MySqlParser.COMMA);
	        this.state = 4015;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 4016;
	        this.match(MySqlParser.COLUMNS);
	        this.state = 4017;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 4018;
	        this.jsonColumnList();
	        this.state = 4019;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 4020;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 4025;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,584,this._ctx);
	        if(la_===1) {
	            this.state = 4022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 4021;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 4024;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonColumnList() {
	    let localctx = new JsonColumnListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, MySqlParser.RULE_jsonColumnList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4027;
	        this.jsonColumn();
	        this.state = 4032;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 4028;
	            this.match(MySqlParser.COMMA);
	            this.state = 4029;
	            this.jsonColumn();
	            this.state = 4034;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonColumn() {
	    let localctx = new JsonColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, MySqlParser.RULE_jsonColumn);
	    var _la = 0;
	    try {
	        this.state = 4064;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,591,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4035;
	            this.fullColumnName();
	            this.state = 4052;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 65:
	                this.state = 4036;
	                this.match(MySqlParser.FOR);
	                this.state = 4037;
	                this.match(MySqlParser.ORDINALITY);
	                break;
	            case 25:
	            case 153:
	            case 196:
	            case 197:
	            case 198:
	            case 199:
	            case 200:
	            case 201:
	            case 202:
	            case 203:
	            case 204:
	            case 205:
	            case 206:
	            case 207:
	            case 208:
	            case 209:
	            case 211:
	            case 212:
	            case 213:
	            case 214:
	            case 215:
	            case 216:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 222:
	            case 223:
	            case 224:
	            case 225:
	            case 226:
	            case 227:
	            case 228:
	            case 229:
	            case 230:
	            case 231:
	            case 232:
	            case 233:
	            case 234:
	            case 235:
	            case 236:
	            case 237:
	            case 239:
	            case 346:
	            case 348:
	            case 349:
	            case 431:
	            case 466:
	            case 518:
	            case 803:
	            case 804:
	            case 805:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	                this.state = 4038;
	                this.dataType();
	                this.state = 4050;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 285:
	                    this.state = 4039;
	                    this.match(MySqlParser.PATH);
	                    this.state = 4040;
	                    this.match(MySqlParser.STRING_LITERAL);
	                    this.state = 4042;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,586,this._ctx);
	                    if(la_===1) {
	                        this.state = 4041;
	                        this.jsonOnEmpty();

	                    }
	                    this.state = 4045;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===42 || _la===116 || _la===411) {
	                        this.state = 4044;
	                        this.jsonOnError();
	                    }

	                    break;
	                case 60:
	                    this.state = 4047;
	                    this.match(MySqlParser.EXISTS);
	                    this.state = 4048;
	                    this.match(MySqlParser.PATH);
	                    this.state = 4049;
	                    this.match(MySqlParser.STRING_LITERAL);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4054;
	            this.match(MySqlParser.NESTED);
	            this.state = 4056;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===285) {
	                this.state = 4055;
	                this.match(MySqlParser.PATH);
	            }

	            this.state = 4058;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 4059;
	            this.match(MySqlParser.COLUMNS);
	            this.state = 4060;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4061;
	            this.jsonColumnList();
	            this.state = 4062;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonOnEmpty() {
	    let localctx = new JsonOnEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, MySqlParser.RULE_jsonOnEmpty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4070;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	            this.state = 4066;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;
	        case 411:
	            this.state = 4067;
	            this.match(MySqlParser.ERROR);
	            break;
	        case 42:
	            this.state = 4068;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 4069;
	            this.defaultValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4072;
	        this.match(MySqlParser.ON);
	        this.state = 4073;
	        this.match(MySqlParser.EMPTY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonOnError() {
	    let localctx = new JsonOnErrorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, MySqlParser.RULE_jsonOnError);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4079;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	            this.state = 4075;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;
	        case 411:
	            this.state = 4076;
	            this.match(MySqlParser.ERROR);
	            break;
	        case 42:
	            this.state = 4077;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 4078;
	            this.defaultValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 4081;
	        this.match(MySqlParser.ON);
	        this.state = 4082;
	        this.match(MySqlParser.ERROR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectSpec() {
	    let localctx = new SelectSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, MySqlParser.RULE_selectSpec);
	    var _la = 0;
	    try {
	        this.state = 4092;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 49:
	        case 50:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4084;
	            _la = this._input.LA(1);
	            if(!(_la===6 || _la===49 || _la===50)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4085;
	            this.match(MySqlParser.HIGH_PRIORITY);
	            break;
	        case 171:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4086;
	            this.match(MySqlParser.STRAIGHT_JOIN);
	            break;
	        case 166:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4087;
	            this.match(MySqlParser.SQL_SMALL_RESULT);
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4088;
	            this.match(MySqlParser.SQL_BIG_RESULT);
	            break;
	        case 625:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4089;
	            this.match(MySqlParser.SQL_BUFFER_RESULT);
	            break;
	        case 626:
	        case 627:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4090;
	            _la = this._input.LA(1);
	            if(!(_la===626 || _la===627)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 165:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4091;
	            this.match(MySqlParser.SQL_CALC_FOUND_ROWS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectElements() {
	    let localctx = new SelectElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, MySqlParser.RULE_selectElements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4096;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4094;
	            localctx.star = this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            this.state = 4095;
	            this.selectElement();
	            break;

	        }
	        this.state = 4102;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,596,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4098;
	                this.match(MySqlParser.COMMA);
	                this.state = 4099;
	                this.selectElement(); 
	            }
	            this.state = 4104;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,596,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectElement() {
	    let localctx = new SelectElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, MySqlParser.RULE_selectElement);
	    var _la = 0;
	    try {
	        this.state = 4134;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,604,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectStarElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4105;
	            this.fullId();
	            this.state = 4106;
	            this.match(MySqlParser.DOT);
	            this.state = 4107;
	            this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            localctx = new SelectColumnElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4109;
	            this.fullColumnName();
	            this.state = 4114;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,598,this._ctx);
	            if(la_===1) {
	                this.state = 4111;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===12) {
	                    this.state = 4110;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 4113;
	                this.uid();

	            }
	            break;

	        case 3:
	            localctx = new SelectFunctionElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4116;
	            this.functionCall();
	            this.state = 4121;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,600,this._ctx);
	            if(la_===1) {
	                this.state = 4118;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===12) {
	                    this.state = 4117;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 4120;
	                this.uid();

	            }
	            break;

	        case 4:
	            localctx = new SelectExpressionElementContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4125;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,601,this._ctx);
	            if(la_===1) {
	                this.state = 4123;
	                this.match(MySqlParser.LOCAL_ID);
	                this.state = 4124;
	                this.match(MySqlParser.VAR_ASSIGN);

	            }
	            this.state = 4127;
	            this.expression(0);
	            this.state = 4132;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,603,this._ctx);
	            if(la_===1) {
	                this.state = 4129;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===12) {
	                    this.state = 4128;
	                    this.match(MySqlParser.AS);
	                }

	                this.state = 4131;
	                this.uid();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectIntoExpression() {
	    let localctx = new SelectIntoExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, MySqlParser.RULE_selectIntoExpression);
	    var _la = 0;
	    try {
	        this.state = 4172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,611,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SelectIntoVariablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4136;
	            this.match(MySqlParser.INTO);
	            this.state = 4137;
	            this.assignmentField();
	            this.state = 4142;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 4138;
	                this.match(MySqlParser.COMMA);
	                this.state = 4139;
	                this.assignmentField();
	                this.state = 4144;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new SelectIntoDumpFileContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4145;
	            this.match(MySqlParser.INTO);
	            this.state = 4146;
	            this.match(MySqlParser.DUMPFILE);
	            this.state = 4147;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 3:
	            localctx = new SelectIntoTextFileContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4148;
	            this.match(MySqlParser.INTO);
	            this.state = 4149;
	            this.match(MySqlParser.OUTFILE);
	            this.state = 4150;
	            localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	            this.state = 4154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 4151;
	                this.match(MySqlParser.CHARACTER);
	                this.state = 4152;
	                this.match(MySqlParser.SET);
	                this.state = 4153;
	                localctx.charset = this.charsetName();
	            }

	            this.state = 4162;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,608,this._ctx);
	            if(la_===1) {
	                this.state = 4156;
	                localctx.fieldsFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===365 || _la===427)) {
	                    localctx.fieldsFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 4158; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 4157;
	                    this.selectFieldsInto();
	                    this.state = 4160; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===56 || _la===58 || _la===122 || _la===173);

	            }
	            this.state = 4170;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===101) {
	                this.state = 4164;
	                this.match(MySqlParser.LINES);
	                this.state = 4166; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 4165;
	                    this.selectLinesInto();
	                    this.state = 4168; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(_la===169 || _la===173);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectFieldsInto() {
	    let localctx = new SelectFieldsIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, MySqlParser.RULE_selectFieldsInto);
	    var _la = 0;
	    try {
	        this.state = 4186;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 173:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4174;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 4175;
	            this.match(MySqlParser.BY);
	            this.state = 4176;
	            localctx.terminationField = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 56:
	        case 122:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===122) {
	                this.state = 4177;
	                this.match(MySqlParser.OPTIONALLY);
	            }

	            this.state = 4180;
	            this.match(MySqlParser.ENCLOSED);
	            this.state = 4181;
	            this.match(MySqlParser.BY);
	            this.state = 4182;
	            localctx.enclosion = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4183;
	            this.match(MySqlParser.ESCAPED);
	            this.state = 4184;
	            this.match(MySqlParser.BY);
	            this.state = 4185;
	            localctx.escaping = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectLinesInto() {
	    let localctx = new SelectLinesIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, MySqlParser.RULE_selectLinesInto);
	    try {
	        this.state = 4194;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 169:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4188;
	            this.match(MySqlParser.STARTING);
	            this.state = 4189;
	            this.match(MySqlParser.BY);
	            this.state = 4190;
	            localctx.starting = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4191;
	            this.match(MySqlParser.TERMINATED);
	            this.state = 4192;
	            this.match(MySqlParser.BY);
	            this.state = 4193;
	            localctx.terminationLine = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, MySqlParser.RULE_fromClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4198;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 4196;
	            this.match(MySqlParser.FROM);
	            this.state = 4197;
	            this.tableSources();
	        }

	        this.state = 4202;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===190) {
	            this.state = 4200;
	            this.match(MySqlParser.WHERE);
	            this.state = 4201;
	            localctx.whereExpr = this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, MySqlParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4204;
	        this.match(MySqlParser.GROUP);
	        this.state = 4205;
	        this.match(MySqlParser.BY);
	        this.state = 4206;
	        this.groupByItem();
	        this.state = 4211;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,617,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4207;
	                this.match(MySqlParser.COMMA);
	                this.state = 4208;
	                this.groupByItem(); 
	            }
	            this.state = 4213;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,617,this._ctx);
	        }

	        this.state = 4216;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,618,this._ctx);
	        if(la_===1) {
	            this.state = 4214;
	            this.match(MySqlParser.WITH);
	            this.state = 4215;
	            this.match(MySqlParser.ROLLUP);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, MySqlParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4218;
	        this.match(MySqlParser.HAVING);
	        this.state = 4219;
	        localctx.havingExpr = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowClause() {
	    let localctx = new WindowClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, MySqlParser.RULE_windowClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4221;
	        this.match(MySqlParser.WINDOW);
	        this.state = 4222;
	        this.windowName();
	        this.state = 4223;
	        this.match(MySqlParser.AS);
	        this.state = 4224;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 4225;
	        this.windowSpec();
	        this.state = 4226;
	        this.match(MySqlParser.RR_BRACKET);
	        this.state = 4236;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,619,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4227;
	                this.match(MySqlParser.COMMA);
	                this.state = 4228;
	                this.windowName();
	                this.state = 4229;
	                this.match(MySqlParser.AS);
	                this.state = 4230;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 4231;
	                this.windowSpec();
	                this.state = 4232;
	                this.match(MySqlParser.RR_BRACKET); 
	            }
	            this.state = 4238;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,619,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByItem() {
	    let localctx = new GroupByItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, MySqlParser.RULE_groupByItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4239;
	        this.expression(0);
	        this.state = 4241;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,620,this._ctx);
	        if(la_===1) {
	            this.state = 4240;
	            localctx.order = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===13 || _la===45)) {
	                localctx.order = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, MySqlParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4243;
	        this.match(MySqlParser.LIMIT);
	        this.state = 4254;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,622,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4247;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,621,this._ctx);
	            if(la_===1) {
	                this.state = 4244;
	                localctx.offset = this.limitClauseAtom();
	                this.state = 4245;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 4249;
	            localctx.limit = this.limitClauseAtom();
	            break;

	        case 2:
	            this.state = 4250;
	            localctx.limit = this.limitClauseAtom();
	            this.state = 4251;
	            this.match(MySqlParser.OFFSET);
	            this.state = 4252;
	            localctx.offset = this.limitClauseAtom();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClauseAtom() {
	    let localctx = new LimitClauseAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, MySqlParser.RULE_limitClauseAtom);
	    try {
	        this.state = 4259;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1138:
	        case 1139:
	        case 1140:
	        case 1149:
	        case 1151:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4256;
	            this.decimalLiteral();
	            break;
	        case 1159:
	        case 1160:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4257;
	            this.mysqlVariable();
	            break;
	        case 11:
	        case 14:
	        case 18:
	        case 29:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 48:
	        case 55:
	        case 57:
	        case 59:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 94:
	        case 97:
	        case 117:
	        case 121:
	        case 124:
	        case 130:
	        case 140:
	        case 141:
	        case 148:
	        case 150:
	        case 158:
	        case 168:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1156:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4258;
	            this.simpleId();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTransaction() {
	    let localctx = new StartTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, MySqlParser.RULE_startTransaction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4261;
	        this.match(MySqlParser.START);
	        this.state = 4262;
	        this.match(MySqlParser.TRANSACTION);
	        this.state = 4271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,625,this._ctx);
	        if(la_===1) {
	            this.state = 4263;
	            this.transactionMode();
	            this.state = 4268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 4264;
	                this.match(MySqlParser.COMMA);
	                this.state = 4265;
	                this.transactionMode();
	                this.state = 4270;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginWork() {
	    let localctx = new BeginWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, MySqlParser.RULE_beginWork);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4273;
	        this.match(MySqlParser.BEGIN);
	        this.state = 4275;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===678) {
	            this.state = 4274;
	            this.match(MySqlParser.WORK);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitWork() {
	    let localctx = new CommitWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, MySqlParser.RULE_commitWork);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4277;
	        this.match(MySqlParser.COMMIT);
	        this.state = 4279;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===678) {
	            this.state = 4278;
	            this.match(MySqlParser.WORK);
	        }

	        this.state = 4286;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10) {
	            this.state = 4281;
	            this.match(MySqlParser.AND);
	            this.state = 4283;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===521) {
	                this.state = 4282;
	                localctx.nochain = this.match(MySqlParser.NO);
	            }

	            this.state = 4285;
	            this.match(MySqlParser.CHAIN);
	        }

	        this.state = 4292;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,631,this._ctx);
	        if(la_===1) {
	            this.state = 4289;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===521) {
	                this.state = 4288;
	                localctx.norelease = this.match(MySqlParser.NO);
	            }

	            this.state = 4291;
	            this.match(MySqlParser.RELEASE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackWork() {
	    let localctx = new RollbackWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, MySqlParser.RULE_rollbackWork);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4294;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 4296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===678) {
	            this.state = 4295;
	            this.match(MySqlParser.WORK);
	        }

	        this.state = 4303;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10) {
	            this.state = 4298;
	            this.match(MySqlParser.AND);
	            this.state = 4300;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===521) {
	                this.state = 4299;
	                localctx.nochain = this.match(MySqlParser.NO);
	            }

	            this.state = 4302;
	            this.match(MySqlParser.CHAIN);
	        }

	        this.state = 4309;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,636,this._ctx);
	        if(la_===1) {
	            this.state = 4306;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===521) {
	                this.state = 4305;
	                localctx.norelease = this.match(MySqlParser.NO);
	            }

	            this.state = 4308;
	            this.match(MySqlParser.RELEASE);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepointStatement() {
	    let localctx = new SavepointStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, MySqlParser.RULE_savepointStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4311;
	        this.match(MySqlParser.SAVEPOINT);
	        this.state = 4312;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackStatement() {
	    let localctx = new RollbackStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, MySqlParser.RULE_rollbackStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4314;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 4316;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===678) {
	            this.state = 4315;
	            this.match(MySqlParser.WORK);
	        }

	        this.state = 4318;
	        this.match(MySqlParser.TO);
	        this.state = 4320;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,638,this._ctx);
	        if(la_===1) {
	            this.state = 4319;
	            this.match(MySqlParser.SAVEPOINT);

	        }
	        this.state = 4322;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	releaseStatement() {
	    let localctx = new ReleaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, MySqlParser.RULE_releaseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4324;
	        this.match(MySqlParser.RELEASE);
	        this.state = 4325;
	        this.match(MySqlParser.SAVEPOINT);
	        this.state = 4326;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockTables() {
	    let localctx = new LockTablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, MySqlParser.RULE_lockTables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4328;
	        this.match(MySqlParser.LOCK);
	        this.state = 4329;
	        _la = this._input.LA(1);
	        if(!(_la===172 || _la===742)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4330;
	        this.lockTableElement();
	        this.state = 4335;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 4331;
	            this.match(MySqlParser.COMMA);
	            this.state = 4332;
	            this.lockTableElement();
	            this.state = 4337;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===527 || _la===674) {
	            this.state = 4338;
	            this.waitNowaitClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlockTables() {
	    let localctx = new UnlockTablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, MySqlParser.RULE_unlockTables);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4341;
	        this.match(MySqlParser.UNLOCK);
	        this.state = 4342;
	        this.match(MySqlParser.TABLES);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAutocommitStatement() {
	    let localctx = new SetAutocommitStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, MySqlParser.RULE_setAutocommitStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4344;
	        this.match(MySqlParser.SET);
	        this.state = 4345;
	        this.match(MySqlParser.AUTOCOMMIT);
	        this.state = 4346;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 4347;
	        localctx.autocommitValue = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===1138 || _la===1139)) {
	            localctx.autocommitValue = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTransactionStatement() {
	    let localctx = new SetTransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, MySqlParser.RULE_setTransactionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4349;
	        this.match(MySqlParser.SET);
	        this.state = 4351;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===439 || _la===609) {
	            this.state = 4350;
	            localctx.transactionContext = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===439 || _la===609)) {
	                localctx.transactionContext = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 4353;
	        this.match(MySqlParser.TRANSACTION);
	        this.state = 4354;
	        this.transactionOption();
	        this.state = 4359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 4355;
	            this.match(MySqlParser.COMMA);
	            this.state = 4356;
	            this.transactionOption();
	            this.state = 4361;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, MySqlParser.RULE_transactionMode);
	    try {
	        this.state = 4369;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,643,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4362;
	            this.match(MySqlParser.WITH);
	            this.state = 4363;
	            this.match(MySqlParser.CONSISTENT);
	            this.state = 4364;
	            this.match(MySqlParser.SNAPSHOT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4365;
	            this.match(MySqlParser.READ);
	            this.state = 4366;
	            this.match(MySqlParser.WRITE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4367;
	            this.match(MySqlParser.READ);
	            this.state = 4368;
	            this.match(MySqlParser.ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockTableElement() {
	    let localctx = new LockTableElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, MySqlParser.RULE_lockTableElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4371;
	        this.tableName();
	        this.state = 4376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537155584) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 4373;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 4372;
	                this.match(MySqlParser.AS);
	            }

	            this.state = 4375;
	            this.uid();
	        }

	        this.state = 4378;
	        this.lockAction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockAction() {
	    let localctx = new LockActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, MySqlParser.RULE_lockAction);
	    var _la = 0;
	    try {
	        this.state = 4388;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 134:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4380;
	            this.match(MySqlParser.READ);
	            this.state = 4382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===474) {
	                this.state = 4381;
	                this.match(MySqlParser.LOCAL);
	            }

	            break;
	        case 106:
	        case 193:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 4384;
	                this.match(MySqlParser.LOW_PRIORITY);
	            }

	            this.state = 4387;
	            this.match(MySqlParser.WRITE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionOption() {
	    let localctx = new TransactionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, MySqlParser.RULE_transactionOption);
	    try {
	        this.state = 4397;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,649,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4390;
	            this.match(MySqlParser.ISOLATION);
	            this.state = 4391;
	            this.match(MySqlParser.LEVEL);
	            this.state = 4392;
	            this.transactionLevel();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4393;
	            this.match(MySqlParser.READ);
	            this.state = 4394;
	            this.match(MySqlParser.WRITE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4395;
	            this.match(MySqlParser.READ);
	            this.state = 4396;
	            this.match(MySqlParser.ONLY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionLevel() {
	    let localctx = new TransactionLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, MySqlParser.RULE_transactionLevel);
	    try {
	        this.state = 4406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,650,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4399;
	            this.match(MySqlParser.REPEATABLE);
	            this.state = 4400;
	            this.match(MySqlParser.READ);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4401;
	            this.match(MySqlParser.READ);
	            this.state = 4402;
	            this.match(MySqlParser.COMMITTED);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4403;
	            this.match(MySqlParser.READ);
	            this.state = 4404;
	            this.match(MySqlParser.UNCOMMITTED);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4405;
	            this.match(MySqlParser.SERIALIZABLE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeMaster() {
	    let localctx = new ChangeMasterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, MySqlParser.RULE_changeMaster);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4408;
	        this.match(MySqlParser.CHANGE);
	        this.state = 4409;
	        this.match(MySqlParser.MASTER);
	        this.state = 4410;
	        this.match(MySqlParser.TO);
	        this.state = 4411;
	        this.masterOption();
	        this.state = 4416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 4412;
	            this.match(MySqlParser.COMMA);
	            this.state = 4413;
	            this.masterOption();
	            this.state = 4418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 4419;
	            this.channelOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeReplicationFilter() {
	    let localctx = new ChangeReplicationFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, MySqlParser.RULE_changeReplicationFilter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4422;
	        this.match(MySqlParser.CHANGE);
	        this.state = 4423;
	        this.match(MySqlParser.REPLICATION);
	        this.state = 4424;
	        this.match(MySqlParser.FILTER);
	        this.state = 4425;
	        this.replicationFilter();
	        this.state = 4430;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 4426;
	            this.match(MySqlParser.COMMA);
	            this.state = 4427;
	            this.replicationFilter();
	            this.state = 4432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	purgeBinaryLogs() {
	    let localctx = new PurgeBinaryLogsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, MySqlParser.RULE_purgeBinaryLogs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4433;
	        this.match(MySqlParser.PURGE);
	        this.state = 4434;
	        localctx.purgeFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===226 || _la===477)) {
	            localctx.purgeFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4435;
	        this.match(MySqlParser.LOGS);
	        this.state = 4440;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 175:
	            this.state = 4436;
	            this.match(MySqlParser.TO);
	            this.state = 4437;
	            localctx.fileName = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 15:
	            this.state = 4438;
	            this.match(MySqlParser.BEFORE);
	            this.state = 4439;
	            localctx.timeValue = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetMaster() {
	    let localctx = new ResetMasterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, MySqlParser.RULE_resetMaster);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4442;
	        this.match(MySqlParser.RESET);
	        this.state = 4443;
	        this.match(MySqlParser.MASTER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetSlave() {
	    let localctx = new ResetSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, MySqlParser.RULE_resetSlave);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4445;
	        this.match(MySqlParser.RESET);
	        this.state = 4446;
	        this.match(MySqlParser.SLAVE);
	        this.state = 4448;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 4447;
	            this.match(MySqlParser.ALL);
	        }

	        this.state = 4451;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 4450;
	            this.channelOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startSlave() {
	    let localctx = new StartSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, MySqlParser.RULE_startSlave);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4453;
	        this.match(MySqlParser.START);
	        this.state = 4454;
	        this.match(MySqlParser.SLAVE);
	        this.state = 4463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===462 || _la===628) {
	            this.state = 4455;
	            this.threadType();
	            this.state = 4460;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 4456;
	                this.match(MySqlParser.COMMA);
	                this.state = 4457;
	                this.threadType();
	                this.state = 4462;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 4467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===663) {
	            this.state = 4465;
	            this.match(MySqlParser.UNTIL);
	            this.state = 4466;
	            this.untilOption();
	        }

	        this.state = 4472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===391 || _la===551 || _la===555 || _la===665) {
	            this.state = 4469;
	            this.connectionOption();
	            this.state = 4474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4476;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 4475;
	            this.channelOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopSlave() {
	    let localctx = new StopSlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, MySqlParser.RULE_stopSlave);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4478;
	        this.match(MySqlParser.STOP);
	        this.state = 4479;
	        this.match(MySqlParser.SLAVE);
	        this.state = 4488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===462 || _la===628) {
	            this.state = 4480;
	            this.threadType();
	            this.state = 4485;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 4481;
	                this.match(MySqlParser.COMMA);
	                this.state = 4482;
	                this.threadType();
	                this.state = 4487;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startGroupReplication() {
	    let localctx = new StartGroupReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, MySqlParser.RULE_startGroupReplication);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4490;
	        this.match(MySqlParser.START);
	        this.state = 4491;
	        this.match(MySqlParser.GROUP_REPLICATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stopGroupReplication() {
	    let localctx = new StopGroupReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, MySqlParser.RULE_stopGroupReplication);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4493;
	        this.match(MySqlParser.STOP);
	        this.state = 4494;
	        this.match(MySqlParser.GROUP_REPLICATION);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	masterOption() {
	    let localctx = new MasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, MySqlParser.RULE_masterOption);
	    var _la = 0;
	    try {
	        this.state = 4525;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 107:
	        case 482:
	        case 483:
	        case 485:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 575:
	            localctx = new MasterStringOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4496;
	            this.stringMasterOption();
	            this.state = 4497;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4498;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 479:
	        case 480:
	        case 484:
	        case 486:
	        case 487:
	        case 576:
	            localctx = new MasterDecimalOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4500;
	            this.decimalMasterOption();
	            this.state = 4501;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4502;
	            this.decimalLiteral();
	            break;
	        case 108:
	        case 478:
	        case 488:
	            localctx = new MasterBoolOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4504;
	            this.boolMasterOption();
	            this.state = 4505;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4506;
	            localctx.boolVal = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===1138 || _la===1139)) {
	                localctx.boolVal = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 481:
	            localctx = new MasterRealOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4508;
	            this.match(MySqlParser.MASTER_HEARTBEAT_PERIOD);
	            this.state = 4509;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4510;
	            this.match(MySqlParser.REAL_LITERAL);
	            break;
	        case 449:
	            localctx = new MasterUidListOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4511;
	            this.match(MySqlParser.IGNORE_SERVER_IDS);
	            this.state = 4512;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4513;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4522;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	                this.state = 4514;
	                this.uid();
	                this.state = 4519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 4515;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 4516;
	                    this.uid();
	                    this.state = 4521;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 4524;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringMasterOption() {
	    let localctx = new StringMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, MySqlParser.RULE_stringMasterOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4527;
	        _la = this._input.LA(1);
	        if(!(_la===107 || ((((_la - 482)) & ~0x1f) === 0 && ((1 << (_la - 482)) & 65419) !== 0) || _la===575)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalMasterOption() {
	    let localctx = new DecimalMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, MySqlParser.RULE_decimalMasterOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4529;
	        _la = this._input.LA(1);
	        if(!(((((_la - 479)) & ~0x1f) === 0 && ((1 << (_la - 479)) & 419) !== 0) || _la===576)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolMasterOption() {
	    let localctx = new BoolMasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, MySqlParser.RULE_boolMasterOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4531;
	        _la = this._input.LA(1);
	        if(!(_la===108 || _la===478 || _la===488)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	channelOption() {
	    let localctx = new ChannelOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, MySqlParser.RULE_channelOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4533;
	        this.match(MySqlParser.FOR);
	        this.state = 4534;
	        this.match(MySqlParser.CHANNEL);
	        this.state = 4535;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationFilter() {
	    let localctx = new ReplicationFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, MySqlParser.RULE_replicationFilter);
	    var _la = 0;
	    try {
	        this.state = 4586;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 581:
	            localctx = new DoDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4537;
	            this.match(MySqlParser.REPLICATE_DO_DB);
	            this.state = 4538;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4539;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4540;
	            this.uidList();
	            this.state = 4541;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 583:
	            localctx = new IgnoreDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4543;
	            this.match(MySqlParser.REPLICATE_IGNORE_DB);
	            this.state = 4544;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4545;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4546;
	            this.uidList();
	            this.state = 4547;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 582:
	            localctx = new DoTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4549;
	            this.match(MySqlParser.REPLICATE_DO_TABLE);
	            this.state = 4550;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4551;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4552;
	            this.tables();
	            this.state = 4553;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 584:
	            localctx = new IgnoreTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4555;
	            this.match(MySqlParser.REPLICATE_IGNORE_TABLE);
	            this.state = 4556;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4557;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4558;
	            this.tables();
	            this.state = 4559;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 586:
	            localctx = new WildDoTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4561;
	            this.match(MySqlParser.REPLICATE_WILD_DO_TABLE);
	            this.state = 4562;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4563;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4564;
	            this.simpleStrings();
	            this.state = 4565;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 587:
	            localctx = new WildIgnoreTableReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4567;
	            this.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE);
	            this.state = 4568;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4569;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4570;
	            this.simpleStrings();
	            this.state = 4571;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 585:
	            localctx = new RewriteDbReplicationContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4573;
	            this.match(MySqlParser.REPLICATE_REWRITE_DB);
	            this.state = 4574;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4575;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 4576;
	            this.tablePair();
	            this.state = 4581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 4577;
	                this.match(MySqlParser.COMMA);
	                this.state = 4578;
	                this.tablePair();
	                this.state = 4583;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4584;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePair() {
	    let localctx = new TablePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, MySqlParser.RULE_tablePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4588;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 4589;
	        localctx.firstTable = this.tableName();
	        this.state = 4590;
	        this.match(MySqlParser.COMMA);
	        this.state = 4591;
	        localctx.secondTable = this.tableName();
	        this.state = 4592;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	threadType() {
	    let localctx = new ThreadTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, MySqlParser.RULE_threadType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4594;
	        _la = this._input.LA(1);
	        if(!(_la===462 || _la===628)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	untilOption() {
	    let localctx = new UntilOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, MySqlParser.RULE_untilOption);
	    var _la = 0;
	    try {
	        this.state = 4614;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 622:
	        case 624:
	            localctx = new GtidsUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4596;
	            localctx.gtids = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===622 || _la===624)) {
	                localctx.gtids = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4597;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4598;
	            this.gtuidSet();
	            break;
	        case 483:
	            localctx = new MasterLogUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4599;
	            this.match(MySqlParser.MASTER_LOG_FILE);
	            this.state = 4600;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4601;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 4602;
	            this.match(MySqlParser.COMMA);
	            this.state = 4603;
	            this.match(MySqlParser.MASTER_LOG_POS);
	            this.state = 4604;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4605;
	            this.decimalLiteral();
	            break;
	        case 575:
	            localctx = new RelayLogUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4606;
	            this.match(MySqlParser.RELAY_LOG_FILE);
	            this.state = 4607;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4608;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 4609;
	            this.match(MySqlParser.COMMA);
	            this.state = 4610;
	            this.match(MySqlParser.RELAY_LOG_POS);
	            this.state = 4611;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4612;
	            this.decimalLiteral();
	            break;
	        case 623:
	            localctx = new SqlGapsUntilOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4613;
	            this.match(MySqlParser.SQL_AFTER_MTS_GAPS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectionOption() {
	    let localctx = new ConnectionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, MySqlParser.RULE_connectionOption);
	    try {
	        this.state = 4628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 665:
	            localctx = new UserConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4616;
	            this.match(MySqlParser.USER);
	            this.state = 4617;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4618;
	            localctx.conOptUser = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 551:
	            localctx = new PasswordConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4619;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 4620;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4621;
	            localctx.conOptPassword = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 391:
	            localctx = new DefaultAuthConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4622;
	            this.match(MySqlParser.DEFAULT_AUTH);
	            this.state = 4623;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4624;
	            localctx.conOptDefAuth = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 555:
	            localctx = new PluginDirConnectionOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4625;
	            this.match(MySqlParser.PLUGIN_DIR);
	            this.state = 4626;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 4627;
	            localctx.conOptPluginDir = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gtuidSet() {
	    let localctx = new GtuidSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, MySqlParser.RULE_gtuidSet);
	    var _la = 0;
	    try {
	        this.state = 4639;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1138:
	        case 1139:
	        case 1140:
	        case 1149:
	        case 1151:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4630;
	            this.uuidSet();
	            this.state = 4635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 4631;
	                this.match(MySqlParser.COMMA);
	                this.state = 4632;
	                this.uuidSet();
	                this.state = 4637;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 1148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4638;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaStartTransaction() {
	    let localctx = new XaStartTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, MySqlParser.RULE_xaStartTransaction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4641;
	        this.match(MySqlParser.XA);
	        this.state = 4642;
	        localctx.xaStart = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===344 || _la===629)) {
	            localctx.xaStart = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4643;
	        this.xid();
	        this.state = 4645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90 || _la===591) {
	            this.state = 4644;
	            localctx.xaAction = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===90 || _la===591)) {
	                localctx.xaAction = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaEndTransaction() {
	    let localctx = new XaEndTransactionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, MySqlParser.RULE_xaEndTransaction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4647;
	        this.match(MySqlParser.XA);
	        this.state = 4648;
	        this.match(MySqlParser.END);
	        this.state = 4649;
	        this.xid();
	        this.state = 4655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===643) {
	            this.state = 4650;
	            this.match(MySqlParser.SUSPEND);
	            this.state = 4653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 4651;
	                this.match(MySqlParser.FOR);
	                this.state = 4652;
	                this.match(MySqlParser.MIGRATE);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaPrepareStatement() {
	    let localctx = new XaPrepareStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, MySqlParser.RULE_xaPrepareStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4657;
	        this.match(MySqlParser.XA);
	        this.state = 4658;
	        this.match(MySqlParser.PREPARE);
	        this.state = 4659;
	        this.xid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaCommitWork() {
	    let localctx = new XaCommitWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, MySqlParser.RULE_xaCommitWork);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4661;
	        this.match(MySqlParser.XA);
	        this.state = 4662;
	        this.match(MySqlParser.COMMIT);
	        this.state = 4663;
	        this.xid();
	        this.state = 4666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===536) {
	            this.state = 4664;
	            this.match(MySqlParser.ONE);
	            this.state = 4665;
	            this.match(MySqlParser.PHASE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaRollbackWork() {
	    let localctx = new XaRollbackWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, MySqlParser.RULE_xaRollbackWork);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4668;
	        this.match(MySqlParser.XA);
	        this.state = 4669;
	        this.match(MySqlParser.ROLLBACK);
	        this.state = 4670;
	        this.xid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaRecoverWork() {
	    let localctx = new XaRecoverWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, MySqlParser.RULE_xaRecoverWork);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4672;
	        this.match(MySqlParser.XA);
	        this.state = 4673;
	        this.match(MySqlParser.RECOVER);
	        this.state = 4676;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===32) {
	            this.state = 4674;
	            this.match(MySqlParser.CONVERT);
	            this.state = 4675;
	            this.xid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prepareStatement() {
	    let localctx = new PrepareStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, MySqlParser.RULE_prepareStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4678;
	        this.match(MySqlParser.PREPARE);
	        this.state = 4679;
	        this.uid();
	        this.state = 4680;
	        this.match(MySqlParser.FROM);
	        this.state = 4683;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1148:
	            this.state = 4681;
	            localctx.query = this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 1159:
	            this.state = 4682;
	            localctx.variable = this.match(MySqlParser.LOCAL_ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeStatement() {
	    let localctx = new ExecuteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, MySqlParser.RULE_executeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4685;
	        this.match(MySqlParser.EXECUTE);
	        this.state = 4686;
	        this.uid();
	        this.state = 4689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===187) {
	            this.state = 4687;
	            this.match(MySqlParser.USING);
	            this.state = 4688;
	            this.userVariables();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deallocatePrepare() {
	    let localctx = new DeallocatePrepareContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, MySqlParser.RULE_deallocatePrepare);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4691;
	        localctx.dropFormat = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===51 || _la===390)) {
	            localctx.dropFormat = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4692;
	        this.match(MySqlParser.PREPARE);
	        this.state = 4693;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineBody() {
	    let localctx = new RoutineBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, MySqlParser.RULE_routineBody);
	    try {
	        this.state = 4697;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,680,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4695;
	            this.blockStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4696;
	            this.sqlStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, MySqlParser.RULE_blockStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,681,this._ctx);
	        if(la_===1) {
	            this.state = 4699;
	            this.uid();
	            this.state = 4700;
	            this.match(MySqlParser.COLON_SYMB);

	        }
	        this.state = 4704;
	        this.match(MySqlParser.BEGIN);
	        this.state = 4710;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,682,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4705;
	                this.declareVariable();
	                this.state = 4706;
	                this.match(MySqlParser.SEMI); 
	            }
	            this.state = 4712;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,682,this._ctx);
	        }

	        this.state = 4718;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,683,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4713;
	                this.declareCondition();
	                this.state = 4714;
	                this.match(MySqlParser.SEMI); 
	            }
	            this.state = 4720;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,683,this._ctx);
	        }

	        this.state = 4726;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,684,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4721;
	                this.declareCursor();
	                this.state = 4722;
	                this.match(MySqlParser.SEMI); 
	            }
	            this.state = 4728;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,684,this._ctx);
	        }

	        this.state = 4734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===41) {
	            this.state = 4729;
	            this.declareHandler();
	            this.state = 4730;
	            this.match(MySqlParser.SEMI);
	            this.state = 4736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4740;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,686,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4737;
	                this.procedureSqlStatement(); 
	            }
	            this.state = 4742;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,686,this._ctx);
	        }

	        this.state = 4743;
	        this.match(MySqlParser.END);
	        this.state = 4745;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,687,this._ctx);
	        if(la_===1) {
	            this.state = 4744;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseStatement() {
	    let localctx = new CaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, MySqlParser.RULE_caseStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4747;
	        this.match(MySqlParser.CASE);
	        this.state = 4750;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,688,this._ctx);
	        if(la_===1) {
	            this.state = 4748;
	            this.uid();

	        } else if(la_===2) {
	            this.state = 4749;
	            this.expression(0);

	        }
	        this.state = 4753; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4752;
	            this.caseAlternative();
	            this.state = 4755; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===189);
	        this.state = 4763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53) {
	            this.state = 4757;
	            this.match(MySqlParser.ELSE);
	            this.state = 4759; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 4758;
	            		this.procedureSqlStatement();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 4761; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,690, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        }

	        this.state = 4765;
	        this.match(MySqlParser.END);
	        this.state = 4766;
	        this.match(MySqlParser.CASE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, MySqlParser.RULE_ifStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4768;
	        this.match(MySqlParser.IF);
	        this.state = 4769;
	        this.expression(0);
	        this.state = 4770;
	        this.match(MySqlParser.THEN);
	        this.state = 4772; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4771;
	        		localctx._procedureSqlStatement = this.procedureSqlStatement();
	        		localctx.thenStatements.push(localctx._procedureSqlStatement);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4774; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,692, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4779;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 4776;
	            this.elifAlternative();
	            this.state = 4781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53) {
	            this.state = 4782;
	            this.match(MySqlParser.ELSE);
	            this.state = 4784; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 4783;
	            		localctx._procedureSqlStatement = this.procedureSqlStatement();
	            		localctx.elseStatements.push(localctx._procedureSqlStatement);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 4786; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,694, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        }

	        this.state = 4790;
	        this.match(MySqlParser.END);
	        this.state = 4791;
	        this.match(MySqlParser.IF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterateStatement() {
	    let localctx = new IterateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, MySqlParser.RULE_iterateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4793;
	        this.match(MySqlParser.ITERATE);
	        this.state = 4794;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leaveStatement() {
	    let localctx = new LeaveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, MySqlParser.RULE_leaveStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4796;
	        this.match(MySqlParser.LEAVE);
	        this.state = 4797;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loopStatement() {
	    let localctx = new LoopStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, MySqlParser.RULE_loopStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4802;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 4799;
	            this.uid();
	            this.state = 4800;
	            this.match(MySqlParser.COLON_SYMB);
	        }

	        this.state = 4804;
	        this.match(MySqlParser.LOOP);
	        this.state = 4806; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4805;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4808; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,697, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4810;
	        this.match(MySqlParser.END);
	        this.state = 4811;
	        this.match(MySqlParser.LOOP);
	        this.state = 4813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 4812;
	            this.uid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatStatement() {
	    let localctx = new RepeatStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, MySqlParser.RULE_repeatStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4818;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,699,this._ctx);
	        if(la_===1) {
	            this.state = 4815;
	            this.uid();
	            this.state = 4816;
	            this.match(MySqlParser.COLON_SYMB);

	        }
	        this.state = 4820;
	        this.match(MySqlParser.REPEAT);
	        this.state = 4822; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4821;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4824; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,700, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4826;
	        this.match(MySqlParser.UNTIL);
	        this.state = 4827;
	        this.expression(0);
	        this.state = 4828;
	        this.match(MySqlParser.END);
	        this.state = 4829;
	        this.match(MySqlParser.REPEAT);
	        this.state = 4831;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 4830;
	            this.uid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, MySqlParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4833;
	        this.match(MySqlParser.RETURN);
	        this.state = 4834;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, MySqlParser.RULE_whileStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4839;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 4836;
	            this.uid();
	            this.state = 4837;
	            this.match(MySqlParser.COLON_SYMB);
	        }

	        this.state = 4841;
	        this.match(MySqlParser.WHILE);
	        this.state = 4842;
	        this.expression(0);
	        this.state = 4843;
	        this.match(MySqlParser.DO);
	        this.state = 4845; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4844;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4847; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,703, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	        this.state = 4849;
	        this.match(MySqlParser.END);
	        this.state = 4850;
	        this.match(MySqlParser.WHILE);
	        this.state = 4852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028437) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 18878545) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 2172657809) !== 0) || ((((_la - 150)) & ~0x1f) === 0 && ((1 << (_la - 150)) & 262401) !== 0) || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 5374495) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 4294967295) !== 0) || ((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 4294967231) !== 0) || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 4294967295) !== 0) || ((((_la - 379)) & ~0x1f) === 0 && ((1 << (_la - 379)) & 4127195007) !== 0) || ((((_la - 411)) & ~0x1f) === 0 && ((1 << (_la - 411)) & 4290772991) !== 0) || ((((_la - 443)) & ~0x1f) === 0 && ((1 << (_la - 443)) & 4294967039) !== 0) || ((((_la - 475)) & ~0x1f) === 0 && ((1 << (_la - 475)) & 4294967295) !== 0) || ((((_la - 507)) & ~0x1f) === 0 && ((1 << (_la - 507)) & 4294017023) !== 0) || ((((_la - 539)) & ~0x1f) === 0 && ((1 << (_la - 539)) & 4293918527) !== 0) || ((((_la - 571)) & ~0x1f) === 0 && ((1 << (_la - 571)) & 4290248703) !== 0) || ((((_la - 603)) & ~0x1f) === 0 && ((1 << (_la - 603)) & 4294967279) !== 0) || ((((_la - 635)) & ~0x1f) === 0 && ((1 << (_la - 635)) & 4294967291) !== 0) || ((((_la - 667)) & ~0x1f) === 0 && ((1 << (_la - 667)) & 2147417599) !== 0) || ((((_la - 699)) & ~0x1f) === 0 && ((1 << (_la - 699)) & 4293672959) !== 0) || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 4294967279) !== 0) || ((((_la - 763)) & ~0x1f) === 0 && ((1 << (_la - 763)) & 4294967295) !== 0) || ((((_la - 795)) & ~0x1f) === 0 && ((1 << (_la - 795)) & 4294965759) !== 0) || ((((_la - 827)) & ~0x1f) === 0 && ((1 << (_la - 827)) & 4294967295) !== 0) || ((((_la - 859)) & ~0x1f) === 0 && ((1 << (_la - 859)) & 4294967295) !== 0) || ((((_la - 891)) & ~0x1f) === 0 && ((1 << (_la - 891)) & 4294967295) !== 0) || ((((_la - 923)) & ~0x1f) === 0 && ((1 << (_la - 923)) & 4294967295) !== 0) || ((((_la - 955)) & ~0x1f) === 0 && ((1 << (_la - 955)) & 4294967295) !== 0) || ((((_la - 987)) & ~0x1f) === 0 && ((1 << (_la - 987)) & 4294967295) !== 0) || ((((_la - 1019)) & ~0x1f) === 0 && ((1 << (_la - 1019)) & 4294967295) !== 0) || ((((_la - 1051)) & ~0x1f) === 0 && ((1 << (_la - 1051)) & 4294967295) !== 0) || ((((_la - 1083)) & ~0x1f) === 0 && ((1 << (_la - 1083)) & 33554431) !== 0) || ((((_la - 1123)) & ~0x1f) === 0 && ((1 << (_la - 1123)) & 37748737) !== 0) || _la===1156) {
	            this.state = 4851;
	            this.uid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorStatement() {
	    let localctx = new CursorStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, MySqlParser.RULE_cursorStatement);
	    var _la = 0;
	    try {
	        this.state = 4869;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 361:
	            localctx = new CloseCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4854;
	            this.match(MySqlParser.CLOSE);
	            this.state = 4855;
	            this.uid();
	            break;
	        case 64:
	            localctx = new FetchCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4856;
	            this.match(MySqlParser.FETCH);
	            this.state = 4861;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,706,this._ctx);
	            if(la_===1) {
	                this.state = 4858;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===520) {
	                    this.state = 4857;
	                    this.match(MySqlParser.NEXT);
	                }

	                this.state = 4860;
	                this.match(MySqlParser.FROM);

	            }
	            this.state = 4863;
	            this.uid();
	            this.state = 4864;
	            this.match(MySqlParser.INTO);
	            this.state = 4865;
	            this.uidList();
	            break;
	        case 539:
	            localctx = new OpenCursorContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4867;
	            this.match(MySqlParser.OPEN);
	            this.state = 4868;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareVariable() {
	    let localctx = new DeclareVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, MySqlParser.RULE_declareVariable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4871;
	        this.match(MySqlParser.DECLARE);
	        this.state = 4872;
	        this.uidList();
	        this.state = 4873;
	        this.dataType();
	        this.state = 4876;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 4874;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 4875;
	            this.expression(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareCondition() {
	    let localctx = new DeclareConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, MySqlParser.RULE_declareCondition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4878;
	        this.match(MySqlParser.DECLARE);
	        this.state = 4879;
	        this.uid();
	        this.state = 4880;
	        this.match(MySqlParser.CONDITION);
	        this.state = 4881;
	        this.match(MySqlParser.FOR);
	        this.state = 4888;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1138:
	        case 1139:
	        case 1140:
	        case 1149:
	        case 1151:
	            this.state = 4882;
	            this.decimalLiteral();
	            break;
	        case 162:
	            this.state = 4883;
	            this.match(MySqlParser.SQLSTATE);
	            this.state = 4885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===669) {
	                this.state = 4884;
	                this.match(MySqlParser.VALUE);
	            }

	            this.state = 4887;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareCursor() {
	    let localctx = new DeclareCursorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, MySqlParser.RULE_declareCursor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4890;
	        this.match(MySqlParser.DECLARE);
	        this.state = 4891;
	        this.uid();
	        this.state = 4892;
	        this.match(MySqlParser.CURSOR);
	        this.state = 4893;
	        this.match(MySqlParser.FOR);
	        this.state = 4894;
	        this.selectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declareHandler() {
	    let localctx = new DeclareHandlerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, MySqlParser.RULE_declareHandler);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4896;
	        this.match(MySqlParser.DECLARE);
	        this.state = 4897;
	        localctx.handlerAction = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===31 || _la===61 || _la===179)) {
	            localctx.handlerAction = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4898;
	        this.match(MySqlParser.HANDLER);
	        this.state = 4899;
	        this.match(MySqlParser.FOR);
	        this.state = 4900;
	        this.handlerConditionValue();
	        this.state = 4905;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 4901;
	            this.match(MySqlParser.COMMA);
	            this.state = 4902;
	            this.handlerConditionValue();
	            this.state = 4907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4908;
	        this.routineBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerConditionValue() {
	    let localctx = new HandlerConditionValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, MySqlParser.RULE_handlerConditionValue);
	    var _la = 0;
	    try {
	        this.state = 4921;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1138:
	        case 1139:
	        case 1140:
	        case 1149:
	        case 1151:
	            localctx = new HandlerConditionCodeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4910;
	            this.decimalLiteral();
	            break;
	        case 162:
	            localctx = new HandlerConditionStateContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4911;
	            this.match(MySqlParser.SQLSTATE);
	            this.state = 4913;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===669) {
	                this.state = 4912;
	                this.match(MySqlParser.VALUE);
	            }

	            this.state = 4915;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 11:
	        case 14:
	        case 18:
	        case 29:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 48:
	        case 55:
	        case 57:
	        case 59:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 94:
	        case 97:
	        case 117:
	        case 121:
	        case 124:
	        case 130:
	        case 140:
	        case 141:
	        case 148:
	        case 150:
	        case 158:
	        case 168:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1145:
	        case 1148:
	        case 1156:
	            localctx = new HandlerConditionNameContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4916;
	            this.uid();
	            break;
	        case 163:
	            localctx = new HandlerConditionWarningContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4917;
	            this.match(MySqlParser.SQLWARNING);
	            break;
	        case 114:
	            localctx = new HandlerConditionNotfoundContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4918;
	            this.match(MySqlParser.NOT);
	            this.state = 4919;
	            this.match(MySqlParser.FOUND);
	            break;
	        case 161:
	            localctx = new HandlerConditionExceptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4920;
	            this.match(MySqlParser.SQLEXCEPTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSqlStatement() {
	    let localctx = new ProcedureSqlStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, MySqlParser.RULE_procedureSqlStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4925;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,714,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4923;
	            this.compoundStatement();
	            break;

	        case 2:
	            this.state = 4924;
	            this.sqlStatement();
	            break;

	        }
	        this.state = 4927;
	        this.match(MySqlParser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseAlternative() {
	    let localctx = new CaseAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, MySqlParser.RULE_caseAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4929;
	        this.match(MySqlParser.WHEN);
	        this.state = 4932;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,715,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4930;
	            this.constant();
	            break;

	        case 2:
	            this.state = 4931;
	            this.expression(0);
	            break;

	        }
	        this.state = 4934;
	        this.match(MySqlParser.THEN);
	        this.state = 4936; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4935;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4938; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,716, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elifAlternative() {
	    let localctx = new ElifAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, MySqlParser.RULE_elifAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4940;
	        this.match(MySqlParser.ELSEIF);
	        this.state = 4941;
	        this.expression(0);
	        this.state = 4942;
	        this.match(MySqlParser.THEN);
	        this.state = 4944; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 4943;
	        		this.procedureSqlStatement();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 4946; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,717, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUser() {
	    let localctx = new AlterUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, MySqlParser.RULE_alterUser);
	    var _la = 0;
	    try {
	        this.state = 5021;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,732,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterUserMysqlV56Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4948;
	            this.match(MySqlParser.ALTER);
	            this.state = 4949;
	            this.match(MySqlParser.USER);
	            this.state = 4950;
	            this.userSpecification();
	            this.state = 4955;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 4951;
	                this.match(MySqlParser.COMMA);
	                this.state = 4952;
	                this.userSpecification();
	                this.state = 4957;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new AlterUserMysqlV80Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4958;
	            this.match(MySqlParser.ALTER);
	            this.state = 4959;
	            this.match(MySqlParser.USER);
	            this.state = 4961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 4960;
	                this.ifExists();
	            }

	            this.state = 4963;
	            this.userAuthOption();
	            this.state = 4968;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 4964;
	                this.match(MySqlParser.COMMA);
	                this.state = 4965;
	                this.userAuthOption();
	                this.state = 4970;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 4985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===142) {
	                this.state = 4971;
	                this.match(MySqlParser.REQUIRE);
	                this.state = 4983;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 529:
	                    this.state = 4972;
	                    localctx.tlsNone = this.match(MySqlParser.NONE);
	                    break;
	                case 167:
	                case 358:
	                case 465:
	                case 640:
	                case 680:
	                    this.state = 4973;
	                    this.tlsOption();
	                    this.state = 4980;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===10 || _la===167 || _la===358 || _la===465 || _la===640 || _la===680) {
	                        this.state = 4975;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===10) {
	                            this.state = 4974;
	                            this.match(MySqlParser.AND);
	                        }

	                        this.state = 4977;
	                        this.tlsOption();
	                        this.state = 4982;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 4993;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,726,this._ctx);
	            if(la_===1) {
	                this.state = 4987;
	                this.match(MySqlParser.WITH);
	                this.state = 4989; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 4988;
	                    this.userResourceOption();
	                    this.state = 4991; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(((((_la - 498)) & ~0x1f) === 0 && ((1 << (_la - 498)) & 51) !== 0));

	            }
	            this.state = 4999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===332 || _la===424 || _la===551 || _la===552) {
	                this.state = 4997;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 424:
	                case 551:
	                case 552:
	                    this.state = 4995;
	                    this.userPasswordOption();
	                    break;
	                case 332:
	                    this.state = 4996;
	                    this.userLockOption();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 5001;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5006;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 368:
	            	this.state = 5002;
	            	this.match(MySqlParser.COMMENT);
	            	this.state = 5003;
	            	this.match(MySqlParser.STRING_LITERAL);
	            	break;
	            case 14:
	            	this.state = 5004;
	            	this.match(MySqlParser.ATTRIBUTE);
	            	this.state = 5005;
	            	this.match(MySqlParser.STRING_LITERAL);
	            	break;
	            case -1:
	            case 7:
	            case 9:
	            case 20:
	            case 24:
	            case 26:
	            case 33:
	            case 44:
	            case 45:
	            case 46:
	            case 51:
	            case 62:
	            case 71:
	            case 72:
	            case 85:
	            case 93:
	            case 102:
	            case 103:
	            case 119:
	            case 132:
	            case 138:
	            case 139:
	            case 141:
	            case 143:
	            case 147:
	            case 152:
	            case 153:
	            case 155:
	            case 156:
	            case 172:
	            case 182:
	            case 184:
	            case 186:
	            case 188:
	            case 192:
	            case 344:
	            case 345:
	            case 351:
	            case 356:
	            case 369:
	            case 390:
	            case 399:
	            case 432:
	            case 442:
	            case 444:
	            case 456:
	            case 560:
	            case 580:
	            case 589:
	            case 597:
	            case 604:
	            case 629:
	            case 635:
	            case 656:
	            case 661:
	            case 681:
	            case 708:
	            case 739:
	            case 1121:
	            case 1133:
	            case 1136:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 3:
	            localctx = new AlterUserMysqlV80Context(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5008;
	            this.match(MySqlParser.ALTER);
	            this.state = 5009;
	            this.match(MySqlParser.USER);
	            this.state = 5011;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,730,this._ctx);
	            if(la_===1) {
	                this.state = 5010;
	                this.ifExists();

	            }
	            this.state = 5015;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,731,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5013;
	                this.userName();
	                break;

	            case 2:
	                this.state = 5014;
	                this.uid();
	                break;

	            }
	            this.state = 5017;
	            this.match(MySqlParser.DEFAULT);
	            this.state = 5018;
	            this.match(MySqlParser.ROLE);
	            this.state = 5019;
	            this.roleOption();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUser() {
	    let localctx = new CreateUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, MySqlParser.RULE_createUser);
	    var _la = 0;
	    try {
	        this.state = 5088;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,746,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CreateUserMysqlV56Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5023;
	            this.match(MySqlParser.CREATE);
	            this.state = 5024;
	            this.match(MySqlParser.USER);
	            this.state = 5025;
	            this.userAuthOption();
	            this.state = 5030;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5026;
	                this.match(MySqlParser.COMMA);
	                this.state = 5027;
	                this.userAuthOption();
	                this.state = 5032;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new CreateUserMysqlV80Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5033;
	            this.match(MySqlParser.CREATE);
	            this.state = 5034;
	            this.match(MySqlParser.USER);
	            this.state = 5036;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 5035;
	                this.ifNotExists();
	            }

	            this.state = 5038;
	            this.userAuthOption();
	            this.state = 5043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5039;
	                this.match(MySqlParser.COMMA);
	                this.state = 5040;
	                this.userAuthOption();
	                this.state = 5045;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42) {
	                this.state = 5046;
	                this.match(MySqlParser.DEFAULT);
	                this.state = 5047;
	                this.match(MySqlParser.ROLE);
	                this.state = 5048;
	                this.roleOption();
	            }

	            this.state = 5065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===142) {
	                this.state = 5051;
	                this.match(MySqlParser.REQUIRE);
	                this.state = 5063;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 529:
	                    this.state = 5052;
	                    localctx.tlsNone = this.match(MySqlParser.NONE);
	                    break;
	                case 167:
	                case 358:
	                case 465:
	                case 640:
	                case 680:
	                    this.state = 5053;
	                    this.tlsOption();
	                    this.state = 5060;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===10 || _la===167 || _la===358 || _la===465 || _la===640 || _la===680) {
	                        this.state = 5055;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===10) {
	                            this.state = 5054;
	                            this.match(MySqlParser.AND);
	                        }

	                        this.state = 5057;
	                        this.tlsOption();
	                        this.state = 5062;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 5073;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,742,this._ctx);
	            if(la_===1) {
	                this.state = 5067;
	                this.match(MySqlParser.WITH);
	                this.state = 5069; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                do {
	                    this.state = 5068;
	                    this.userResourceOption();
	                    this.state = 5071; 
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                } while(((((_la - 498)) & ~0x1f) === 0 && ((1 << (_la - 498)) & 51) !== 0));

	            }
	            this.state = 5079;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===332 || _la===424 || _la===551 || _la===552) {
	                this.state = 5077;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 424:
	                case 551:
	                case 552:
	                    this.state = 5075;
	                    this.userPasswordOption();
	                    break;
	                case 332:
	                    this.state = 5076;
	                    this.userLockOption();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 5081;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5086;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 368:
	            	this.state = 5082;
	            	this.match(MySqlParser.COMMENT);
	            	this.state = 5083;
	            	this.match(MySqlParser.STRING_LITERAL);
	            	break;
	            case 14:
	            	this.state = 5084;
	            	this.match(MySqlParser.ATTRIBUTE);
	            	this.state = 5085;
	            	this.match(MySqlParser.STRING_LITERAL);
	            	break;
	            case -1:
	            case 7:
	            case 9:
	            case 20:
	            case 24:
	            case 26:
	            case 33:
	            case 44:
	            case 45:
	            case 46:
	            case 51:
	            case 62:
	            case 71:
	            case 72:
	            case 85:
	            case 93:
	            case 102:
	            case 103:
	            case 119:
	            case 132:
	            case 138:
	            case 139:
	            case 141:
	            case 143:
	            case 147:
	            case 152:
	            case 153:
	            case 155:
	            case 156:
	            case 172:
	            case 182:
	            case 184:
	            case 186:
	            case 188:
	            case 192:
	            case 344:
	            case 345:
	            case 351:
	            case 356:
	            case 369:
	            case 390:
	            case 399:
	            case 432:
	            case 442:
	            case 444:
	            case 456:
	            case 560:
	            case 580:
	            case 589:
	            case 597:
	            case 604:
	            case 629:
	            case 635:
	            case 656:
	            case 661:
	            case 681:
	            case 708:
	            case 739:
	            case 1121:
	            case 1133:
	            case 1136:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropUser() {
	    let localctx = new DropUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, MySqlParser.RULE_dropUser);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5090;
	        this.match(MySqlParser.DROP);
	        this.state = 5091;
	        this.match(MySqlParser.USER);
	        this.state = 5093;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===77) {
	            this.state = 5092;
	            this.ifExists();
	        }

	        this.state = 5095;
	        this.userName();
	        this.state = 5100;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 5096;
	            this.match(MySqlParser.COMMA);
	            this.state = 5097;
	            this.userName();
	            this.state = 5102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantStatement() {
	    let localctx = new GrantStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, MySqlParser.RULE_grantStatement);
	    var _la = 0;
	    try {
	        this.state = 5196;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,767,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5103;
	            this.match(MySqlParser.GRANT);
	            this.state = 5104;
	            this.privelegeClause();
	            this.state = 5109;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5105;
	                this.match(MySqlParser.COMMA);
	                this.state = 5106;
	                this.privelegeClause();
	                this.state = 5111;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5112;
	            this.match(MySqlParser.ON);
	            this.state = 5114;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,750,this._ctx);
	            if(la_===1) {
	                this.state = 5113;
	                localctx.privilegeObject = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===131 || _la===172 || _la===437)) {
	                    localctx.privilegeObject = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5116;
	            this.privilegeLevel();
	            this.state = 5117;
	            this.match(MySqlParser.TO);
	            this.state = 5118;
	            this.userAuthOption();
	            this.state = 5123;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5119;
	                this.match(MySqlParser.COMMA);
	                this.state = 5120;
	                this.userAuthOption();
	                this.state = 5125;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5140;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===142) {
	                this.state = 5126;
	                this.match(MySqlParser.REQUIRE);
	                this.state = 5138;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 529:
	                    this.state = 5127;
	                    localctx.tlsNone = this.match(MySqlParser.NONE);
	                    break;
	                case 167:
	                case 358:
	                case 465:
	                case 640:
	                case 680:
	                    this.state = 5128;
	                    this.tlsOption();
	                    this.state = 5135;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===10 || _la===167 || _la===358 || _la===465 || _la===640 || _la===680) {
	                        this.state = 5130;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===10) {
	                            this.state = 5129;
	                            this.match(MySqlParser.AND);
	                        }

	                        this.state = 5132;
	                        this.tlsOption();
	                        this.state = 5137;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	            }

	            this.state = 5151;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,758,this._ctx);
	            if(la_===1) {
	                this.state = 5142;
	                this.match(MySqlParser.WITH);
	                this.state = 5148;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,757,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 5146;
	                        this._errHandler.sync(this);
	                        switch(this._input.LA(1)) {
	                        case 72:
	                            this.state = 5143;
	                            this.match(MySqlParser.GRANT);
	                            this.state = 5144;
	                            this.match(MySqlParser.OPTION);
	                            break;
	                        case 498:
	                        case 499:
	                        case 502:
	                        case 503:
	                            this.state = 5145;
	                            this.userResourceOption();
	                            break;
	                        default:
	                            throw new antlr4.error.NoViableAltException(this);
	                        } 
	                    }
	                    this.state = 5150;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,757,this._ctx);
	                }


	            }
	            this.state = 5159;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 5153;
	                this.match(MySqlParser.AS);
	                this.state = 5154;
	                this.userName();
	                this.state = 5155;
	                this.match(MySqlParser.WITH);
	                this.state = 5156;
	                this.match(MySqlParser.ROLE);
	                this.state = 5157;
	                this.roleOption();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5161;
	            this.match(MySqlParser.GRANT);
	            this.state = 5164;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,760,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5162;
	                this.userName();
	                break;

	            case 2:
	                this.state = 5163;
	                this.uid();
	                break;

	            }
	            this.state = 5173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5166;
	                this.match(MySqlParser.COMMA);
	                this.state = 5169;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,761,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 5167;
	                    this.userName();
	                    break;

	                case 2:
	                    this.state = 5168;
	                    this.uid();
	                    break;

	                }
	                this.state = 5175;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5176;
	            this.match(MySqlParser.TO);
	            this.state = 5179;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,763,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5177;
	                this.userName();
	                break;

	            case 2:
	                this.state = 5178;
	                this.uid();
	                break;

	            }
	            this.state = 5188;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5181;
	                this.match(MySqlParser.COMMA);
	                this.state = 5184;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,764,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 5182;
	                    this.userName();
	                    break;

	                case 2:
	                    this.state = 5183;
	                    this.uid();
	                    break;

	                }
	                this.state = 5190;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5194;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,766,this._ctx);
	            if(la_===1) {
	                this.state = 5191;
	                this.match(MySqlParser.WITH);
	                this.state = 5192;
	                this.match(MySqlParser.ADMIN);
	                this.state = 5193;
	                this.match(MySqlParser.OPTION);

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleOption() {
	    let localctx = new RoleOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, MySqlParser.RULE_roleOption);
	    var _la = 0;
	    try {
	        this.state = 5220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,771,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5198;
	            this.match(MySqlParser.DEFAULT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5199;
	            this.match(MySqlParser.NONE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5200;
	            this.match(MySqlParser.ALL);
	            this.state = 5210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 5201;
	                this.match(MySqlParser.EXCEPT);
	                this.state = 5202;
	                this.userName();
	                this.state = 5207;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 5203;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 5204;
	                    this.userName();
	                    this.state = 5209;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5212;
	            this.userName();
	            this.state = 5217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5213;
	                this.match(MySqlParser.COMMA);
	                this.state = 5214;
	                this.userName();
	                this.state = 5219;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantProxy() {
	    let localctx = new GrantProxyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, MySqlParser.RULE_grantProxy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5222;
	        this.match(MySqlParser.GRANT);
	        this.state = 5223;
	        this.match(MySqlParser.PROXY);
	        this.state = 5224;
	        this.match(MySqlParser.ON);
	        this.state = 5225;
	        localctx.fromFirst = this.userName();
	        this.state = 5226;
	        this.match(MySqlParser.TO);
	        this.state = 5227;
	        localctx.toFirst = this.userName();
	        this.state = 5232;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 5228;
	            this.match(MySqlParser.COMMA);
	            this.state = 5229;
	            localctx._userName = this.userName();
	            localctx.toOther.push(localctx._userName);
	            this.state = 5234;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 5238;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,773,this._ctx);
	        if(la_===1) {
	            this.state = 5235;
	            this.match(MySqlParser.WITH);
	            this.state = 5236;
	            this.match(MySqlParser.GRANT);
	            this.state = 5237;
	            this.match(MySqlParser.OPTION);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameUser() {
	    let localctx = new RenameUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, MySqlParser.RULE_renameUser);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5240;
	        this.match(MySqlParser.RENAME);
	        this.state = 5241;
	        this.match(MySqlParser.USER);
	        this.state = 5242;
	        this.renameUserClause();
	        this.state = 5247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 5243;
	            this.match(MySqlParser.COMMA);
	            this.state = 5244;
	            this.renameUserClause();
	            this.state = 5249;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeStatement() {
	    let localctx = new RevokeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, MySqlParser.RULE_revokeStatement);
	    var _la = 0;
	    try {
	        this.state = 5320;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,786,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DetailRevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5250;
	            this.match(MySqlParser.REVOKE);
	            this.state = 5251;
	            this.privelegeClause();
	            this.state = 5256;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5252;
	                this.match(MySqlParser.COMMA);
	                this.state = 5253;
	                this.privelegeClause();
	                this.state = 5258;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5259;
	            this.match(MySqlParser.ON);
	            this.state = 5261;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,776,this._ctx);
	            if(la_===1) {
	                this.state = 5260;
	                localctx.privilegeObject = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===131 || _la===172 || _la===437)) {
	                    localctx.privilegeObject = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5263;
	            this.privilegeLevel();
	            this.state = 5264;
	            this.match(MySqlParser.FROM);
	            this.state = 5265;
	            this.userName();
	            this.state = 5270;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5266;
	                this.match(MySqlParser.COMMA);
	                this.state = 5267;
	                this.userName();
	                this.state = 5272;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new ShortRevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5273;
	            this.match(MySqlParser.REVOKE);
	            this.state = 5274;
	            this.match(MySqlParser.ALL);
	            this.state = 5276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===725) {
	                this.state = 5275;
	                this.match(MySqlParser.PRIVILEGES);
	            }

	            this.state = 5278;
	            this.match(MySqlParser.COMMA);
	            this.state = 5279;
	            this.match(MySqlParser.GRANT);
	            this.state = 5280;
	            this.match(MySqlParser.OPTION);
	            this.state = 5281;
	            this.match(MySqlParser.FROM);
	            this.state = 5282;
	            this.userName();
	            this.state = 5287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5283;
	                this.match(MySqlParser.COMMA);
	                this.state = 5284;
	                this.userName();
	                this.state = 5289;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 3:
	            localctx = new RoleRevokeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5290;
	            this.match(MySqlParser.REVOKE);
	            this.state = 5293;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,780,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5291;
	                this.userName();
	                break;

	            case 2:
	                this.state = 5292;
	                this.uid();
	                break;

	            }
	            this.state = 5302;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5295;
	                this.match(MySqlParser.COMMA);
	                this.state = 5298;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,781,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 5296;
	                    this.userName();
	                    break;

	                case 2:
	                    this.state = 5297;
	                    this.uid();
	                    break;

	                }
	                this.state = 5304;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5305;
	            this.match(MySqlParser.FROM);
	            this.state = 5308;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,783,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5306;
	                this.userName();
	                break;

	            case 2:
	                this.state = 5307;
	                this.uid();
	                break;

	            }
	            this.state = 5317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5310;
	                this.match(MySqlParser.COMMA);
	                this.state = 5313;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,784,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 5311;
	                    this.userName();
	                    break;

	                case 2:
	                    this.state = 5312;
	                    this.uid();
	                    break;

	                }
	                this.state = 5319;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revokeProxy() {
	    let localctx = new RevokeProxyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, MySqlParser.RULE_revokeProxy);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5322;
	        this.match(MySqlParser.REVOKE);
	        this.state = 5323;
	        this.match(MySqlParser.PROXY);
	        this.state = 5324;
	        this.match(MySqlParser.ON);
	        this.state = 5325;
	        localctx.onUser = this.userName();
	        this.state = 5326;
	        this.match(MySqlParser.FROM);
	        this.state = 5327;
	        localctx.fromFirst = this.userName();
	        this.state = 5332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 5328;
	            this.match(MySqlParser.COMMA);
	            this.state = 5329;
	            localctx._userName = this.userName();
	            localctx.fromOther.push(localctx._userName);
	            this.state = 5334;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPasswordStatement() {
	    let localctx = new SetPasswordStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, MySqlParser.RULE_setPasswordStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5335;
	        this.match(MySqlParser.SET);
	        this.state = 5336;
	        this.match(MySqlParser.PASSWORD);
	        this.state = 5339;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===65) {
	            this.state = 5337;
	            this.match(MySqlParser.FOR);
	            this.state = 5338;
	            this.userName();
	        }

	        this.state = 5341;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 5344;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 535:
	        case 551:
	            this.state = 5342;
	            this.passwordFunctionClause();
	            break;
	        case 1148:
	            this.state = 5343;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userSpecification() {
	    let localctx = new UserSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, MySqlParser.RULE_userSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5346;
	        this.userName();
	        this.state = 5347;
	        this.userPasswordOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userAuthOption() {
	    let localctx = new UserAuthOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, MySqlParser.RULE_userAuthOption);
	    try {
	        this.state = 5374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,790,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new HashAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5349;
	            this.userName();
	            this.state = 5350;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 5351;
	            this.match(MySqlParser.BY);
	            this.state = 5352;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 5353;
	            localctx.hashed = this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 2:
	            localctx = new RandomAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5355;
	            this.userName();
	            this.state = 5356;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 5357;
	            this.match(MySqlParser.BY);
	            this.state = 5358;
	            this.match(MySqlParser.RANDOM);
	            this.state = 5359;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 5360;
	            this.authOptionClause();
	            break;

	        case 3:
	            localctx = new StringAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5362;
	            this.userName();
	            this.state = 5363;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 5364;
	            this.match(MySqlParser.BY);
	            this.state = 5365;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 5366;
	            this.authOptionClause();
	            break;

	        case 4:
	            localctx = new ModuleAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5368;
	            this.userName();
	            this.state = 5369;
	            this.match(MySqlParser.IDENTIFIED);
	            this.state = 5370;
	            this.match(MySqlParser.WITH);
	            this.state = 5371;
	            this.authenticationRule();
	            break;

	        case 5:
	            localctx = new SimpleAuthOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5373;
	            this.userName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	authOptionClause() {
	    let localctx = new AuthOptionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, MySqlParser.RULE_authOptionClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5378;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,791,this._ctx);
	        if(la_===1) {
	            this.state = 5376;
	            this.match(MySqlParser.REPLACE);
	            this.state = 5377;
	            this.match(MySqlParser.STRING_LITERAL);

	        }
	        this.state = 5383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 5380;
	            this.match(MySqlParser.RETAIN);
	            this.state = 5381;
	            this.match(MySqlParser.CURRENT);
	            this.state = 5382;
	            this.match(MySqlParser.PASSWORD);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	authenticationRule() {
	    let localctx = new AuthenticationRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, MySqlParser.RULE_authenticationRule);
	    var _la = 0;
	    try {
	        this.state = 5399;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,795,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ModuleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5385;
	            this.authPlugin();
	            this.state = 5393;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,794,this._ctx);
	            if(la_===1) {
	                this.state = 5386;
	                _la = this._input.LA(1);
	                if(!(_la===12 || _la===19 || _la===187)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5390;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 1148:
	                    this.state = 5387;
	                    this.match(MySqlParser.STRING_LITERAL);
	                    break;
	                case 991:
	                    this.state = 5388;
	                    this.match(MySqlParser.RANDOM);
	                    this.state = 5389;
	                    this.match(MySqlParser.PASSWORD);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 5392;
	                this.authOptionClause();

	            }
	            break;

	        case 2:
	            localctx = new PasswordModuleOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5395;
	            this.authPlugin();
	            this.state = 5396;
	            this.match(MySqlParser.USING);
	            this.state = 5397;
	            this.passwordFunctionClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tlsOption() {
	    let localctx = new TlsOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, MySqlParser.RULE_tlsOption);
	    try {
	        this.state = 5409;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 167:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5401;
	            this.match(MySqlParser.SSL);
	            break;
	        case 680:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5402;
	            this.match(MySqlParser.X509);
	            break;
	        case 358:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5403;
	            this.match(MySqlParser.CIPHER);
	            this.state = 5404;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 465:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5405;
	            this.match(MySqlParser.ISSUER);
	            this.state = 5406;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 640:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5407;
	            this.match(MySqlParser.SUBJECT);
	            this.state = 5408;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userResourceOption() {
	    let localctx = new UserResourceOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, MySqlParser.RULE_userResourceOption);
	    try {
	        this.state = 5419;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 499:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5411;
	            this.match(MySqlParser.MAX_QUERIES_PER_HOUR);
	            this.state = 5412;
	            this.decimalLiteral();
	            break;
	        case 502:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5413;
	            this.match(MySqlParser.MAX_UPDATES_PER_HOUR);
	            this.state = 5414;
	            this.decimalLiteral();
	            break;
	        case 498:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5415;
	            this.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR);
	            this.state = 5416;
	            this.decimalLiteral();
	            break;
	        case 503:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5417;
	            this.match(MySqlParser.MAX_USER_CONNECTIONS);
	            this.state = 5418;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userPasswordOption() {
	    let localctx = new UserPasswordOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, MySqlParser.RULE_userPasswordOption);
	    var _la = 0;
	    try {
	        this.state = 5459;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,803,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5421;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 5422;
	            this.match(MySqlParser.EXPIRE);
	            this.state = 5429;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 42:
	            	this.state = 5423;
	            	localctx.expireType = this.match(MySqlParser.DEFAULT);
	            	break;
	            case 519:
	            	this.state = 5424;
	            	localctx.expireType = this.match(MySqlParser.NEVER);
	            	break;
	            case 86:
	            	this.state = 5425;
	            	localctx.expireType = this.match(MySqlParser.INTERVAL);
	            	this.state = 5426;
	            	this.decimalLiteral();
	            	this.state = 5427;
	            	this.match(MySqlParser.DAY);
	            	break;
	            case -1:
	            case 7:
	            case 9:
	            case 14:
	            case 20:
	            case 24:
	            case 26:
	            case 33:
	            case 44:
	            case 45:
	            case 46:
	            case 51:
	            case 62:
	            case 71:
	            case 72:
	            case 85:
	            case 93:
	            case 102:
	            case 103:
	            case 119:
	            case 132:
	            case 138:
	            case 139:
	            case 141:
	            case 143:
	            case 147:
	            case 152:
	            case 153:
	            case 155:
	            case 156:
	            case 172:
	            case 182:
	            case 184:
	            case 186:
	            case 188:
	            case 192:
	            case 332:
	            case 344:
	            case 345:
	            case 351:
	            case 356:
	            case 368:
	            case 369:
	            case 390:
	            case 399:
	            case 424:
	            case 432:
	            case 442:
	            case 444:
	            case 456:
	            case 551:
	            case 552:
	            case 560:
	            case 580:
	            case 589:
	            case 597:
	            case 604:
	            case 629:
	            case 635:
	            case 656:
	            case 661:
	            case 681:
	            case 708:
	            case 739:
	            case 1121:
	            case 1133:
	            case 1135:
	            case 1136:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5431;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 5432;
	            this.match(MySqlParser.HISTORY);
	            this.state = 5435;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 42:
	                this.state = 5433;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            case 1138:
	            case 1139:
	            case 1140:
	            case 1149:
	            case 1151:
	                this.state = 5434;
	                this.decimalLiteral();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5437;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 5438;
	            this.match(MySqlParser.REUSE);
	            this.state = 5439;
	            this.match(MySqlParser.INTERVAL);
	            this.state = 5444;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 42:
	                this.state = 5440;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            case 1138:
	            case 1139:
	            case 1140:
	            case 1149:
	            case 1151:
	                this.state = 5441;
	                this.decimalLiteral();
	                this.state = 5442;
	                this.match(MySqlParser.DAY);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5446;
	            this.match(MySqlParser.PASSWORD);
	            this.state = 5447;
	            this.match(MySqlParser.REQUIRE);
	            this.state = 5448;
	            this.match(MySqlParser.CURRENT);
	            this.state = 5450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42 || _la===121) {
	                this.state = 5449;
	                _la = this._input.LA(1);
	                if(!(_la===42 || _la===121)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5452;
	            this.match(MySqlParser.FAILED_LOGIN_ATTEMPTS);
	            this.state = 5453;
	            this.decimalLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5454;
	            this.match(MySqlParser.PASSWORD_LOCK_TIME);
	            this.state = 5457;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1138:
	            case 1139:
	            case 1140:
	            case 1149:
	            case 1151:
	                this.state = 5455;
	                this.decimalLiteral();
	                break;
	            case 657:
	                this.state = 5456;
	                this.match(MySqlParser.UNBOUNDED);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userLockOption() {
	    let localctx = new UserLockOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, MySqlParser.RULE_userLockOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5461;
	        this.match(MySqlParser.ACCOUNT);
	        this.state = 5462;
	        localctx.lockType = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===103 || _la===182)) {
	            localctx.lockType = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privelegeClause() {
	    let localctx = new PrivelegeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, MySqlParser.RULE_privelegeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5464;
	        this.privilege();
	        this.state = 5469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1133) {
	            this.state = 5465;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5466;
	            this.uidList();
	            this.state = 5467;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilege() {
	    let localctx = new PrivilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, MySqlParser.RULE_privilege);
	    var _la = 0;
	    try {
	        this.state = 5564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,809,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5471;
	            this.match(MySqlParser.ALL);
	            this.state = 5473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===725) {
	                this.state = 5472;
	                this.match(MySqlParser.PRIVILEGES);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5475;
	            this.match(MySqlParser.ALTER);
	            this.state = 5477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===733) {
	                this.state = 5476;
	                this.match(MySqlParser.ROUTINE);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5479;
	            this.match(MySqlParser.CREATE);
	            this.state = 5487;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 649:
	            	this.state = 5480;
	            	this.match(MySqlParser.TEMPORARY);
	            	this.state = 5481;
	            	this.match(MySqlParser.TABLES);
	            	break;
	            case 733:
	            	this.state = 5482;
	            	this.match(MySqlParser.ROUTINE);
	            	break;
	            case 671:
	            	this.state = 5483;
	            	this.match(MySqlParser.VIEW);
	            	break;
	            case 665:
	            	this.state = 5484;
	            	this.match(MySqlParser.USER);
	            	break;
	            case 647:
	            	this.state = 5485;
	            	this.match(MySqlParser.TABLESPACE);
	            	break;
	            case 596:
	            	this.state = 5486;
	            	this.match(MySqlParser.ROLE);
	            	break;
	            case 118:
	            case 1133:
	            case 1135:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5489;
	            this.match(MySqlParser.DELETE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5490;
	            this.match(MySqlParser.DROP);
	            this.state = 5492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===596) {
	                this.state = 5491;
	                this.match(MySqlParser.ROLE);
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5494;
	            this.match(MySqlParser.EVENT);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5495;
	            this.match(MySqlParser.EXECUTE);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5496;
	            this.match(MySqlParser.FILE);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5497;
	            this.match(MySqlParser.GRANT);
	            this.state = 5498;
	            this.match(MySqlParser.OPTION);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5499;
	            this.match(MySqlParser.INDEX);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5500;
	            this.match(MySqlParser.INSERT);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5501;
	            this.match(MySqlParser.LOCK);
	            this.state = 5502;
	            this.match(MySqlParser.TABLES);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5503;
	            this.match(MySqlParser.PROCESS);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5504;
	            this.match(MySqlParser.PROXY);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5505;
	            this.match(MySqlParser.REFERENCES);
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 5506;
	            this.match(MySqlParser.RELOAD);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 5507;
	            this.match(MySqlParser.REPLICATION);
	            this.state = 5508;
	            _la = this._input.LA(1);
	            if(!(_la===360 || _la===614)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 5509;
	            this.match(MySqlParser.SELECT);
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 5510;
	            this.match(MySqlParser.SHOW);
	            this.state = 5511;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===671)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 5512;
	            this.match(MySqlParser.SHUTDOWN);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 5513;
	            this.match(MySqlParser.SUPER);
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 5514;
	            this.match(MySqlParser.TRIGGER);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 5515;
	            this.match(MySqlParser.UPDATE);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 5516;
	            this.match(MySqlParser.USAGE);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 5517;
	            this.match(MySqlParser.APPLICATION_PASSWORD_ADMIN);
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 5518;
	            this.match(MySqlParser.AUDIT_ABORT_EXEMPT);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 5519;
	            this.match(MySqlParser.AUDIT_ADMIN);
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 5520;
	            this.match(MySqlParser.AUTHENTICATION_POLICY_ADMIN);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 5521;
	            this.match(MySqlParser.BACKUP_ADMIN);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 5522;
	            this.match(MySqlParser.BINLOG_ADMIN);
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 5523;
	            this.match(MySqlParser.BINLOG_ENCRYPTION_ADMIN);
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 5524;
	            this.match(MySqlParser.CLONE_ADMIN);
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 5525;
	            this.match(MySqlParser.CONNECTION_ADMIN);
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 5526;
	            this.match(MySqlParser.ENCRYPTION_KEY_ADMIN);
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 5527;
	            this.match(MySqlParser.FIREWALL_ADMIN);
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 5528;
	            this.match(MySqlParser.FIREWALL_EXEMPT);
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 5529;
	            this.match(MySqlParser.FIREWALL_USER);
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 5530;
	            this.match(MySqlParser.FLUSH_OPTIMIZER_COSTS);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 5531;
	            this.match(MySqlParser.FLUSH_STATUS);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 5532;
	            this.match(MySqlParser.FLUSH_TABLES);
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 5533;
	            this.match(MySqlParser.FLUSH_USER_RESOURCES);
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 5534;
	            this.match(MySqlParser.GROUP_REPLICATION_ADMIN);
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 5535;
	            this.match(MySqlParser.INNODB_REDO_LOG_ARCHIVE);
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 5536;
	            this.match(MySqlParser.INNODB_REDO_LOG_ENABLE);
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 5537;
	            this.match(MySqlParser.NDB_STORED_USER);
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 5538;
	            this.match(MySqlParser.PASSWORDLESS_USER_ADMIN);
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 5539;
	            this.match(MySqlParser.PERSIST_RO_VARIABLES_ADMIN);
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 5540;
	            this.match(MySqlParser.REPLICATION_APPLIER);
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 5541;
	            this.match(MySqlParser.REPLICATION_SLAVE_ADMIN);
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 5542;
	            this.match(MySqlParser.RESOURCE_GROUP_ADMIN);
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 5543;
	            this.match(MySqlParser.RESOURCE_GROUP_USER);
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 5544;
	            this.match(MySqlParser.ROLE_ADMIN);
	            break;

	        case 53:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 5545;
	            this.match(MySqlParser.SERVICE_CONNECTION_ADMIN);
	            break;

	        case 54:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 5546;
	            this.match(MySqlParser.SESSION_VARIABLES_ADMIN);
	            break;

	        case 55:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 5547;
	            this.match(MySqlParser.SET_USER_ID);
	            break;

	        case 56:
	            this.enterOuterAlt(localctx, 56);
	            this.state = 5548;
	            this.match(MySqlParser.SKIP_QUERY_REWRITE);
	            break;

	        case 57:
	            this.enterOuterAlt(localctx, 57);
	            this.state = 5549;
	            this.match(MySqlParser.SHOW_ROUTINE);
	            break;

	        case 58:
	            this.enterOuterAlt(localctx, 58);
	            this.state = 5550;
	            this.match(MySqlParser.SYSTEM_USER);
	            break;

	        case 59:
	            this.enterOuterAlt(localctx, 59);
	            this.state = 5551;
	            this.match(MySqlParser.SYSTEM_VARIABLES_ADMIN);
	            break;

	        case 60:
	            this.enterOuterAlt(localctx, 60);
	            this.state = 5552;
	            this.match(MySqlParser.TABLE_ENCRYPTION_ADMIN);
	            break;

	        case 61:
	            this.enterOuterAlt(localctx, 61);
	            this.state = 5553;
	            this.match(MySqlParser.TP_CONNECTION_ADMIN);
	            break;

	        case 62:
	            this.enterOuterAlt(localctx, 62);
	            this.state = 5554;
	            this.match(MySqlParser.VERSION_TOKEN_ADMIN);
	            break;

	        case 63:
	            this.enterOuterAlt(localctx, 63);
	            this.state = 5555;
	            this.match(MySqlParser.XA_RECOVER_ADMIN);
	            break;

	        case 64:
	            this.enterOuterAlt(localctx, 64);
	            this.state = 5556;
	            this.match(MySqlParser.LOAD);
	            this.state = 5557;
	            this.match(MySqlParser.FROM);
	            this.state = 5558;
	            this.match(MySqlParser.S3);
	            break;

	        case 65:
	            this.enterOuterAlt(localctx, 65);
	            this.state = 5559;
	            this.match(MySqlParser.SELECT);
	            this.state = 5560;
	            this.match(MySqlParser.INTO);
	            this.state = 5561;
	            this.match(MySqlParser.S3);
	            break;

	        case 66:
	            this.enterOuterAlt(localctx, 66);
	            this.state = 5562;
	            this.match(MySqlParser.INVOKE);
	            this.state = 5563;
	            this.match(MySqlParser.LAMBDA);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeLevel() {
	    let localctx = new PrivilegeLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, MySqlParser.RULE_privilegeLevel);
	    try {
	        this.state = 5582;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,810,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CurrentSchemaPriviLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5566;
	            this.match(MySqlParser.STAR);
	            break;

	        case 2:
	            localctx = new GlobalPrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5567;
	            this.match(MySqlParser.STAR);
	            this.state = 5568;
	            this.match(MySqlParser.DOT);
	            this.state = 5569;
	            this.match(MySqlParser.STAR);
	            break;

	        case 3:
	            localctx = new DefiniteSchemaPrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5570;
	            this.uid();
	            this.state = 5571;
	            this.match(MySqlParser.DOT);
	            this.state = 5572;
	            this.match(MySqlParser.STAR);
	            break;

	        case 4:
	            localctx = new DefiniteFullTablePrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5574;
	            this.uid();
	            this.state = 5575;
	            this.match(MySqlParser.DOT);
	            this.state = 5576;
	            this.uid();
	            break;

	        case 5:
	            localctx = new DefiniteFullTablePrivLevel2Context(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5578;
	            this.uid();
	            this.state = 5579;
	            this.dottedId();
	            break;

	        case 6:
	            localctx = new DefiniteTablePrivLevelContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5581;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameUserClause() {
	    let localctx = new RenameUserClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, MySqlParser.RULE_renameUserClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5584;
	        localctx.fromFirst = this.userName();
	        this.state = 5585;
	        this.match(MySqlParser.TO);
	        this.state = 5586;
	        localctx.toFirst = this.userName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	analyzeTable() {
	    let localctx = new AnalyzeTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, MySqlParser.RULE_analyzeTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5588;
	        this.match(MySqlParser.ANALYZE);
	        this.state = 5590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115 || _la===474) {
	            this.state = 5589;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===115 || _la===474)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5592;
	        _la = this._input.LA(1);
	        if(!(_la===172 || _la===742)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5593;
	        this.tables();
	        this.state = 5611;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,814,this._ctx);
	        if(la_===1) {
	            this.state = 5594;
	            this.match(MySqlParser.UPDATE);
	            this.state = 5595;
	            this.match(MySqlParser.HISTOGRAM);
	            this.state = 5596;
	            this.match(MySqlParser.ON);
	            this.state = 5597;
	            this.fullColumnName();
	            this.state = 5602;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5598;
	                this.match(MySqlParser.COMMA);
	                this.state = 5599;
	                this.fullColumnName();
	                this.state = 5604;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5609;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,813,this._ctx);
	            if(la_===1) {
	                this.state = 5605;
	                this.match(MySqlParser.WITH);
	                this.state = 5606;
	                this.decimalLiteral();
	                this.state = 5607;
	                this.match(MySqlParser.BUCKETS);

	            }

	        }
	        this.state = 5624;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,816,this._ctx);
	        if(la_===1) {
	            this.state = 5613;
	            this.match(MySqlParser.DROP);
	            this.state = 5614;
	            this.match(MySqlParser.HISTOGRAM);
	            this.state = 5615;
	            this.match(MySqlParser.ON);
	            this.state = 5616;
	            this.fullColumnName();
	            this.state = 5621;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5617;
	                this.match(MySqlParser.COMMA);
	                this.state = 5618;
	                this.fullColumnName();
	                this.state = 5623;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkTable() {
	    let localctx = new CheckTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, MySqlParser.RULE_checkTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5626;
	        this.match(MySqlParser.CHECK);
	        this.state = 5627;
	        this.match(MySqlParser.TABLE);
	        this.state = 5628;
	        this.tables();
	        this.state = 5632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===65 || _la===354 || _la===422 || _la===425 || _la===504 || _la===568) {
	            this.state = 5629;
	            this.checkTableOption();
	            this.state = 5634;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checksumTable() {
	    let localctx = new ChecksumTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, MySqlParser.RULE_checksumTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5635;
	        this.match(MySqlParser.CHECKSUM);
	        this.state = 5636;
	        this.match(MySqlParser.TABLE);
	        this.state = 5637;
	        this.tables();
	        this.state = 5639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===422 || _la===568) {
	            this.state = 5638;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===422 || _la===568)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optimizeTable() {
	    let localctx = new OptimizeTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, MySqlParser.RULE_optimizeTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5641;
	        this.match(MySqlParser.OPTIMIZE);
	        this.state = 5643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115 || _la===474) {
	            this.state = 5642;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===115 || _la===474)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5645;
	        _la = this._input.LA(1);
	        if(!(_la===172 || _la===742)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5646;
	        this.tables();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repairTable() {
	    let localctx = new RepairTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, MySqlParser.RULE_repairTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5648;
	        this.match(MySqlParser.REPAIR);
	        this.state = 5650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115 || _la===474) {
	            this.state = 5649;
	            localctx.actionOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===115 || _la===474)) {
	                localctx.actionOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 5652;
	        this.match(MySqlParser.TABLE);
	        this.state = 5653;
	        this.tables();
	        this.state = 5655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===568) {
	            this.state = 5654;
	            this.match(MySqlParser.QUICK);
	        }

	        this.state = 5658;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===422) {
	            this.state = 5657;
	            this.match(MySqlParser.EXTENDED);
	        }

	        this.state = 5661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===666) {
	            this.state = 5660;
	            this.match(MySqlParser.USE_FRM);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkTableOption() {
	    let localctx = new CheckTableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, MySqlParser.RULE_checkTableOption);
	    try {
	        this.state = 5670;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5663;
	            this.match(MySqlParser.FOR);
	            this.state = 5664;
	            this.match(MySqlParser.UPGRADE);
	            break;
	        case 568:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5665;
	            this.match(MySqlParser.QUICK);
	            break;
	        case 425:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5666;
	            this.match(MySqlParser.FAST);
	            break;
	        case 504:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5667;
	            this.match(MySqlParser.MEDIUM);
	            break;
	        case 422:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5668;
	            this.match(MySqlParser.EXTENDED);
	            break;
	        case 354:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5669;
	            this.match(MySqlParser.CHANGED);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUdfunction() {
	    let localctx = new CreateUdfunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, MySqlParser.RULE_createUdfunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5672;
	        this.match(MySqlParser.CREATE);
	        this.state = 5674;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===335) {
	            this.state = 5673;
	            this.match(MySqlParser.AGGREGATE);
	        }

	        this.state = 5676;
	        this.match(MySqlParser.FUNCTION);
	        this.state = 5678;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,826,this._ctx);
	        if(la_===1) {
	            this.state = 5677;
	            this.ifNotExists();

	        }
	        this.state = 5680;
	        this.uid();
	        this.state = 5681;
	        this.match(MySqlParser.RETURNS);
	        this.state = 5682;
	        localctx.returnType = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 206)) & ~0x1f) === 0 && ((1 << (_la - 206)) & 261) !== 0) || _la===638)) {
	            localctx.returnType = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5683;
	        this.match(MySqlParser.SONAME);
	        this.state = 5684;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	installPlugin() {
	    let localctx = new InstallPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, MySqlParser.RULE_installPlugin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5686;
	        this.match(MySqlParser.INSTALL);
	        this.state = 5687;
	        this.match(MySqlParser.PLUGIN);
	        this.state = 5688;
	        this.uid();
	        this.state = 5689;
	        this.match(MySqlParser.SONAME);
	        this.state = 5690;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uninstallPlugin() {
	    let localctx = new UninstallPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, MySqlParser.RULE_uninstallPlugin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5692;
	        this.match(MySqlParser.UNINSTALL);
	        this.state = 5693;
	        this.match(MySqlParser.PLUGIN);
	        this.state = 5694;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, MySqlParser.RULE_setStatement);
	    var _la = 0;
	    try {
	        this.state = 5748;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,834,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SetVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5696;
	            this.match(MySqlParser.SET);
	            this.state = 5697;
	            this.variableClause();
	            this.state = 5698;
	            _la = this._input.LA(1);
	            if(!(_la===1108 || _la===1124)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5701;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,827,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5699;
	                this.expression(0);
	                break;

	            case 2:
	                this.state = 5700;
	                this.match(MySqlParser.ON);
	                break;

	            }
	            this.state = 5712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5703;
	                this.match(MySqlParser.COMMA);
	                this.state = 5704;
	                this.variableClause();
	                this.state = 5705;
	                _la = this._input.LA(1);
	                if(!(_la===1108 || _la===1124)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5708;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,828,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 5706;
	                    this.expression(0);
	                    break;

	                case 2:
	                    this.state = 5707;
	                    this.match(MySqlParser.ON);
	                    break;

	                }
	                this.state = 5714;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new SetCharsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5715;
	            this.match(MySqlParser.SET);
	            this.state = 5716;
	            this.charSet();
	            this.state = 5719;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 226:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 1145:
	            case 1148:
	                this.state = 5717;
	                this.charsetName();
	                break;
	            case 42:
	                this.state = 5718;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            localctx = new SetNamesContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5721;
	            this.match(MySqlParser.SET);
	            this.state = 5722;
	            this.match(MySqlParser.NAMES);
	            this.state = 5729;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 226:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 1145:
	            case 1148:
	                this.state = 5723;
	                this.charsetName();
	                this.state = 5726;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===27) {
	                    this.state = 5724;
	                    this.match(MySqlParser.COLLATE);
	                    this.state = 5725;
	                    this.collationName();
	                }

	                break;
	            case 42:
	                this.state = 5728;
	                this.match(MySqlParser.DEFAULT);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 4:
	            localctx = new SetPasswordContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5731;
	            this.setPasswordStatement();
	            break;

	        case 5:
	            localctx = new SetTransactionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5732;
	            this.setTransactionStatement();
	            break;

	        case 6:
	            localctx = new SetAutocommitContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5733;
	            this.setAutocommitStatement();
	            break;

	        case 7:
	            localctx = new SetNewValueInsideTriggerContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5734;
	            this.match(MySqlParser.SET);
	            this.state = 5735;
	            this.fullId();
	            this.state = 5736;
	            _la = this._input.LA(1);
	            if(!(_la===1108 || _la===1124)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5737;
	            this.expression(0);
	            this.state = 5745;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5738;
	                this.match(MySqlParser.COMMA);
	                this.state = 5739;
	                this.fullId();
	                this.state = 5740;
	                _la = this._input.LA(1);
	                if(!(_la===1108 || _la===1124)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5741;
	                this.expression(0);
	                this.state = 5747;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatement() {
	    let localctx = new ShowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, MySqlParser.RULE_showStatement);
	    var _la = 0;
	    try {
	        this.state = 5903;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,857,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ShowMasterLogsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5750;
	            this.match(MySqlParser.SHOW);
	            this.state = 5751;
	            localctx.logFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===226 || _la===477)) {
	                localctx.logFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5752;
	            this.match(MySqlParser.LOGS);
	            break;

	        case 2:
	            localctx = new ShowLogEventsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5753;
	            this.match(MySqlParser.SHOW);
	            this.state = 5754;
	            localctx.logFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===345 || _la===577)) {
	                localctx.logFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5755;
	            this.match(MySqlParser.EVENTS);
	            this.state = 5758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===80) {
	                this.state = 5756;
	                this.match(MySqlParser.IN);
	                this.state = 5757;
	                localctx.filename = this.match(MySqlParser.STRING_LITERAL);
	            }

	            this.state = 5762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68) {
	                this.state = 5760;
	                this.match(MySqlParser.FROM);
	                this.state = 5761;
	                localctx.fromPosition = this.decimalLiteral();
	            }

	            this.state = 5771;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===99) {
	                this.state = 5764;
	                this.match(MySqlParser.LIMIT);
	                this.state = 5768;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,837,this._ctx);
	                if(la_===1) {
	                    this.state = 5765;
	                    localctx.offset = this.decimalLiteral();
	                    this.state = 5766;
	                    this.match(MySqlParser.COMMA);

	                }
	                this.state = 5770;
	                localctx.rowCount = this.decimalLiteral();
	            }

	            break;

	        case 3:
	            localctx = new ShowObjectFilterContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5773;
	            this.match(MySqlParser.SHOW);
	            this.state = 5774;
	            this.showCommonEntity();
	            this.state = 5776;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98 || _la===190) {
	                this.state = 5775;
	                this.showFilter();
	            }

	            break;

	        case 4:
	            localctx = new ShowColumnsContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5778;
	            this.match(MySqlParser.SHOW);
	            this.state = 5780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===436) {
	                this.state = 5779;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 5782;
	            localctx.columnsFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===365 || _la===427)) {
	                localctx.columnsFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5783;
	            localctx.tableFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===68 || _la===80)) {
	                localctx.tableFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5784;
	            this.tableName();
	            this.state = 5787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68 || _la===80) {
	                this.state = 5785;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===68 || _la===80)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5786;
	                this.uid();
	            }

	            this.state = 5790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98 || _la===190) {
	                this.state = 5789;
	                this.showFilter();
	            }

	            break;

	        case 5:
	            localctx = new ShowCreateDbContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5792;
	            this.match(MySqlParser.SHOW);
	            this.state = 5793;
	            this.match(MySqlParser.CREATE);
	            this.state = 5794;
	            localctx.schemaFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===39 || _la===150)) {
	                localctx.schemaFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5796;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,843,this._ctx);
	            if(la_===1) {
	                this.state = 5795;
	                this.ifNotExists();

	            }
	            this.state = 5798;
	            this.uid();
	            break;

	        case 6:
	            localctx = new ShowCreateFullIdObjectContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5799;
	            this.match(MySqlParser.SHOW);
	            this.state = 5800;
	            this.match(MySqlParser.CREATE);
	            this.state = 5801;
	            localctx.namedEntity = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===172 || _la===177 || _la===415 || _la===437 || _la===671)) {
	                localctx.namedEntity = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5802;
	            this.fullId();
	            break;

	        case 7:
	            localctx = new ShowCreateUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5803;
	            this.match(MySqlParser.SHOW);
	            this.state = 5804;
	            this.match(MySqlParser.CREATE);
	            this.state = 5805;
	            this.match(MySqlParser.USER);
	            this.state = 5806;
	            this.userName();
	            break;

	        case 8:
	            localctx = new ShowEngineContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5807;
	            this.match(MySqlParser.SHOW);
	            this.state = 5808;
	            this.match(MySqlParser.ENGINE);
	            this.state = 5809;
	            this.engineName();
	            this.state = 5810;
	            localctx.engineOption = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===513 || _la===634)) {
	                localctx.engineOption = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            localctx = new ShowGlobalInfoContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5812;
	            this.match(MySqlParser.SHOW);
	            this.state = 5813;
	            this.showGlobalInfoClause();
	            break;

	        case 10:
	            localctx = new ShowErrorsContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5814;
	            this.match(MySqlParser.SHOW);
	            this.state = 5815;
	            localctx.errorFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===412 || _la===675)) {
	                localctx.errorFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5823;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===99) {
	                this.state = 5816;
	                this.match(MySqlParser.LIMIT);
	                this.state = 5820;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,844,this._ctx);
	                if(la_===1) {
	                    this.state = 5817;
	                    localctx.offset = this.decimalLiteral();
	                    this.state = 5818;
	                    this.match(MySqlParser.COMMA);

	                }
	                this.state = 5822;
	                localctx.rowCount = this.decimalLiteral();
	            }

	            break;

	        case 11:
	            localctx = new ShowCountErrorsContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5825;
	            this.match(MySqlParser.SHOW);
	            this.state = 5826;
	            this.match(MySqlParser.COUNT);
	            this.state = 5827;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5828;
	            this.match(MySqlParser.STAR);
	            this.state = 5829;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 5830;
	            localctx.errorFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===412 || _la===675)) {
	                localctx.errorFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 12:
	            localctx = new ShowSchemaFilterContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5831;
	            this.match(MySqlParser.SHOW);
	            this.state = 5832;
	            this.showSchemaEntity();
	            this.state = 5835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68 || _la===80) {
	                this.state = 5833;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===68 || _la===80)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5834;
	                this.uid();
	            }

	            this.state = 5838;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98 || _la===190) {
	                this.state = 5837;
	                this.showFilter();
	            }

	            break;

	        case 13:
	            localctx = new ShowRoutineContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5840;
	            this.match(MySqlParser.SHOW);
	            this.state = 5841;
	            localctx.routine = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===437)) {
	                localctx.routine = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5842;
	            this.match(MySqlParser.CODE);
	            this.state = 5843;
	            this.fullId();
	            break;

	        case 14:
	            localctx = new ShowGrantsContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 5844;
	            this.match(MySqlParser.SHOW);
	            this.state = 5845;
	            this.match(MySqlParser.GRANTS);
	            this.state = 5848;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 5846;
	                this.match(MySqlParser.FOR);
	                this.state = 5847;
	                this.userName();
	            }

	            break;

	        case 15:
	            localctx = new ShowIndexesContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 5850;
	            this.match(MySqlParser.SHOW);
	            this.state = 5851;
	            localctx.indexFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===81 || _la===92 || _la===452)) {
	                localctx.indexFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5852;
	            localctx.tableFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===68 || _la===80)) {
	                localctx.tableFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5853;
	            this.tableName();
	            this.state = 5856;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68 || _la===80) {
	                this.state = 5854;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===68 || _la===80)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5855;
	                this.uid();
	            }

	            this.state = 5860;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===190) {
	                this.state = 5858;
	                this.match(MySqlParser.WHERE);
	                this.state = 5859;
	                this.expression(0);
	            }

	            break;

	        case 16:
	            localctx = new ShowOpenTablesContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 5862;
	            this.match(MySqlParser.SHOW);
	            this.state = 5863;
	            this.match(MySqlParser.OPEN);
	            this.state = 5864;
	            this.match(MySqlParser.TABLES);
	            this.state = 5867;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===68 || _la===80) {
	                this.state = 5865;
	                localctx.schemaFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===68 || _la===80)) {
	                    localctx.schemaFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 5866;
	                this.uid();
	            }

	            this.state = 5870;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98 || _la===190) {
	                this.state = 5869;
	                this.showFilter();
	            }

	            break;

	        case 17:
	            localctx = new ShowProfileContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 5872;
	            this.match(MySqlParser.SHOW);
	            this.state = 5873;
	            this.match(MySqlParser.PROFILE);
	            this.state = 5874;
	            this.showProfileType();
	            this.state = 5879;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 5875;
	                this.match(MySqlParser.COMMA);
	                this.state = 5876;
	                this.showProfileType();
	                this.state = 5881;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 5885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 5882;
	                this.match(MySqlParser.FOR);
	                this.state = 5883;
	                this.match(MySqlParser.QUERY);
	                this.state = 5884;
	                localctx.queryCount = this.decimalLiteral();
	            }

	            this.state = 5887;
	            this.match(MySqlParser.LIMIT);
	            this.state = 5891;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,855,this._ctx);
	            if(la_===1) {
	                this.state = 5888;
	                localctx.offset = this.decimalLiteral();
	                this.state = 5889;
	                this.match(MySqlParser.COMMA);

	            }
	            this.state = 5893;
	            localctx.rowCount = this.decimalLiteral();
	            break;

	        case 18:
	            localctx = new ShowSlaveStatusContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 5895;
	            this.match(MySqlParser.SHOW);
	            this.state = 5896;
	            this.match(MySqlParser.SLAVE);
	            this.state = 5897;
	            this.match(MySqlParser.STATUS);
	            this.state = 5901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 5898;
	                this.match(MySqlParser.FOR);
	                this.state = 5899;
	                this.match(MySqlParser.CHANNEL);
	                this.state = 5900;
	                this.match(MySqlParser.STRING_LITERAL);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableClause() {
	    let localctx = new VariableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, MySqlParser.RULE_variableClause);
	    var _la = 0;
	    try {
	        this.state = 5915;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1159:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5905;
	            this.match(MySqlParser.LOCAL_ID);
	            break;
	        case 1160:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5906;
	            this.match(MySqlParser.GLOBAL_ID);
	            break;
	        case 11:
	        case 14:
	        case 18:
	        case 29:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 48:
	        case 55:
	        case 57:
	        case 59:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 94:
	        case 97:
	        case 117:
	        case 121:
	        case 124:
	        case 130:
	        case 140:
	        case 141:
	        case 148:
	        case 150:
	        case 158:
	        case 168:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1137:
	        case 1145:
	        case 1148:
	        case 1156:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5912;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,859,this._ctx);
	            if(la_===1) {
	                this.state = 5909;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===1137) {
	                    this.state = 5907;
	                    this.match(MySqlParser.AT_SIGN);
	                    this.state = 5908;
	                    this.match(MySqlParser.AT_SIGN);
	                }

	                this.state = 5911;
	                _la = this._input.LA(1);
	                if(!(_la===439 || _la===474 || _la===609)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5914;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCommonEntity() {
	    let localctx = new ShowCommonEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, MySqlParser.RULE_showCommonEntity);
	    var _la = 0;
	    try {
	        this.state = 5930;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5917;
	            this.match(MySqlParser.CHARACTER);
	            this.state = 5918;
	            this.match(MySqlParser.SET);
	            break;
	        case 844:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5919;
	            this.match(MySqlParser.COLLATION);
	            break;
	        case 40:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5920;
	            this.match(MySqlParser.DATABASES);
	            break;
	        case 151:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5921;
	            this.match(MySqlParser.SCHEMAS);
	            break;
	        case 437:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5922;
	            this.match(MySqlParser.FUNCTION);
	            this.state = 5923;
	            this.match(MySqlParser.STATUS);
	            break;
	        case 131:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5924;
	            this.match(MySqlParser.PROCEDURE);
	            this.state = 5925;
	            this.match(MySqlParser.STATUS);
	            break;
	        case 439:
	        case 609:
	        case 634:
	        case 670:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5927;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===439 || _la===609) {
	                this.state = 5926;
	                _la = this._input.LA(1);
	                if(!(_la===439 || _la===609)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 5929;
	            _la = this._input.LA(1);
	            if(!(_la===634 || _la===670)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showFilter() {
	    let localctx = new ShowFilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, MySqlParser.RULE_showFilter);
	    try {
	        this.state = 5936;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5932;
	            this.match(MySqlParser.LIKE);
	            this.state = 5933;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 190:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5934;
	            this.match(MySqlParser.WHERE);
	            this.state = 5935;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showGlobalInfoClause() {
	    let localctx = new ShowGlobalInfoClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, MySqlParser.RULE_showGlobalInfoClause);
	    var _la = 0;
	    try {
	        this.state = 5955;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 410:
	        case 636:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5939;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===636) {
	                this.state = 5938;
	                this.match(MySqlParser.STORAGE);
	            }

	            this.state = 5941;
	            this.match(MySqlParser.ENGINES);
	            break;
	        case 477:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5942;
	            this.match(MySqlParser.MASTER);
	            this.state = 5943;
	            this.match(MySqlParser.STATUS);
	            break;
	        case 556:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5944;
	            this.match(MySqlParser.PLUGINS);
	            break;
	        case 725:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5945;
	            this.match(MySqlParser.PRIVILEGES);
	            break;
	        case 436:
	        case 563:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===436) {
	                this.state = 5946;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 5949;
	            this.match(MySqlParser.PROCESSLIST);
	            break;
	        case 565:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5950;
	            this.match(MySqlParser.PROFILES);
	            break;
	        case 614:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5951;
	            this.match(MySqlParser.SLAVE);
	            this.state = 5952;
	            this.match(MySqlParser.HOSTS);
	            break;
	        case 339:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5953;
	            this.match(MySqlParser.AUTHORS);
	            break;
	        case 383:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5954;
	            this.match(MySqlParser.CONTRIBUTORS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showSchemaEntity() {
	    let localctx = new ShowSchemaEntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, MySqlParser.RULE_showSchemaEntity);
	    var _la = 0;
	    try {
	        this.state = 5965;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 416:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5957;
	            this.match(MySqlParser.EVENTS);
	            break;
	        case 172:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5958;
	            this.match(MySqlParser.TABLE);
	            this.state = 5959;
	            this.match(MySqlParser.STATUS);
	            break;
	        case 436:
	        case 742:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5961;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===436) {
	                this.state = 5960;
	                this.match(MySqlParser.FULL);
	            }

	            this.state = 5963;
	            this.match(MySqlParser.TABLES);
	            break;
	        case 655:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5964;
	            this.match(MySqlParser.TRIGGERS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showProfileType() {
	    let localctx = new ShowProfileTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, MySqlParser.RULE_showProfileType);
	    try {
	        this.state = 5979;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5967;
	            this.match(MySqlParser.ALL);
	            break;
	        case 347:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5968;
	            this.match(MySqlParser.BLOCK);
	            this.state = 5969;
	            this.match(MySqlParser.IO);
	            break;
	        case 382:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5970;
	            this.match(MySqlParser.CONTEXT);
	            this.state = 5971;
	            this.match(MySqlParser.SWITCHES);
	            break;
	        case 385:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5972;
	            this.match(MySqlParser.CPU);
	            break;
	        case 463:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5973;
	            this.match(MySqlParser.IPC);
	            break;
	        case 792:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5974;
	            this.match(MySqlParser.MEMORY);
	            break;
	        case 544:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5975;
	            this.match(MySqlParser.PAGE);
	            this.state = 5976;
	            this.match(MySqlParser.FAULTS);
	            break;
	        case 621:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5977;
	            this.match(MySqlParser.SOURCE);
	            break;
	        case 644:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5978;
	            this.match(MySqlParser.SWAPS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binlogStatement() {
	    let localctx = new BinlogStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, MySqlParser.RULE_binlogStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5981;
	        this.match(MySqlParser.BINLOG);
	        this.state = 5982;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cacheIndexStatement() {
	    let localctx = new CacheIndexStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, MySqlParser.RULE_cacheIndexStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5984;
	        this.match(MySqlParser.CACHE);
	        this.state = 5985;
	        this.match(MySqlParser.INDEX);
	        this.state = 5986;
	        this.tableIndexes();
	        this.state = 5991;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 5987;
	            this.match(MySqlParser.COMMA);
	            this.state = 5988;
	            this.tableIndexes();
	            this.state = 5993;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6001;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 5994;
	            this.match(MySqlParser.PARTITION);
	            this.state = 5995;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 5998;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 5996;
	                this.uidList();
	                break;
	            case 6:
	                this.state = 5997;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6000;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 6003;
	        this.match(MySqlParser.IN);
	        this.state = 6004;
	        localctx.schema = this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushStatement() {
	    let localctx = new FlushStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, MySqlParser.RULE_flushStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6006;
	        this.match(MySqlParser.FLUSH);
	        this.state = 6008;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115 || _la===474) {
	            this.state = 6007;
	            localctx.flushFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===115 || _la===474)) {
	                localctx.flushFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 6010;
	        this.flushOption();
	        this.state = 6015;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6011;
	            this.match(MySqlParser.COMMA);
	            this.state = 6012;
	            this.flushOption();
	            this.state = 6017;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killStatement() {
	    let localctx = new KillStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, MySqlParser.RULE_killStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6018;
	        this.match(MySqlParser.KILL);
	        this.state = 6020;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,875,this._ctx);
	        if(la_===1) {
	            this.state = 6019;
	            localctx.connectionFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===376 || _la===567)) {
	                localctx.connectionFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 6022;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadIndexIntoCache() {
	    let localctx = new LoadIndexIntoCacheContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, MySqlParser.RULE_loadIndexIntoCache);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6024;
	        this.match(MySqlParser.LOAD);
	        this.state = 6025;
	        this.match(MySqlParser.INDEX);
	        this.state = 6026;
	        this.match(MySqlParser.INTO);
	        this.state = 6027;
	        this.match(MySqlParser.CACHE);
	        this.state = 6028;
	        this.loadedTableIndexes();
	        this.state = 6033;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6029;
	            this.match(MySqlParser.COMMA);
	            this.state = 6030;
	            this.loadedTableIndexes();
	            this.state = 6035;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetStatement() {
	    let localctx = new ResetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, MySqlParser.RULE_resetStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6036;
	        this.match(MySqlParser.RESET);
	        this.state = 6037;
	        this.match(MySqlParser.QUERY);
	        this.state = 6038;
	        this.match(MySqlParser.CACHE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shutdownStatement() {
	    let localctx = new ShutdownStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, MySqlParser.RULE_shutdownStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6040;
	        this.match(MySqlParser.SHUTDOWN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableIndexes() {
	    let localctx = new TableIndexesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, MySqlParser.RULE_tableIndexes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6042;
	        this.tableName();
	        this.state = 6050;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===81 || _la===91 || _la===1133) {
	            this.state = 6044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===91) {
	                this.state = 6043;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===91)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 6046;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6047;
	            this.uidList();
	            this.state = 6048;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushOption() {
	    let localctx = new FlushOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, MySqlParser.RULE_flushOption);
	    var _la = 0;
	    try {
	        this.state = 6084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,885,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6070;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 394:
	                this.state = 6052;
	                this.match(MySqlParser.DES_KEY_FILE);
	                break;
	            case 447:
	                this.state = 6053;
	                this.match(MySqlParser.HOSTS);
	                break;
	            case 226:
	            case 409:
	            case 411:
	            case 438:
	            case 476:
	            case 574:
	            case 615:
	                this.state = 6055;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===226 || ((((_la - 409)) & ~0x1f) === 0 && ((1 << (_la - 409)) & 536870917) !== 0) || _la===574 || _la===615) {
	                    this.state = 6054;
	                    _la = this._input.LA(1);
	                    if(!(_la===226 || ((((_la - 409)) & ~0x1f) === 0 && ((1 << (_la - 409)) & 536870917) !== 0) || _la===574 || _la===615)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 6057;
	                this.match(MySqlParser.LOGS);
	                break;
	            case 540:
	                this.state = 6058;
	                this.match(MySqlParser.OPTIMIZER_COSTS);
	                break;
	            case 725:
	                this.state = 6059;
	                this.match(MySqlParser.PRIVILEGES);
	                break;
	            case 567:
	                this.state = 6060;
	                this.match(MySqlParser.QUERY);
	                this.state = 6061;
	                this.match(MySqlParser.CACHE);
	                break;
	            case 634:
	                this.state = 6062;
	                this.match(MySqlParser.STATUS);
	                break;
	            case 667:
	                this.state = 6063;
	                this.match(MySqlParser.USER_RESOURCES);
	                break;
	            case 742:
	                this.state = 6064;
	                this.match(MySqlParser.TABLES);
	                this.state = 6068;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,880,this._ctx);
	                if(la_===1) {
	                    this.state = 6065;
	                    this.match(MySqlParser.WITH);
	                    this.state = 6066;
	                    this.match(MySqlParser.READ);
	                    this.state = 6067;
	                    this.match(MySqlParser.LOCK);

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            localctx = new ChannelFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6072;
	            this.match(MySqlParser.RELAY);
	            this.state = 6073;
	            this.match(MySqlParser.LOGS);
	            this.state = 6075;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 6074;
	                this.channelOption();
	            }

	            break;

	        case 3:
	            localctx = new TableFlushOptionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6077;
	            _la = this._input.LA(1);
	            if(!(_la===172 || _la===742)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6079;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,883,this._ctx);
	            if(la_===1) {
	                this.state = 6078;
	                this.tables();

	            }
	            this.state = 6082;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,884,this._ctx);
	            if(la_===1) {
	                this.state = 6081;
	                this.flushTableOption();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushTableOption() {
	    let localctx = new FlushTableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, MySqlParser.RULE_flushTableOption);
	    try {
	        this.state = 6091;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 192:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6086;
	            this.match(MySqlParser.WITH);
	            this.state = 6087;
	            this.match(MySqlParser.READ);
	            this.state = 6088;
	            this.match(MySqlParser.LOCK);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6089;
	            this.match(MySqlParser.FOR);
	            this.state = 6090;
	            this.match(MySqlParser.EXPORT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadedTableIndexes() {
	    let localctx = new LoadedTableIndexesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, MySqlParser.RULE_loadedTableIndexes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6093;
	        this.tableName();
	        this.state = 6101;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 6094;
	            this.match(MySqlParser.PARTITION);
	            this.state = 6095;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6098;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1145:
	            case 1148:
	            case 1156:
	                this.state = 6096;
	                localctx.partitionList = this.uidList();
	                break;
	            case 6:
	                this.state = 6097;
	                this.match(MySqlParser.ALL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6100;
	            this.match(MySqlParser.RR_BRACKET);
	        }

	        this.state = 6110;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,890,this._ctx);
	        if(la_===1) {
	            this.state = 6104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===81 || _la===91) {
	                this.state = 6103;
	                localctx.indexFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===81 || _la===91)) {
	                    localctx.indexFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 6106;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6107;
	            localctx.indexList = this.uidList();
	            this.state = 6108;
	            this.match(MySqlParser.RR_BRACKET);

	        }
	        this.state = 6114;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 6112;
	            this.match(MySqlParser.IGNORE);
	            this.state = 6113;
	            this.match(MySqlParser.LEAVES);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDescribeStatement() {
	    let localctx = new SimpleDescribeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, MySqlParser.RULE_simpleDescribeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6116;
	        localctx.command = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 131075) !== 0))) {
	            localctx.command = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6117;
	        this.tableName();
	        this.state = 6120;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,892,this._ctx);
	        if(la_===1) {
	            this.state = 6118;
	            localctx.column = this.uid();

	        } else if(la_===2) {
	            this.state = 6119;
	            localctx.pattern = this.match(MySqlParser.STRING_LITERAL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullDescribeStatement() {
	    let localctx = new FullDescribeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, MySqlParser.RULE_fullDescribeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6122;
	        localctx.command = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 45)) & ~0x1f) === 0 && ((1 << (_la - 45)) & 131075) !== 0))) {
	            localctx.command = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===422 || _la===550 || _la===885) {
	            this.state = 6123;
	            localctx.formatType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===422 || _la===550 || _la===885)) {
	                localctx.formatType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6124;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6125;
	            localctx.formatValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===466 || _la===652)) {
	                localctx.formatValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 6128;
	        this.describeObjectClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	helpStatement() {
	    let localctx = new HelpStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, MySqlParser.RULE_helpStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6130;
	        this.match(MySqlParser.HELP);
	        this.state = 6131;
	        this.match(MySqlParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useStatement() {
	    let localctx = new UseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, MySqlParser.RULE_useStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6133;
	        this.match(MySqlParser.USE);
	        this.state = 6134;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signalStatement() {
	    let localctx = new SignalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, MySqlParser.RULE_signalStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6136;
	        this.match(MySqlParser.SIGNAL);
	        this.state = 6144;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 162:
	            this.state = 6137;
	            this.match(MySqlParser.SQLSTATE);
	            this.state = 6139;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===669) {
	                this.state = 6138;
	                this.match(MySqlParser.VALUE);
	            }

	            this.state = 6141;
	            this.stringLiteral();
	            break;
	        case 1156:
	            this.state = 6142;
	            this.match(MySqlParser.ID);
	            break;
	        case 1157:
	            this.state = 6143;
	            this.match(MySqlParser.REVERSE_QUOTE_ID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 6155;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,897,this._ctx);
	        if(la_===1) {
	            this.state = 6146;
	            this.match(MySqlParser.SET);
	            this.state = 6147;
	            this.signalConditionInformation();
	            this.state = 6152;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 6148;
	                this.match(MySqlParser.COMMA);
	                this.state = 6149;
	                this.signalConditionInformation();
	                this.state = 6154;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resignalStatement() {
	    let localctx = new ResignalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, MySqlParser.RULE_resignalStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6157;
	        this.match(MySqlParser.RESIGNAL);
	        this.state = 6165;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 162:
	        	this.state = 6158;
	        	this.match(MySqlParser.SQLSTATE);
	        	this.state = 6160;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===669) {
	        	    this.state = 6159;
	        	    this.match(MySqlParser.VALUE);
	        	}

	        	this.state = 6162;
	        	this.stringLiteral();
	        	break;
	        case 1156:
	        	this.state = 6163;
	        	this.match(MySqlParser.ID);
	        	break;
	        case 1157:
	        	this.state = 6164;
	        	this.match(MySqlParser.REVERSE_QUOTE_ID);
	        	break;
	        case -1:
	        case 7:
	        case 9:
	        case 20:
	        case 24:
	        case 26:
	        case 33:
	        case 44:
	        case 45:
	        case 46:
	        case 51:
	        case 62:
	        case 71:
	        case 72:
	        case 85:
	        case 93:
	        case 102:
	        case 103:
	        case 119:
	        case 132:
	        case 138:
	        case 139:
	        case 141:
	        case 143:
	        case 147:
	        case 152:
	        case 153:
	        case 155:
	        case 156:
	        case 172:
	        case 182:
	        case 184:
	        case 186:
	        case 188:
	        case 192:
	        case 344:
	        case 345:
	        case 351:
	        case 356:
	        case 369:
	        case 390:
	        case 399:
	        case 432:
	        case 442:
	        case 444:
	        case 456:
	        case 560:
	        case 580:
	        case 589:
	        case 597:
	        case 604:
	        case 629:
	        case 635:
	        case 656:
	        case 661:
	        case 681:
	        case 708:
	        case 739:
	        case 1121:
	        case 1133:
	        case 1136:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 6176;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,901,this._ctx);
	        if(la_===1) {
	            this.state = 6167;
	            this.match(MySqlParser.SET);
	            this.state = 6168;
	            this.signalConditionInformation();
	            this.state = 6173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 6169;
	                this.match(MySqlParser.COMMA);
	                this.state = 6170;
	                this.signalConditionInformation();
	                this.state = 6175;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signalConditionInformation() {
	    let localctx = new SignalConditionInformationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, MySqlParser.RULE_signalConditionInformation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6178;
	        _la = this._input.LA(1);
	        if(!(((((_la - 359)) & ~0x1f) === 0 && ((1 << (_la - 359)) & 272105729) !== 0) || _la===507 || _la===515 || _la===639 || _la===646 || _la===836 || _la===1005)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6179;
	        this.match(MySqlParser.EQUAL_SYMBOL);
	        this.state = 6184;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1147:
	        case 1148:
	        case 1154:
	            this.state = 6180;
	            this.stringLiteral();
	            break;
	        case 1149:
	            this.state = 6181;
	            this.match(MySqlParser.DECIMAL_LITERAL);
	            break;
	        case 1159:
	        case 1160:
	            this.state = 6182;
	            this.mysqlVariable();
	            break;
	        case 11:
	        case 14:
	        case 18:
	        case 29:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 48:
	        case 55:
	        case 57:
	        case 59:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 94:
	        case 97:
	        case 117:
	        case 121:
	        case 124:
	        case 130:
	        case 140:
	        case 141:
	        case 148:
	        case 150:
	        case 158:
	        case 168:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1156:
	            this.state = 6183;
	            this.simpleId();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withStatement() {
	    let localctx = new WithStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, MySqlParser.RULE_withStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6186;
	        this.match(MySqlParser.WITH);
	        this.state = 6188;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,903,this._ctx);
	        if(la_===1) {
	            this.state = 6187;
	            this.match(MySqlParser.RECURSIVE);

	        }
	        this.state = 6190;
	        this.commonTableExpressions();
	        this.state = 6195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6191;
	            this.match(MySqlParser.COMMA);
	            this.state = 6192;
	            this.commonTableExpressions();
	            this.state = 6197;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableStatement() {
	    let localctx = new TableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, MySqlParser.RULE_tableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6198;
	        this.match(MySqlParser.TABLE);
	        this.state = 6199;
	        this.tableName();
	        this.state = 6201;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124) {
	            this.state = 6200;
	            this.orderByClause();
	        }

	        this.state = 6204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 6203;
	            this.limitClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	diagnosticsStatement() {
	    let localctx = new DiagnosticsStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, MySqlParser.RULE_diagnosticsStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6206;
	        this.match(MySqlParser.GET);
	        this.state = 6208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35 || _la===168) {
	            this.state = 6207;
	            _la = this._input.LA(1);
	            if(!(_la===35 || _la===168)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 6210;
	        this.match(MySqlParser.DIAGNOSTICS);
	        this.state = 6242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,911,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6211;
	            this.variableClause();
	            this.state = 6212;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6213;
	            _la = this._input.LA(1);
	            if(!(_la===117 || _la===996)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 6214;
	                this.match(MySqlParser.COMMA);
	                this.state = 6215;
	                this.variableClause();
	                this.state = 6216;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 6217;
	                _la = this._input.LA(1);
	                if(!(_la===117 || _la===996)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 6223;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 6224;
	            this.match(MySqlParser.CONDITION);
	            this.state = 6227;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1138:
	            case 1139:
	            case 1140:
	            case 1149:
	            case 1151:
	                this.state = 6225;
	                this.decimalLiteral();
	                break;
	            case 11:
	            case 14:
	            case 18:
	            case 29:
	            case 35:
	            case 37:
	            case 39:
	            case 42:
	            case 48:
	            case 55:
	            case 57:
	            case 59:
	            case 73:
	            case 77:
	            case 79:
	            case 85:
	            case 94:
	            case 97:
	            case 117:
	            case 121:
	            case 124:
	            case 130:
	            case 140:
	            case 141:
	            case 148:
	            case 150:
	            case 158:
	            case 168:
	            case 217:
	            case 218:
	            case 219:
	            case 220:
	            case 221:
	            case 226:
	            case 234:
	            case 237:
	            case 239:
	            case 251:
	            case 252:
	            case 253:
	            case 254:
	            case 255:
	            case 256:
	            case 257:
	            case 258:
	            case 259:
	            case 260:
	            case 261:
	            case 262:
	            case 263:
	            case 264:
	            case 265:
	            case 266:
	            case 267:
	            case 268:
	            case 269:
	            case 270:
	            case 271:
	            case 272:
	            case 273:
	            case 274:
	            case 275:
	            case 276:
	            case 277:
	            case 278:
	            case 279:
	            case 280:
	            case 281:
	            case 282:
	            case 283:
	            case 284:
	            case 285:
	            case 286:
	            case 287:
	            case 288:
	            case 289:
	            case 290:
	            case 291:
	            case 292:
	            case 293:
	            case 294:
	            case 295:
	            case 296:
	            case 297:
	            case 298:
	            case 299:
	            case 300:
	            case 301:
	            case 302:
	            case 303:
	            case 304:
	            case 305:
	            case 306:
	            case 307:
	            case 308:
	            case 309:
	            case 310:
	            case 311:
	            case 312:
	            case 313:
	            case 314:
	            case 315:
	            case 316:
	            case 317:
	            case 318:
	            case 319:
	            case 320:
	            case 322:
	            case 323:
	            case 324:
	            case 325:
	            case 326:
	            case 327:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 334:
	            case 335:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 340:
	            case 341:
	            case 342:
	            case 343:
	            case 344:
	            case 345:
	            case 346:
	            case 347:
	            case 348:
	            case 349:
	            case 350:
	            case 351:
	            case 352:
	            case 353:
	            case 354:
	            case 355:
	            case 356:
	            case 357:
	            case 358:
	            case 359:
	            case 360:
	            case 361:
	            case 362:
	            case 363:
	            case 364:
	            case 365:
	            case 366:
	            case 367:
	            case 368:
	            case 369:
	            case 370:
	            case 371:
	            case 372:
	            case 373:
	            case 374:
	            case 375:
	            case 376:
	            case 377:
	            case 378:
	            case 379:
	            case 380:
	            case 381:
	            case 382:
	            case 383:
	            case 384:
	            case 385:
	            case 387:
	            case 388:
	            case 389:
	            case 390:
	            case 391:
	            case 392:
	            case 393:
	            case 394:
	            case 395:
	            case 396:
	            case 397:
	            case 398:
	            case 399:
	            case 400:
	            case 401:
	            case 402:
	            case 403:
	            case 405:
	            case 407:
	            case 408:
	            case 409:
	            case 410:
	            case 411:
	            case 412:
	            case 413:
	            case 414:
	            case 415:
	            case 416:
	            case 417:
	            case 418:
	            case 419:
	            case 420:
	            case 421:
	            case 422:
	            case 423:
	            case 424:
	            case 425:
	            case 426:
	            case 427:
	            case 428:
	            case 429:
	            case 430:
	            case 431:
	            case 432:
	            case 434:
	            case 435:
	            case 436:
	            case 437:
	            case 438:
	            case 439:
	            case 440:
	            case 441:
	            case 442:
	            case 443:
	            case 444:
	            case 445:
	            case 446:
	            case 447:
	            case 448:
	            case 449:
	            case 450:
	            case 452:
	            case 453:
	            case 454:
	            case 455:
	            case 456:
	            case 457:
	            case 458:
	            case 459:
	            case 460:
	            case 461:
	            case 462:
	            case 463:
	            case 464:
	            case 465:
	            case 466:
	            case 467:
	            case 468:
	            case 469:
	            case 470:
	            case 471:
	            case 472:
	            case 473:
	            case 474:
	            case 475:
	            case 476:
	            case 477:
	            case 478:
	            case 479:
	            case 480:
	            case 481:
	            case 482:
	            case 483:
	            case 484:
	            case 485:
	            case 486:
	            case 487:
	            case 488:
	            case 489:
	            case 490:
	            case 491:
	            case 492:
	            case 493:
	            case 494:
	            case 495:
	            case 496:
	            case 497:
	            case 498:
	            case 499:
	            case 500:
	            case 501:
	            case 502:
	            case 503:
	            case 504:
	            case 505:
	            case 506:
	            case 507:
	            case 508:
	            case 509:
	            case 510:
	            case 511:
	            case 512:
	            case 513:
	            case 514:
	            case 515:
	            case 516:
	            case 517:
	            case 518:
	            case 519:
	            case 520:
	            case 521:
	            case 523:
	            case 527:
	            case 528:
	            case 529:
	            case 530:
	            case 531:
	            case 532:
	            case 533:
	            case 534:
	            case 535:
	            case 536:
	            case 537:
	            case 538:
	            case 539:
	            case 540:
	            case 541:
	            case 542:
	            case 543:
	            case 544:
	            case 547:
	            case 548:
	            case 549:
	            case 550:
	            case 551:
	            case 552:
	            case 553:
	            case 554:
	            case 555:
	            case 556:
	            case 557:
	            case 558:
	            case 560:
	            case 561:
	            case 562:
	            case 563:
	            case 564:
	            case 565:
	            case 566:
	            case 567:
	            case 568:
	            case 569:
	            case 570:
	            case 571:
	            case 572:
	            case 573:
	            case 574:
	            case 575:
	            case 576:
	            case 577:
	            case 578:
	            case 579:
	            case 580:
	            case 581:
	            case 582:
	            case 583:
	            case 584:
	            case 585:
	            case 586:
	            case 587:
	            case 588:
	            case 589:
	            case 591:
	            case 592:
	            case 594:
	            case 595:
	            case 596:
	            case 597:
	            case 598:
	            case 599:
	            case 600:
	            case 601:
	            case 602:
	            case 603:
	            case 604:
	            case 605:
	            case 606:
	            case 608:
	            case 609:
	            case 610:
	            case 611:
	            case 612:
	            case 613:
	            case 614:
	            case 615:
	            case 616:
	            case 617:
	            case 618:
	            case 619:
	            case 620:
	            case 621:
	            case 622:
	            case 623:
	            case 624:
	            case 625:
	            case 626:
	            case 627:
	            case 628:
	            case 629:
	            case 630:
	            case 631:
	            case 632:
	            case 633:
	            case 634:
	            case 635:
	            case 636:
	            case 638:
	            case 639:
	            case 640:
	            case 641:
	            case 642:
	            case 643:
	            case 644:
	            case 645:
	            case 646:
	            case 647:
	            case 648:
	            case 649:
	            case 650:
	            case 651:
	            case 652:
	            case 653:
	            case 654:
	            case 655:
	            case 656:
	            case 657:
	            case 658:
	            case 659:
	            case 660:
	            case 661:
	            case 662:
	            case 663:
	            case 664:
	            case 665:
	            case 666:
	            case 667:
	            case 668:
	            case 669:
	            case 670:
	            case 671:
	            case 672:
	            case 673:
	            case 674:
	            case 675:
	            case 677:
	            case 678:
	            case 679:
	            case 680:
	            case 681:
	            case 682:
	            case 684:
	            case 685:
	            case 686:
	            case 687:
	            case 688:
	            case 689:
	            case 690:
	            case 691:
	            case 692:
	            case 693:
	            case 694:
	            case 695:
	            case 696:
	            case 697:
	            case 699:
	            case 700:
	            case 701:
	            case 702:
	            case 703:
	            case 704:
	            case 705:
	            case 706:
	            case 707:
	            case 708:
	            case 709:
	            case 710:
	            case 711:
	            case 712:
	            case 717:
	            case 718:
	            case 720:
	            case 721:
	            case 722:
	            case 723:
	            case 724:
	            case 725:
	            case 726:
	            case 727:
	            case 728:
	            case 729:
	            case 730:
	            case 731:
	            case 732:
	            case 733:
	            case 734:
	            case 736:
	            case 737:
	            case 738:
	            case 739:
	            case 740:
	            case 741:
	            case 742:
	            case 743:
	            case 744:
	            case 745:
	            case 746:
	            case 747:
	            case 748:
	            case 749:
	            case 750:
	            case 751:
	            case 752:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	            case 757:
	            case 758:
	            case 759:
	            case 760:
	            case 761:
	            case 762:
	            case 763:
	            case 764:
	            case 765:
	            case 766:
	            case 767:
	            case 768:
	            case 769:
	            case 770:
	            case 771:
	            case 772:
	            case 773:
	            case 774:
	            case 775:
	            case 776:
	            case 777:
	            case 778:
	            case 779:
	            case 780:
	            case 781:
	            case 782:
	            case 783:
	            case 784:
	            case 785:
	            case 786:
	            case 787:
	            case 788:
	            case 789:
	            case 790:
	            case 791:
	            case 792:
	            case 793:
	            case 794:
	            case 795:
	            case 796:
	            case 797:
	            case 798:
	            case 799:
	            case 800:
	            case 801:
	            case 802:
	            case 803:
	            case 806:
	            case 807:
	            case 808:
	            case 809:
	            case 810:
	            case 811:
	            case 812:
	            case 813:
	            case 814:
	            case 815:
	            case 816:
	            case 817:
	            case 818:
	            case 819:
	            case 820:
	            case 821:
	            case 822:
	            case 823:
	            case 824:
	            case 825:
	            case 826:
	            case 827:
	            case 828:
	            case 829:
	            case 830:
	            case 831:
	            case 832:
	            case 833:
	            case 834:
	            case 835:
	            case 836:
	            case 837:
	            case 838:
	            case 839:
	            case 840:
	            case 841:
	            case 842:
	            case 843:
	            case 844:
	            case 845:
	            case 846:
	            case 847:
	            case 848:
	            case 849:
	            case 850:
	            case 851:
	            case 852:
	            case 853:
	            case 854:
	            case 855:
	            case 856:
	            case 857:
	            case 858:
	            case 859:
	            case 860:
	            case 861:
	            case 862:
	            case 863:
	            case 864:
	            case 865:
	            case 866:
	            case 867:
	            case 868:
	            case 869:
	            case 870:
	            case 871:
	            case 872:
	            case 873:
	            case 874:
	            case 875:
	            case 876:
	            case 877:
	            case 878:
	            case 879:
	            case 880:
	            case 881:
	            case 882:
	            case 883:
	            case 884:
	            case 885:
	            case 886:
	            case 887:
	            case 888:
	            case 889:
	            case 890:
	            case 891:
	            case 892:
	            case 893:
	            case 894:
	            case 895:
	            case 896:
	            case 897:
	            case 898:
	            case 899:
	            case 900:
	            case 901:
	            case 902:
	            case 903:
	            case 904:
	            case 905:
	            case 906:
	            case 907:
	            case 908:
	            case 909:
	            case 910:
	            case 911:
	            case 912:
	            case 913:
	            case 914:
	            case 915:
	            case 916:
	            case 917:
	            case 918:
	            case 919:
	            case 920:
	            case 921:
	            case 922:
	            case 923:
	            case 924:
	            case 925:
	            case 926:
	            case 927:
	            case 928:
	            case 929:
	            case 930:
	            case 931:
	            case 932:
	            case 933:
	            case 934:
	            case 935:
	            case 936:
	            case 937:
	            case 938:
	            case 939:
	            case 940:
	            case 941:
	            case 942:
	            case 943:
	            case 944:
	            case 945:
	            case 946:
	            case 947:
	            case 948:
	            case 949:
	            case 950:
	            case 951:
	            case 952:
	            case 953:
	            case 954:
	            case 955:
	            case 956:
	            case 957:
	            case 958:
	            case 959:
	            case 960:
	            case 961:
	            case 962:
	            case 963:
	            case 964:
	            case 965:
	            case 966:
	            case 967:
	            case 968:
	            case 969:
	            case 970:
	            case 971:
	            case 972:
	            case 973:
	            case 974:
	            case 975:
	            case 976:
	            case 977:
	            case 978:
	            case 979:
	            case 980:
	            case 981:
	            case 982:
	            case 983:
	            case 984:
	            case 985:
	            case 986:
	            case 987:
	            case 988:
	            case 989:
	            case 990:
	            case 991:
	            case 992:
	            case 993:
	            case 994:
	            case 995:
	            case 996:
	            case 997:
	            case 998:
	            case 999:
	            case 1000:
	            case 1001:
	            case 1002:
	            case 1003:
	            case 1004:
	            case 1005:
	            case 1006:
	            case 1007:
	            case 1008:
	            case 1009:
	            case 1010:
	            case 1011:
	            case 1012:
	            case 1013:
	            case 1014:
	            case 1015:
	            case 1016:
	            case 1017:
	            case 1018:
	            case 1019:
	            case 1020:
	            case 1021:
	            case 1022:
	            case 1023:
	            case 1024:
	            case 1025:
	            case 1026:
	            case 1027:
	            case 1028:
	            case 1029:
	            case 1030:
	            case 1031:
	            case 1032:
	            case 1033:
	            case 1034:
	            case 1035:
	            case 1036:
	            case 1037:
	            case 1038:
	            case 1039:
	            case 1040:
	            case 1041:
	            case 1042:
	            case 1043:
	            case 1044:
	            case 1045:
	            case 1046:
	            case 1047:
	            case 1048:
	            case 1049:
	            case 1050:
	            case 1051:
	            case 1052:
	            case 1053:
	            case 1054:
	            case 1055:
	            case 1056:
	            case 1057:
	            case 1058:
	            case 1059:
	            case 1060:
	            case 1061:
	            case 1062:
	            case 1063:
	            case 1064:
	            case 1065:
	            case 1066:
	            case 1067:
	            case 1068:
	            case 1069:
	            case 1070:
	            case 1071:
	            case 1072:
	            case 1073:
	            case 1074:
	            case 1075:
	            case 1076:
	            case 1077:
	            case 1078:
	            case 1079:
	            case 1080:
	            case 1081:
	            case 1082:
	            case 1083:
	            case 1084:
	            case 1085:
	            case 1086:
	            case 1087:
	            case 1088:
	            case 1089:
	            case 1090:
	            case 1091:
	            case 1092:
	            case 1093:
	            case 1094:
	            case 1095:
	            case 1096:
	            case 1097:
	            case 1098:
	            case 1099:
	            case 1100:
	            case 1101:
	            case 1102:
	            case 1103:
	            case 1104:
	            case 1105:
	            case 1106:
	            case 1107:
	            case 1123:
	            case 1137:
	            case 1145:
	            case 1148:
	            case 1156:
	            case 1159:
	            case 1160:
	                this.state = 6226;
	                this.variableClause();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6229;
	            this.variableClause();
	            this.state = 6230;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 6231;
	            this.diagnosticsConditionInformationName();
	            this.state = 6239;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 6232;
	                this.match(MySqlParser.COMMA);
	                this.state = 6233;
	                this.variableClause();
	                this.state = 6234;
	                this.match(MySqlParser.EQUAL_SYMBOL);
	                this.state = 6235;
	                this.diagnosticsConditionInformationName();
	                this.state = 6241;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	diagnosticsConditionInformationName() {
	    let localctx = new DiagnosticsConditionInformationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, MySqlParser.RULE_diagnosticsConditionInformationName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6244;
	        _la = this._input.LA(1);
	        if(!(((((_la - 359)) & ~0x1f) === 0 && ((1 << (_la - 359)) & 272105729) !== 0) || _la===507 || _la===515 || _la===592 || _la===639 || _la===646 || _la===836 || _la===1005)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeObjectClause() {
	    let localctx = new DescribeObjectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, MySqlParser.RULE_describeObjectClause);
	    try {
	        this.state = 6256;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 44:
	        case 85:
	        case 141:
	        case 152:
	        case 184:
	        case 1133:
	            localctx = new DescribeStatementsContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6251;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 152:
	            case 1133:
	                this.state = 6246;
	                this.selectStatement();
	                break;
	            case 44:
	                this.state = 6247;
	                this.deleteStatement();
	                break;
	            case 85:
	                this.state = 6248;
	                this.insertStatement();
	                break;
	            case 141:
	                this.state = 6249;
	                this.replaceStatement();
	                break;
	            case 184:
	                this.state = 6250;
	                this.updateStatement();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 65:
	            localctx = new DescribeConnectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6253;
	            this.match(MySqlParser.FOR);
	            this.state = 6254;
	            this.match(MySqlParser.CONNECTION);
	            this.state = 6255;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullId() {
	    let localctx = new FullIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, MySqlParser.RULE_fullId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6258;
	        this.uid();
	        this.state = 6262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,914,this._ctx);
	        if(la_===1) {
	            this.state = 6259;
	            this.match(MySqlParser.DOT_ID);

	        } else if(la_===2) {
	            this.state = 6260;
	            this.match(MySqlParser.DOT);
	            this.state = 6261;
	            this.uid();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableName() {
	    let localctx = new TableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, MySqlParser.RULE_tableName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6264;
	        this.fullId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleName() {
	    let localctx = new RoleNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, MySqlParser.RULE_roleName);
	    try {
	        this.state = 6268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,915,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6266;
	            this.userName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6267;
	            this.uid();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullColumnName() {
	    let localctx = new FullColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, MySqlParser.RULE_fullColumnName);
	    try {
	        this.state = 6284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,920,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6270;
	            this.uid();
	            this.state = 6275;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,917,this._ctx);
	            if(la_===1) {
	                this.state = 6271;
	                this.dottedId();
	                this.state = 6273;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,916,this._ctx);
	                if(la_===1) {
	                    this.state = 6272;
	                    this.dottedId();

	                }

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6278;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,918,this._ctx);
	            if(la_===1) {
	                this.state = 6277;
	                this.matchWildcard();

	            }
	            this.state = 6280;
	            this.dottedId();
	            this.state = 6282;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,919,this._ctx);
	            if(la_===1) {
	                this.state = 6281;
	                this.dottedId();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnName() {
	    let localctx = new IndexColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, MySqlParser.RULE_indexColumnName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,923,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6288;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,921,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6286;
	                this.uid();
	                break;

	            case 2:
	                this.state = 6287;
	                this.match(MySqlParser.STRING_LITERAL);
	                break;

	            }
	            this.state = 6294;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 6290;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 6291;
	                this.decimalLiteral();
	                this.state = 6292;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            break;

	        case 2:
	            this.state = 6296;
	            this.expression(0);
	            break;

	        }
	        this.state = 6300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13 || _la===45) {
	            this.state = 6299;
	            localctx.sortType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===13 || _la===45)) {
	                localctx.sortType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleUserName() {
	    let localctx = new SimpleUserNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, MySqlParser.RULE_simpleUserName);
	    try {
	        this.state = 6306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,925,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6302;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6303;
	            this.match(MySqlParser.ID);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6304;
	            this.match(MySqlParser.ADMIN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6305;
	            this.keywordsCanBeId();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hostName() {
	    let localctx = new HostNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, MySqlParser.RULE_hostName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6308;
	        _la = this._input.LA(1);
	        if(!(((((_la - 1137)) & ~0x1f) === 0 && ((1 << (_la - 1137)) & 6291457) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userName() {
	    let localctx = new UserNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, MySqlParser.RULE_userName);
	    try {
	        this.state = 6315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,926,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6310;
	            this.simpleUserName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6311;
	            this.simpleUserName();
	            this.state = 6312;
	            this.hostName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6314;
	            this.currentUserExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mysqlVariable() {
	    let localctx = new MysqlVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, MySqlParser.RULE_mysqlVariable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6317;
	        _la = this._input.LA(1);
	        if(!(_la===1159 || _la===1160)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetName() {
	    let localctx = new CharsetNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, MySqlParser.RULE_charsetName);
	    try {
	        this.state = 6323;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,927,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6319;
	            this.match(MySqlParser.BINARY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6320;
	            this.charsetNameBase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6321;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6322;
	            this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collationName() {
	    let localctx = new CollationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, MySqlParser.RULE_collationName);
	    try {
	        this.state = 6327;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,928,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6325;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6326;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	engineName() {
	    let localctx = new EngineNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, MySqlParser.RULE_engineName);
	    try {
	        this.state = 6332;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 375:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6329;
	            this.engineNameBase();
	            break;
	        case 1156:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6330;
	            this.match(MySqlParser.ID);
	            break;
	        case 1148:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6331;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	engineNameBase() {
	    let localctx = new EngineNameBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, MySqlParser.RULE_engineNameBase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6334;
	        _la = this._input.LA(1);
	        if(!(_la===375 || ((((_la - 787)) & ~0x1f) === 0 && ((1 << (_la - 787)) & 4095) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uuidSet() {
	    let localctx = new UuidSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, MySqlParser.RULE_uuidSet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6336;
	        this.decimalLiteral();
	        this.state = 6337;
	        this.match(MySqlParser.MINUS);
	        this.state = 6338;
	        this.decimalLiteral();
	        this.state = 6339;
	        this.match(MySqlParser.MINUS);
	        this.state = 6340;
	        this.decimalLiteral();
	        this.state = 6341;
	        this.match(MySqlParser.MINUS);
	        this.state = 6342;
	        this.decimalLiteral();
	        this.state = 6343;
	        this.match(MySqlParser.MINUS);
	        this.state = 6344;
	        this.decimalLiteral();
	        this.state = 6350; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 6345;
	            this.match(MySqlParser.COLON_SYMB);
	            this.state = 6346;
	            this.decimalLiteral();
	            this.state = 6347;
	            this.match(MySqlParser.MINUS);
	            this.state = 6348;
	            this.decimalLiteral();
	            this.state = 6352; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===1144);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xid() {
	    let localctx = new XidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, MySqlParser.RULE_xid);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6354;
	        localctx.globalTableUid = this.xuidStringId();
	        this.state = 6361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1135) {
	            this.state = 6355;
	            this.match(MySqlParser.COMMA);
	            this.state = 6356;
	            localctx.qualifier = this.xuidStringId();
	            this.state = 6359;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1135) {
	                this.state = 6357;
	                this.match(MySqlParser.COMMA);
	                this.state = 6358;
	                localctx.idFormat = this.decimalLiteral();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xuidStringId() {
	    let localctx = new XuidStringIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, MySqlParser.RULE_xuidStringId);
	    var _la = 0;
	    try {
	        this.state = 6370;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1148:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6363;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        case 1153:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6364;
	            this.match(MySqlParser.BIT_STRING);
	            break;
	        case 1150:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6366; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 6365;
	                this.match(MySqlParser.HEXADECIMAL_LITERAL);
	                this.state = 6368; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1150);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	authPlugin() {
	    let localctx = new AuthPluginContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, MySqlParser.RULE_authPlugin);
	    try {
	        this.state = 6374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,935,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6372;
	            this.uid();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6373;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uid() {
	    let localctx = new UidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, MySqlParser.RULE_uid);
	    try {
	        this.state = 6379;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 14:
	        case 18:
	        case 29:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 48:
	        case 55:
	        case 57:
	        case 59:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 94:
	        case 97:
	        case 117:
	        case 121:
	        case 124:
	        case 130:
	        case 140:
	        case 141:
	        case 148:
	        case 150:
	        case 158:
	        case 168:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1156:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6376;
	            this.simpleId();
	            break;
	        case 1145:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6377;
	            this.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING);
	            break;
	        case 1148:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6378;
	            this.match(MySqlParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleId() {
	    let localctx = new SimpleIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, MySqlParser.RULE_simpleId);
	    try {
	        this.state = 6390;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,937,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6381;
	            this.match(MySqlParser.ID);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6382;
	            this.charsetNameBase();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6383;
	            this.transactionLevelBase();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6384;
	            this.engineNameBase();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6385;
	            this.privilegesBase();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6386;
	            this.intervalTypeBase();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6387;
	            this.dataTypeBase();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6388;
	            this.keywordsCanBeId();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6389;
	            this.scalarFunctionName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dottedId() {
	    let localctx = new DottedIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, MySqlParser.RULE_dottedId);
	    try {
	        this.state = 6395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1155:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6392;
	            this.match(MySqlParser.DOT_ID);
	            break;
	        case 1132:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6393;
	            this.match(MySqlParser.DOT);
	            this.state = 6394;
	            this.uid();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalLiteral() {
	    let localctx = new DecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, MySqlParser.RULE_decimalLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6397;
	        _la = this._input.LA(1);
	        if(!(((((_la - 1138)) & ~0x1f) === 0 && ((1 << (_la - 1138)) & 10247) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fileSizeLiteral() {
	    let localctx = new FileSizeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, MySqlParser.RULE_fileSizeLiteral);
	    try {
	        this.state = 6401;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1146:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6399;
	            this.match(MySqlParser.FILESIZE_LITERAL);
	            break;
	        case 1138:
	        case 1139:
	        case 1140:
	        case 1149:
	        case 1151:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6400;
	            this.decimalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, MySqlParser.RULE_stringLiteral);
	    var _la = 0;
	    try {
	        this.state = 6426;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,946,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6408;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1148:
	            case 1154:
	                this.state = 6404;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===1154) {
	                    this.state = 6403;
	                    this.match(MySqlParser.STRING_CHARSET_NAME);
	                }

	                this.state = 6406;
	                this.match(MySqlParser.STRING_LITERAL);
	                break;
	            case 1147:
	                this.state = 6407;
	                this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6411; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 6410;
	            		this.match(MySqlParser.STRING_LITERAL);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 6413; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,942, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6420;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 1148:
	            case 1154:
	                this.state = 6416;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===1154) {
	                    this.state = 6415;
	                    this.match(MySqlParser.STRING_CHARSET_NAME);
	                }

	                this.state = 6418;
	                this.match(MySqlParser.STRING_LITERAL);
	                break;
	            case 1147:
	                this.state = 6419;
	                this.match(MySqlParser.START_NATIONAL_STRING_LITERAL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 6424;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,945,this._ctx);
	            if(la_===1) {
	                this.state = 6422;
	                this.match(MySqlParser.COLLATE);
	                this.state = 6423;
	                this.collationName();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, MySqlParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6428;
	        _la = this._input.LA(1);
	        if(!(_la===63 || _la===178)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hexadecimalLiteral() {
	    let localctx = new HexadecimalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, MySqlParser.RULE_hexadecimalLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1154) {
	            this.state = 6430;
	            this.match(MySqlParser.STRING_CHARSET_NAME);
	        }

	        this.state = 6433;
	        this.match(MySqlParser.HEXADECIMAL_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullNotnull() {
	    let localctx = new NullNotnullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, MySqlParser.RULE_nullNotnull);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===114) {
	            this.state = 6435;
	            this.match(MySqlParser.NOT);
	        }

	        this.state = 6438;
	        _la = this._input.LA(1);
	        if(!(_la===116 || _la===1152)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, MySqlParser.RULE_constant);
	    var _la = 0;
	    try {
	        this.state = 6452;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,950,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6440;
	            this.stringLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6441;
	            this.decimalLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6442;
	            this.match(MySqlParser.MINUS);
	            this.state = 6443;
	            this.decimalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6444;
	            this.hexadecimalLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6445;
	            this.booleanLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6446;
	            this.match(MySqlParser.REAL_LITERAL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6447;
	            this.match(MySqlParser.BIT_STRING);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6449;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 6448;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 6451;
	            localctx.nullLiteral = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===116 || _la===1152)) {
	                localctx.nullLiteral = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataType() {
	    let localctx = new DataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, MySqlParser.RULE_dataType);
	    var _la = 0;
	    try {
	        this.state = 6580;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,979,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6454;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===25 || ((((_la - 222)) & ~0x1f) === 0 && ((1 << (_la - 222)) & 31239) !== 0) || _la===518)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===238) {
	                this.state = 6455;
	                this.match(MySqlParser.VARYING);
	            }

	            this.state = 6459;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,952,this._ctx);
	            if(la_===1) {
	                this.state = 6458;
	                this.lengthOneDimension();

	            }
	            this.state = 6462;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,953,this._ctx);
	            if(la_===1) {
	                this.state = 6461;
	                this.match(MySqlParser.BINARY);

	            }
	            this.state = 6467;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,954,this._ctx);
	            if(la_===1) {
	                this.state = 6464;
	                this.charSet();
	                this.state = 6465;
	                this.charsetName();

	            }
	            this.state = 6472;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,955,this._ctx);
	            if(la_===1) {
	                this.state = 6469;
	                this.match(MySqlParser.COLLATE);
	                this.state = 6470;
	                this.collationName();

	            } else if(la_===2) {
	                this.state = 6471;
	                this.match(MySqlParser.BINARY);

	            }
	            break;

	        case 2:
	            localctx = new NationalVaryingStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6474;
	            this.match(MySqlParser.NATIONAL);
	            this.state = 6475;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===25 || _la===222)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6476;
	            this.match(MySqlParser.VARYING);
	            this.state = 6478;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,956,this._ctx);
	            if(la_===1) {
	                this.state = 6477;
	                this.lengthOneDimension();

	            }
	            this.state = 6481;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,957,this._ctx);
	            if(la_===1) {
	                this.state = 6480;
	                this.match(MySqlParser.BINARY);

	            }
	            break;

	        case 3:
	            localctx = new NationalStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6483;
	            this.match(MySqlParser.NATIONAL);
	            this.state = 6484;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===25 || _la===222 || _la===223)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6486;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,958,this._ctx);
	            if(la_===1) {
	                this.state = 6485;
	                this.lengthOneDimension();

	            }
	            this.state = 6489;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,959,this._ctx);
	            if(la_===1) {
	                this.state = 6488;
	                this.match(MySqlParser.BINARY);

	            }
	            break;

	        case 4:
	            localctx = new NationalStringDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6491;
	            this.match(MySqlParser.NCHAR);
	            this.state = 6492;
	            localctx.typeName = this.match(MySqlParser.VARCHAR);
	            this.state = 6494;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,960,this._ctx);
	            if(la_===1) {
	                this.state = 6493;
	                this.lengthOneDimension();

	            }
	            this.state = 6497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,961,this._ctx);
	            if(la_===1) {
	                this.state = 6496;
	                this.match(MySqlParser.BINARY);

	            }
	            break;

	        case 5:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6499;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 196)) & ~0x1f) === 0 && ((1 << (_la - 196)) & 4095) !== 0))) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6501;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,962,this._ctx);
	            if(la_===1) {
	                this.state = 6500;
	                this.lengthOneDimension();

	            }
	            this.state = 6506;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,963,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6503;
	                    _la = this._input.LA(1);
	                    if(!(_la===183 || _la===195 || _la===612)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    } 
	                }
	                this.state = 6508;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,963,this._ctx);
	            }

	            break;

	        case 6:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6509;
	            localctx.typeName = this.match(MySqlParser.REAL);
	            this.state = 6511;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,964,this._ctx);
	            if(la_===1) {
	                this.state = 6510;
	                this.lengthTwoDimension();

	            }
	            this.state = 6516;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,965,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6513;
	                    _la = this._input.LA(1);
	                    if(!(_la===183 || _la===195 || _la===612)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    } 
	                }
	                this.state = 6518;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,965,this._ctx);
	            }

	            break;

	        case 7:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6519;
	            localctx.typeName = this.match(MySqlParser.DOUBLE);
	            this.state = 6521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===210) {
	                this.state = 6520;
	                this.match(MySqlParser.PRECISION);
	            }

	            this.state = 6524;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,967,this._ctx);
	            if(la_===1) {
	                this.state = 6523;
	                this.lengthTwoDimension();

	            }
	            this.state = 6529;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,968,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6526;
	                    _la = this._input.LA(1);
	                    if(!(_la===183 || _la===195 || _la===612)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    } 
	                }
	                this.state = 6531;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,968,this._ctx);
	            }

	            break;

	        case 8:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6532;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 211)) & ~0x1f) === 0 && ((1 << (_la - 211)) & 63) !== 0) || _la===431)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6534;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,969,this._ctx);
	            if(la_===1) {
	                this.state = 6533;
	                this.lengthTwoOptionalDimension();

	            }
	            this.state = 6539;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,970,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6536;
	                    _la = this._input.LA(1);
	                    if(!(_la===183 || _la===195 || _la===612)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    } 
	                }
	                this.state = 6541;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,970,this._ctx);
	            }

	            break;

	        case 9:
	            localctx = new SimpleDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6542;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 4237313) !== 0) || _la===348 || _la===349)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 10:
	            localctx = new DimensionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6543;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 218)) & ~0x1f) === 0 && ((1 << (_la - 218)) & 2831) !== 0) || _la===346)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6545;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,971,this._ctx);
	            if(la_===1) {
	                this.state = 6544;
	                this.lengthOneDimension();

	            }
	            break;

	        case 11:
	            localctx = new CollectionDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6547;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===153 || _la===237)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6548;
	            this.collectionOptions();
	            this.state = 6550;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,972,this._ctx);
	            if(la_===1) {
	                this.state = 6549;
	                this.match(MySqlParser.BINARY);

	            }
	            this.state = 6555;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,973,this._ctx);
	            if(la_===1) {
	                this.state = 6552;
	                this.charSet();
	                this.state = 6553;
	                this.charsetName();

	            }
	            break;

	        case 12:
	            localctx = new SpatialDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6557;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===466 || ((((_la - 803)) & ~0x1f) === 0 && ((1 << (_la - 803)) & 511) !== 0))) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6560;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,974,this._ctx);
	            if(la_===1) {
	                this.state = 6558;
	                this.match(MySqlParser.SRID);
	                this.state = 6559;
	                this.decimalLiteral();

	            }
	            break;

	        case 13:
	            localctx = new LongVarcharDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6562;
	            localctx.typeName = this.match(MySqlParser.LONG);
	            this.state = 6564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===223) {
	                this.state = 6563;
	                this.match(MySqlParser.VARCHAR);
	            }

	            this.state = 6567;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,976,this._ctx);
	            if(la_===1) {
	                this.state = 6566;
	                this.match(MySqlParser.BINARY);

	            }
	            this.state = 6572;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,977,this._ctx);
	            if(la_===1) {
	                this.state = 6569;
	                this.charSet();
	                this.state = 6570;
	                this.charsetName();

	            }
	            this.state = 6576;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,978,this._ctx);
	            if(la_===1) {
	                this.state = 6574;
	                this.match(MySqlParser.COLLATE);
	                this.state = 6575;
	                this.collationName();

	            }
	            break;

	        case 14:
	            localctx = new LongVarbinaryDataTypeContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6578;
	            this.match(MySqlParser.LONG);
	            this.state = 6579;
	            this.match(MySqlParser.VARBINARY);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionOptions() {
	    let localctx = new CollectionOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, MySqlParser.RULE_collectionOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6582;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 6583;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 6588;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6584;
	            this.match(MySqlParser.COMMA);
	            this.state = 6585;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 6590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6591;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	convertedDataType() {
	    let localctx = new ConvertedDataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, MySqlParser.RULE_convertedDataType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6615;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 226:
	        case 518:
	            this.state = 6593;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===226 || _la===518)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 6594;
	                this.lengthOneDimension();
	            }

	            break;
	        case 222:
	            this.state = 6597;
	            localctx.typeName = this.match(MySqlParser.CHAR);
	            this.state = 6599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 6598;
	                this.lengthOneDimension();
	            }

	            this.state = 6604;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25 || _la===222 || _la===841) {
	                this.state = 6601;
	                this.charSet();
	                this.state = 6602;
	                this.charsetName();
	            }

	            break;
	        case 200:
	        case 206:
	        case 217:
	        case 218:
	        case 220:
	        case 466:
	            this.state = 6606;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 1441857) !== 0) || _la===466)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 214:
	        case 215:
	            this.state = 6607;
	            localctx.typeName = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===214 || _la===215)) {
	                localctx.typeName = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1133) {
	                this.state = 6608;
	                this.lengthTwoOptionalDimension();
	            }

	            break;
	        case 183:
	        case 612:
	            this.state = 6611;
	            _la = this._input.LA(1);
	            if(!(_la===183 || _la===612)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200 || _la===206) {
	                this.state = 6612;
	                _la = this._input.LA(1);
	                if(!(_la===200 || _la===206)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 6618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 6617;
	            this.match(MySqlParser.ARRAY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthOneDimension() {
	    let localctx = new LengthOneDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, MySqlParser.RULE_lengthOneDimension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6620;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 6621;
	        this.decimalLiteral();
	        this.state = 6622;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthTwoDimension() {
	    let localctx = new LengthTwoDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, MySqlParser.RULE_lengthTwoDimension);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6624;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 6625;
	        this.decimalLiteral();
	        this.state = 6626;
	        this.match(MySqlParser.COMMA);
	        this.state = 6627;
	        this.decimalLiteral();
	        this.state = 6628;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lengthTwoOptionalDimension() {
	    let localctx = new LengthTwoOptionalDimensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, MySqlParser.RULE_lengthTwoOptionalDimension);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6630;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 6631;
	        this.decimalLiteral();
	        this.state = 6634;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1135) {
	            this.state = 6632;
	            this.match(MySqlParser.COMMA);
	            this.state = 6633;
	            this.decimalLiteral();
	        }

	        this.state = 6636;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uidList() {
	    let localctx = new UidListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, MySqlParser.RULE_uidList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6638;
	        this.uid();
	        this.state = 6643;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,989,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6639;
	                this.match(MySqlParser.COMMA);
	                this.state = 6640;
	                this.uid(); 
	            }
	            this.state = 6645;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,989,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullColumnNameList() {
	    let localctx = new FullColumnNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, MySqlParser.RULE_fullColumnNameList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6646;
	        this.fullColumnName();
	        this.state = 6651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6647;
	            this.match(MySqlParser.COMMA);
	            this.state = 6648;
	            this.fullColumnName();
	            this.state = 6653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tables() {
	    let localctx = new TablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, MySqlParser.RULE_tables);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6654;
	        this.tableName();
	        this.state = 6659;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,991,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6655;
	                this.match(MySqlParser.COMMA);
	                this.state = 6656;
	                this.tableName(); 
	            }
	            this.state = 6661;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,991,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexColumnNames() {
	    let localctx = new IndexColumnNamesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, MySqlParser.RULE_indexColumnNames);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6662;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 6663;
	        this.indexColumnName();
	        this.state = 6668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6664;
	            this.match(MySqlParser.COMMA);
	            this.state = 6665;
	            this.indexColumnName();
	            this.state = 6670;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 6671;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressions() {
	    let localctx = new ExpressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, MySqlParser.RULE_expressions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6673;
	        this.expression(0);
	        this.state = 6678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6674;
	            this.match(MySqlParser.COMMA);
	            this.state = 6675;
	            this.expression(0);
	            this.state = 6680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionsWithDefaults() {
	    let localctx = new ExpressionsWithDefaultsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, MySqlParser.RULE_expressionsWithDefaults);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6681;
	        this.expressionOrDefault();
	        this.state = 6686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6682;
	            this.match(MySqlParser.COMMA);
	            this.state = 6683;
	            this.expressionOrDefault();
	            this.state = 6688;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constants() {
	    let localctx = new ConstantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, MySqlParser.RULE_constants);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6689;
	        this.constant();
	        this.state = 6694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6690;
	            this.match(MySqlParser.COMMA);
	            this.state = 6691;
	            this.constant();
	            this.state = 6696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStrings() {
	    let localctx = new SimpleStringsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, MySqlParser.RULE_simpleStrings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6697;
	        this.match(MySqlParser.STRING_LITERAL);
	        this.state = 6702;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6698;
	            this.match(MySqlParser.COMMA);
	            this.state = 6699;
	            this.match(MySqlParser.STRING_LITERAL);
	            this.state = 6704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userVariables() {
	    let localctx = new UserVariablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, MySqlParser.RULE_userVariables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6705;
	        this.match(MySqlParser.LOCAL_ID);
	        this.state = 6710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 6706;
	            this.match(MySqlParser.COMMA);
	            this.state = 6707;
	            this.match(MySqlParser.LOCAL_ID);
	            this.state = 6712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, MySqlParser.RULE_defaultValue);
	    try {
	        this.state = 6739;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1000,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6713;
	            this.match(MySqlParser.NULL_LITERAL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6714;
	            this.match(MySqlParser.CAST);
	            this.state = 6715;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6716;
	            this.expression(0);
	            this.state = 6717;
	            this.match(MySqlParser.AS);
	            this.state = 6718;
	            this.convertedDataType();
	            this.state = 6719;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6722;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,998,this._ctx);
	            if(la_===1) {
	                this.state = 6721;
	                this.unaryOperator();

	            }
	            this.state = 6724;
	            this.constant();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6725;
	            this.currentTimestamp();
	            this.state = 6729;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,999,this._ctx);
	            if(la_===1) {
	                this.state = 6726;
	                this.match(MySqlParser.ON);
	                this.state = 6727;
	                this.match(MySqlParser.UPDATE);
	                this.state = 6728;
	                this.currentTimestamp();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6731;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6732;
	            this.expression(0);
	            this.state = 6733;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6735;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6736;
	            this.fullId();
	            this.state = 6737;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currentTimestamp() {
	    let localctx = new CurrentTimestampContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, MySqlParser.RULE_currentTimestamp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6755;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 315:
	        case 316:
	        case 322:
	            this.state = 6741;
	            _la = this._input.LA(1);
	            if(!(((((_la - 315)) & ~0x1f) === 0 && ((1 << (_la - 315)) & 131) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6747;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1002,this._ctx);
	            if(la_===1) {
	                this.state = 6742;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 6744;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(((((_la - 1138)) & ~0x1f) === 0 && ((1 << (_la - 1138)) & 10247) !== 0)) {
	                    this.state = 6743;
	                    this.decimalLiteral();
	                }

	                this.state = 6746;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            break;
	        case 323:
	            this.state = 6749;
	            this.match(MySqlParser.NOW);
	            this.state = 6750;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 1138)) & ~0x1f) === 0 && ((1 << (_la - 1138)) & 10247) !== 0)) {
	                this.state = 6751;
	                this.decimalLiteral();
	            }

	            this.state = 6754;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionOrDefault() {
	    let localctx = new ExpressionOrDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, MySqlParser.RULE_expressionOrDefault);
	    try {
	        this.state = 6759;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1005,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6757;
	            this.expression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6758;
	            this.match(MySqlParser.DEFAULT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExists() {
	    let localctx = new IfExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, MySqlParser.RULE_ifExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6761;
	        this.match(MySqlParser.IF);
	        this.state = 6762;
	        this.match(MySqlParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNotExists() {
	    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, MySqlParser.RULE_ifNotExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6764;
	        this.match(MySqlParser.IF);
	        this.state = 6765;
	        this.match(MySqlParser.NOT);
	        this.state = 6766;
	        this.match(MySqlParser.EXISTS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orReplace() {
	    let localctx = new OrReplaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, MySqlParser.RULE_orReplace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6768;
	        this.match(MySqlParser.OR);
	        this.state = 6769;
	        this.match(MySqlParser.REPLACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	waitNowaitClause() {
	    let localctx = new WaitNowaitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, MySqlParser.RULE_waitNowaitClause);
	    try {
	        this.state = 6774;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 674:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6771;
	            this.match(MySqlParser.WAIT);
	            this.state = 6772;
	            this.decimalLiteral();
	            break;
	        case 527:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6773;
	            this.match(MySqlParser.NOWAIT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, MySqlParser.RULE_functionCall);
	    try {
	        this.state = 6794;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1009,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SpecificFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6776;
	            this.specificFunction();
	            break;

	        case 2:
	            localctx = new AggregateFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6777;
	            this.aggregateWindowedFunction();
	            break;

	        case 3:
	            localctx = new NonAggregateFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6778;
	            this.nonAggregateWindowedFunction();
	            break;

	        case 4:
	            localctx = new ScalarFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6779;
	            this.scalarFunctionName();
	            this.state = 6780;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6782;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1007,this._ctx);
	            if(la_===1) {
	                this.state = 6781;
	                this.functionArgs();

	            }
	            this.state = 6784;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 5:
	            localctx = new UdfFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6786;
	            this.fullId();
	            this.state = 6787;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6789;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1008,this._ctx);
	            if(la_===1) {
	                this.state = 6788;
	                this.functionArgs();

	            }
	            this.state = 6791;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 6:
	            localctx = new PasswordFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6793;
	            this.passwordFunctionClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	specificFunction() {
	    let localctx = new SpecificFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, MySqlParser.RULE_specificFunction);
	    var _la = 0;
	    try {
	        this.state = 6975;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1033,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6796;
	            _la = this._input.LA(1);
	            if(!(_la===150 || ((((_la - 313)) & ~0x1f) === 0 && ((1 << (_la - 313)) & 262159) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6799;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1010,this._ctx);
	            if(la_===1) {
	                this.state = 6797;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 6798;
	                this.match(MySqlParser.RR_BRACKET);

	            }
	            break;

	        case 2:
	            localctx = new CurrentUserContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6801;
	            this.currentUserExpression();
	            break;

	        case 3:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6802;
	            this.match(MySqlParser.CONVERT);
	            this.state = 6803;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6804;
	            this.expression(0);
	            this.state = 6805;
	            localctx.separator = this.match(MySqlParser.COMMA);
	            this.state = 6806;
	            this.convertedDataType();
	            this.state = 6807;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 4:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6809;
	            this.match(MySqlParser.CONVERT);
	            this.state = 6810;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6811;
	            this.expression(0);
	            this.state = 6812;
	            this.match(MySqlParser.USING);
	            this.state = 6813;
	            this.charsetName();
	            this.state = 6814;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 5:
	            localctx = new DataTypeFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6816;
	            this.match(MySqlParser.CAST);
	            this.state = 6817;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6818;
	            this.expression(0);
	            this.state = 6819;
	            this.match(MySqlParser.AS);
	            this.state = 6820;
	            this.convertedDataType();
	            this.state = 6821;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 6:
	            localctx = new ValuesFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6823;
	            this.match(MySqlParser.VALUES);
	            this.state = 6824;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6825;
	            this.fullColumnName();
	            this.state = 6826;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 7:
	            localctx = new CaseExpressionFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6828;
	            this.match(MySqlParser.CASE);
	            this.state = 6829;
	            this.expression(0);
	            this.state = 6831; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 6830;
	                this.caseFuncAlternative();
	                this.state = 6833; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===189);
	            this.state = 6837;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 6835;
	                this.match(MySqlParser.ELSE);
	                this.state = 6836;
	                localctx.elseArg = this.functionArg();
	            }

	            this.state = 6839;
	            this.match(MySqlParser.END);
	            break;

	        case 8:
	            localctx = new CaseFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6841;
	            this.match(MySqlParser.CASE);
	            this.state = 6843; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 6842;
	                this.caseFuncAlternative();
	                this.state = 6845; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===189);
	            this.state = 6849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 6847;
	                this.match(MySqlParser.ELSE);
	                this.state = 6848;
	                localctx.elseArg = this.functionArg();
	            }

	            this.state = 6851;
	            this.match(MySqlParser.END);
	            break;

	        case 9:
	            localctx = new CharFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6853;
	            this.match(MySqlParser.CHAR);
	            this.state = 6854;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6855;
	            this.functionArgs();
	            this.state = 6858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===187) {
	                this.state = 6856;
	                this.match(MySqlParser.USING);
	                this.state = 6857;
	                this.charsetName();
	            }

	            this.state = 6860;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 10:
	            localctx = new PositionFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6862;
	            this.match(MySqlParser.POSITION);
	            this.state = 6863;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6866;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1016,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6864;
	                localctx.positionString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6865;
	                localctx.positionExpression = this.expression(0);
	                break;

	            }
	            this.state = 6868;
	            this.match(MySqlParser.IN);
	            this.state = 6871;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1017,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6869;
	                localctx.inString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6870;
	                localctx.inExpression = this.expression(0);
	                break;

	            }
	            this.state = 6873;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 11:
	            localctx = new SubstrFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6875;
	            _la = this._input.LA(1);
	            if(!(_la===325 || _la===326)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6876;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6879;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1018,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6877;
	                localctx.sourceString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6878;
	                localctx.sourceExpression = this.expression(0);
	                break;

	            }
	            this.state = 6881;
	            this.match(MySqlParser.FROM);
	            this.state = 6884;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1019,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6882;
	                localctx.fromDecimal = this.decimalLiteral();
	                break;

	            case 2:
	                this.state = 6883;
	                localctx.fromExpression = this.expression(0);
	                break;

	            }
	            this.state = 6891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===65) {
	                this.state = 6886;
	                this.match(MySqlParser.FOR);
	                this.state = 6889;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1020,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 6887;
	                    localctx.forDecimal = this.decimalLiteral();
	                    break;

	                case 2:
	                    this.state = 6888;
	                    localctx.forExpression = this.expression(0);
	                    break;

	                }
	            }

	            this.state = 6893;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 12:
	            localctx = new TrimFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6895;
	            this.match(MySqlParser.TRIM);
	            this.state = 6896;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6897;
	            localctx.positioinForm = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===17 || _la===95 || _la===176)) {
	                localctx.positioinForm = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6900;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1022,this._ctx);
	            if(la_===1) {
	                this.state = 6898;
	                localctx.sourceString = this.stringLiteral();

	            } else if(la_===2) {
	                this.state = 6899;
	                localctx.sourceExpression = this.expression(0);

	            }
	            this.state = 6902;
	            this.match(MySqlParser.FROM);
	            this.state = 6905;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1023,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6903;
	                localctx.fromString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6904;
	                localctx.fromExpression = this.expression(0);
	                break;

	            }
	            this.state = 6907;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 13:
	            localctx = new TrimFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6909;
	            this.match(MySqlParser.TRIM);
	            this.state = 6910;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6913;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1024,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6911;
	                localctx.sourceString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6912;
	                localctx.sourceExpression = this.expression(0);
	                break;

	            }
	            this.state = 6915;
	            this.match(MySqlParser.FROM);
	            this.state = 6918;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1025,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6916;
	                localctx.fromString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6917;
	                localctx.fromExpression = this.expression(0);
	                break;

	            }
	            this.state = 6920;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 14:
	            localctx = new WeightFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6922;
	            this.match(MySqlParser.WEIGHT_STRING);
	            this.state = 6923;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6926;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1026,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6924;
	                this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6925;
	                this.expression(0);
	                break;

	            }
	            this.state = 6934;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 6928;
	                this.match(MySqlParser.AS);
	                this.state = 6929;
	                localctx.stringFormat = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===222 || _la===226)) {
	                    localctx.stringFormat = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 6930;
	                this.match(MySqlParser.LR_BRACKET);
	                this.state = 6931;
	                this.decimalLiteral();
	                this.state = 6932;
	                this.match(MySqlParser.RR_BRACKET);
	            }

	            this.state = 6937;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===472) {
	                this.state = 6936;
	                this.levelsInWeightString();
	            }

	            this.state = 6939;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 15:
	            localctx = new ExtractFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6941;
	            this.match(MySqlParser.EXTRACT);
	            this.state = 6942;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6943;
	            this.intervalType();
	            this.state = 6944;
	            this.match(MySqlParser.FROM);
	            this.state = 6947;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1029,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6945;
	                localctx.sourceString = this.stringLiteral();
	                break;

	            case 2:
	                this.state = 6946;
	                localctx.sourceExpression = this.expression(0);
	                break;

	            }
	            this.state = 6949;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 16:
	            localctx = new GetFormatFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6951;
	            this.match(MySqlParser.GET_FORMAT);
	            this.state = 6952;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6953;
	            localctx.datetimeFormat = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 11) !== 0))) {
	                localctx.datetimeFormat = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6954;
	            this.match(MySqlParser.COMMA);
	            this.state = 6955;
	            this.stringLiteral();
	            this.state = 6956;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 17:
	            localctx = new JsonValueFunctionCallContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6958;
	            this.match(MySqlParser.JSON_VALUE);
	            this.state = 6959;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 6960;
	            this.expression(0);
	            this.state = 6961;
	            this.match(MySqlParser.COMMA);
	            this.state = 6962;
	            this.expression(0);
	            this.state = 6965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===593) {
	                this.state = 6963;
	                this.match(MySqlParser.RETURNING);
	                this.state = 6964;
	                this.convertedDataType();
	            }

	            this.state = 6968;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1031,this._ctx);
	            if(la_===1) {
	                this.state = 6967;
	                this.jsonOnEmpty();

	            }
	            this.state = 6971;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===42 || _la===116 || _la===411) {
	                this.state = 6970;
	                this.jsonOnError();
	            }

	            this.state = 6973;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseFuncAlternative() {
	    let localctx = new CaseFuncAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, MySqlParser.RULE_caseFuncAlternative);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6977;
	        this.match(MySqlParser.WHEN);
	        this.state = 6978;
	        localctx.condition = this.functionArg();
	        this.state = 6979;
	        this.match(MySqlParser.THEN);
	        this.state = 6980;
	        localctx.consequent = this.functionArg();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelsInWeightString() {
	    let localctx = new LevelsInWeightStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, MySqlParser.RULE_levelsInWeightString);
	    var _la = 0;
	    try {
	        this.state = 6996;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1035,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new LevelWeightListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6982;
	            this.match(MySqlParser.LEVEL);
	            this.state = 6983;
	            this.levelInWeightListElement();
	            this.state = 6988;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 6984;
	                this.match(MySqlParser.COMMA);
	                this.state = 6985;
	                this.levelInWeightListElement();
	                this.state = 6990;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            localctx = new LevelWeightRangeContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6991;
	            this.match(MySqlParser.LEVEL);
	            this.state = 6992;
	            localctx.firstLevel = this.decimalLiteral();
	            this.state = 6993;
	            this.match(MySqlParser.MINUS);
	            this.state = 6994;
	            localctx.lastLevel = this.decimalLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	levelInWeightListElement() {
	    let localctx = new LevelInWeightListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, MySqlParser.RULE_levelInWeightListElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6998;
	        this.decimalLiteral();
	        this.state = 7000;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13 || _la===45 || _la===994) {
	            this.state = 6999;
	            localctx.orderType = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===13 || _la===45 || _la===994)) {
	                localctx.orderType = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateWindowedFunction() {
	    let localctx = new AggregateWindowedFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, MySqlParser.RULE_aggregateWindowedFunction);
	    var _la = 0;
	    try {
	        this.state = 7061;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 286:
	        case 298:
	        case 299:
	        case 309:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7002;
	            _la = this._input.LA(1);
	            if(!(((((_la - 286)) & ~0x1f) === 0 && ((1 << (_la - 286)) & 8400897) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7003;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7005;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1037,this._ctx);
	            if(la_===1) {
	                this.state = 7004;
	                localctx.aggregator = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===6 || _la===49)) {
	                    localctx.aggregator = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 7007;
	            this.functionArg();
	            this.state = 7008;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7010;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1038,this._ctx);
	            if(la_===1) {
	                this.state = 7009;
	                this.overClause();

	            }
	            break;
	        case 290:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7012;
	            this.match(MySqlParser.COUNT);
	            this.state = 7013;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7021;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1040,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7014;
	                localctx.starArg = this.match(MySqlParser.STAR);
	                break;

	            case 2:
	                this.state = 7016;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1039,this._ctx);
	                if(la_===1) {
	                    this.state = 7015;
	                    localctx.aggregator = this.match(MySqlParser.ALL);

	                }
	                this.state = 7018;
	                this.functionArg();
	                break;

	            case 3:
	                this.state = 7019;
	                localctx.aggregator = this.match(MySqlParser.DISTINCT);
	                this.state = 7020;
	                this.functionArgs();
	                break;

	            }
	            this.state = 7023;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7025;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1041,this._ctx);
	            if(la_===1) {
	                this.state = 7024;
	                this.overClause();

	            }
	            break;
	        case 287:
	        case 288:
	        case 289:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 310:
	        case 311:
	        case 312:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7027;
	            _la = this._input.LA(1);
	            if(!(((((_la - 287)) & ~0x1f) === 0 && ((1 << (_la - 287)) & 62652423) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7028;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7030;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1042,this._ctx);
	            if(la_===1) {
	                this.state = 7029;
	                localctx.aggregator = this.match(MySqlParser.ALL);

	            }
	            this.state = 7032;
	            this.functionArg();
	            this.state = 7033;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7035;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1043,this._ctx);
	            if(la_===1) {
	                this.state = 7034;
	                this.overClause();

	            }
	            break;
	        case 294:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7037;
	            this.match(MySqlParser.GROUP_CONCAT);
	            this.state = 7038;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7040;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1044,this._ctx);
	            if(la_===1) {
	                this.state = 7039;
	                localctx.aggregator = this.match(MySqlParser.DISTINCT);

	            }
	            this.state = 7042;
	            this.functionArgs();
	            this.state = 7053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===124) {
	                this.state = 7043;
	                this.match(MySqlParser.ORDER);
	                this.state = 7044;
	                this.match(MySqlParser.BY);
	                this.state = 7045;
	                this.orderByExpression();
	                this.state = 7050;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===1135) {
	                    this.state = 7046;
	                    this.match(MySqlParser.COMMA);
	                    this.state = 7047;
	                    this.orderByExpression();
	                    this.state = 7052;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 7057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===154) {
	                this.state = 7055;
	                this.match(MySqlParser.SEPARATOR);
	                this.state = 7056;
	                localctx.separator = this.match(MySqlParser.STRING_LITERAL);
	            }

	            this.state = 7059;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonAggregateWindowedFunction() {
	    let localctx = new NonAggregateWindowedFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, MySqlParser.RULE_nonAggregateWindowedFunction);
	    var _la = 0;
	    try {
	        this.state = 7101;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 295:
	        case 297:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7063;
	            _la = this._input.LA(1);
	            if(!(_la===295 || _la===297)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7064;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7065;
	            this.expression(0);
	            this.state = 7068;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1049,this._ctx);
	            if(la_===1) {
	                this.state = 7066;
	                this.match(MySqlParser.COMMA);
	                this.state = 7067;
	                this.decimalLiteral();

	            }
	            this.state = 7072;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1135) {
	                this.state = 7070;
	                this.match(MySqlParser.COMMA);
	                this.state = 7071;
	                this.decimalLiteral();
	            }

	            this.state = 7074;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7075;
	            this.overClause();
	            break;
	        case 293:
	        case 296:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7077;
	            _la = this._input.LA(1);
	            if(!(_la===293 || _la===296)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7078;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7079;
	            this.expression(0);
	            this.state = 7080;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7081;
	            this.overClause();
	            break;
	        case 291:
	        case 292:
	        case 302:
	        case 303:
	        case 304:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7083;
	            _la = this._input.LA(1);
	            if(!(((((_la - 291)) & ~0x1f) === 0 && ((1 << (_la - 291)) & 14339) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7084;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7085;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7086;
	            this.overClause();
	            break;
	        case 301:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7087;
	            this.match(MySqlParser.NTH_VALUE);
	            this.state = 7088;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7089;
	            this.expression(0);
	            this.state = 7090;
	            this.match(MySqlParser.COMMA);
	            this.state = 7091;
	            this.decimalLiteral();
	            this.state = 7092;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7093;
	            this.overClause();
	            break;
	        case 300:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7095;
	            this.match(MySqlParser.NTILE);
	            this.state = 7096;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7097;
	            this.decimalLiteral();
	            this.state = 7098;
	            this.match(MySqlParser.RR_BRACKET);
	            this.state = 7099;
	            this.overClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	overClause() {
	    let localctx = new OverClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, MySqlParser.RULE_overClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7103;
	        this.match(MySqlParser.OVER);
	        this.state = 7109;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1133:
	            this.state = 7104;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7105;
	            this.windowSpec();
	            this.state = 7106;
	            this.match(MySqlParser.RR_BRACKET);
	            break;
	        case 11:
	        case 14:
	        case 18:
	        case 29:
	        case 35:
	        case 37:
	        case 39:
	        case 42:
	        case 48:
	        case 55:
	        case 57:
	        case 59:
	        case 73:
	        case 77:
	        case 79:
	        case 85:
	        case 94:
	        case 97:
	        case 117:
	        case 121:
	        case 124:
	        case 130:
	        case 140:
	        case 141:
	        case 148:
	        case 150:
	        case 158:
	        case 168:
	        case 217:
	        case 218:
	        case 219:
	        case 220:
	        case 221:
	        case 226:
	        case 234:
	        case 237:
	        case 239:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 283:
	        case 284:
	        case 285:
	        case 286:
	        case 287:
	        case 288:
	        case 289:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 294:
	        case 295:
	        case 296:
	        case 297:
	        case 298:
	        case 299:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 305:
	        case 306:
	        case 307:
	        case 308:
	        case 309:
	        case 310:
	        case 311:
	        case 312:
	        case 313:
	        case 314:
	        case 315:
	        case 316:
	        case 317:
	        case 318:
	        case 319:
	        case 320:
	        case 322:
	        case 323:
	        case 324:
	        case 325:
	        case 326:
	        case 327:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 334:
	        case 335:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 340:
	        case 341:
	        case 342:
	        case 343:
	        case 344:
	        case 345:
	        case 346:
	        case 347:
	        case 348:
	        case 349:
	        case 350:
	        case 351:
	        case 352:
	        case 353:
	        case 354:
	        case 355:
	        case 356:
	        case 357:
	        case 358:
	        case 359:
	        case 360:
	        case 361:
	        case 362:
	        case 363:
	        case 364:
	        case 365:
	        case 366:
	        case 367:
	        case 368:
	        case 369:
	        case 370:
	        case 371:
	        case 372:
	        case 373:
	        case 374:
	        case 375:
	        case 376:
	        case 377:
	        case 378:
	        case 379:
	        case 380:
	        case 381:
	        case 382:
	        case 383:
	        case 384:
	        case 385:
	        case 387:
	        case 388:
	        case 389:
	        case 390:
	        case 391:
	        case 392:
	        case 393:
	        case 394:
	        case 395:
	        case 396:
	        case 397:
	        case 398:
	        case 399:
	        case 400:
	        case 401:
	        case 402:
	        case 403:
	        case 405:
	        case 407:
	        case 408:
	        case 409:
	        case 410:
	        case 411:
	        case 412:
	        case 413:
	        case 414:
	        case 415:
	        case 416:
	        case 417:
	        case 418:
	        case 419:
	        case 420:
	        case 421:
	        case 422:
	        case 423:
	        case 424:
	        case 425:
	        case 426:
	        case 427:
	        case 428:
	        case 429:
	        case 430:
	        case 431:
	        case 432:
	        case 434:
	        case 435:
	        case 436:
	        case 437:
	        case 438:
	        case 439:
	        case 440:
	        case 441:
	        case 442:
	        case 443:
	        case 444:
	        case 445:
	        case 446:
	        case 447:
	        case 448:
	        case 449:
	        case 450:
	        case 452:
	        case 453:
	        case 454:
	        case 455:
	        case 456:
	        case 457:
	        case 458:
	        case 459:
	        case 460:
	        case 461:
	        case 462:
	        case 463:
	        case 464:
	        case 465:
	        case 466:
	        case 467:
	        case 468:
	        case 469:
	        case 470:
	        case 471:
	        case 472:
	        case 473:
	        case 474:
	        case 475:
	        case 476:
	        case 477:
	        case 478:
	        case 479:
	        case 480:
	        case 481:
	        case 482:
	        case 483:
	        case 484:
	        case 485:
	        case 486:
	        case 487:
	        case 488:
	        case 489:
	        case 490:
	        case 491:
	        case 492:
	        case 493:
	        case 494:
	        case 495:
	        case 496:
	        case 497:
	        case 498:
	        case 499:
	        case 500:
	        case 501:
	        case 502:
	        case 503:
	        case 504:
	        case 505:
	        case 506:
	        case 507:
	        case 508:
	        case 509:
	        case 510:
	        case 511:
	        case 512:
	        case 513:
	        case 514:
	        case 515:
	        case 516:
	        case 517:
	        case 518:
	        case 519:
	        case 520:
	        case 521:
	        case 523:
	        case 527:
	        case 528:
	        case 529:
	        case 530:
	        case 531:
	        case 532:
	        case 533:
	        case 534:
	        case 535:
	        case 536:
	        case 537:
	        case 538:
	        case 539:
	        case 540:
	        case 541:
	        case 542:
	        case 543:
	        case 544:
	        case 547:
	        case 548:
	        case 549:
	        case 550:
	        case 551:
	        case 552:
	        case 553:
	        case 554:
	        case 555:
	        case 556:
	        case 557:
	        case 558:
	        case 560:
	        case 561:
	        case 562:
	        case 563:
	        case 564:
	        case 565:
	        case 566:
	        case 567:
	        case 568:
	        case 569:
	        case 570:
	        case 571:
	        case 572:
	        case 573:
	        case 574:
	        case 575:
	        case 576:
	        case 577:
	        case 578:
	        case 579:
	        case 580:
	        case 581:
	        case 582:
	        case 583:
	        case 584:
	        case 585:
	        case 586:
	        case 587:
	        case 588:
	        case 589:
	        case 591:
	        case 592:
	        case 594:
	        case 595:
	        case 596:
	        case 597:
	        case 598:
	        case 599:
	        case 600:
	        case 601:
	        case 602:
	        case 603:
	        case 604:
	        case 605:
	        case 606:
	        case 608:
	        case 609:
	        case 610:
	        case 611:
	        case 612:
	        case 613:
	        case 614:
	        case 615:
	        case 616:
	        case 617:
	        case 618:
	        case 619:
	        case 620:
	        case 621:
	        case 622:
	        case 623:
	        case 624:
	        case 625:
	        case 626:
	        case 627:
	        case 628:
	        case 629:
	        case 630:
	        case 631:
	        case 632:
	        case 633:
	        case 634:
	        case 635:
	        case 636:
	        case 638:
	        case 639:
	        case 640:
	        case 641:
	        case 642:
	        case 643:
	        case 644:
	        case 645:
	        case 646:
	        case 647:
	        case 648:
	        case 649:
	        case 650:
	        case 651:
	        case 652:
	        case 653:
	        case 654:
	        case 655:
	        case 656:
	        case 657:
	        case 658:
	        case 659:
	        case 660:
	        case 661:
	        case 662:
	        case 663:
	        case 664:
	        case 665:
	        case 666:
	        case 667:
	        case 668:
	        case 669:
	        case 670:
	        case 671:
	        case 672:
	        case 673:
	        case 674:
	        case 675:
	        case 677:
	        case 678:
	        case 679:
	        case 680:
	        case 681:
	        case 682:
	        case 684:
	        case 685:
	        case 686:
	        case 687:
	        case 688:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 697:
	        case 699:
	        case 700:
	        case 701:
	        case 702:
	        case 703:
	        case 704:
	        case 705:
	        case 706:
	        case 707:
	        case 708:
	        case 709:
	        case 710:
	        case 711:
	        case 712:
	        case 717:
	        case 718:
	        case 720:
	        case 721:
	        case 722:
	        case 723:
	        case 724:
	        case 725:
	        case 726:
	        case 727:
	        case 728:
	        case 729:
	        case 730:
	        case 731:
	        case 732:
	        case 733:
	        case 734:
	        case 736:
	        case 737:
	        case 738:
	        case 739:
	        case 740:
	        case 741:
	        case 742:
	        case 743:
	        case 744:
	        case 745:
	        case 746:
	        case 747:
	        case 748:
	        case 749:
	        case 750:
	        case 751:
	        case 752:
	        case 753:
	        case 754:
	        case 755:
	        case 756:
	        case 757:
	        case 758:
	        case 759:
	        case 760:
	        case 761:
	        case 762:
	        case 763:
	        case 764:
	        case 765:
	        case 766:
	        case 767:
	        case 768:
	        case 769:
	        case 770:
	        case 771:
	        case 772:
	        case 773:
	        case 774:
	        case 775:
	        case 776:
	        case 777:
	        case 778:
	        case 779:
	        case 780:
	        case 781:
	        case 782:
	        case 783:
	        case 784:
	        case 785:
	        case 786:
	        case 787:
	        case 788:
	        case 789:
	        case 790:
	        case 791:
	        case 792:
	        case 793:
	        case 794:
	        case 795:
	        case 796:
	        case 797:
	        case 798:
	        case 799:
	        case 800:
	        case 801:
	        case 802:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 836:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 875:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1000:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1005:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1088:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	        case 1145:
	        case 1148:
	        case 1156:
	            this.state = 7108;
	            this.windowName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowSpec() {
	    let localctx = new WindowSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, MySqlParser.RULE_windowSpec);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7112;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1053,this._ctx);
	        if(la_===1) {
	            this.state = 7111;
	            this.windowName();

	        }
	        this.state = 7115;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===129) {
	            this.state = 7114;
	            this.partitionClause();
	        }

	        this.state = 7118;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===124) {
	            this.state = 7117;
	            this.orderByClause();
	        }

	        this.state = 7121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133 || _la===601) {
	            this.state = 7120;
	            this.frameClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowName() {
	    let localctx = new WindowNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, MySqlParser.RULE_windowName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7123;
	        this.uid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameClause() {
	    let localctx = new FrameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, MySqlParser.RULE_frameClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7125;
	        this.frameUnits();
	        this.state = 7126;
	        this.frameExtent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameUnits() {
	    let localctx = new FrameUnitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, MySqlParser.RULE_frameUnits);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7128;
	        _la = this._input.LA(1);
	        if(!(_la===133 || _la===601)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameExtent() {
	    let localctx = new FrameExtentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, MySqlParser.RULE_frameExtent);
	    try {
	        this.state = 7132;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1057,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7130;
	            this.frameRange();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7131;
	            this.frameBetween();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameBetween() {
	    let localctx = new FrameBetweenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, MySqlParser.RULE_frameBetween);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7134;
	        this.match(MySqlParser.BETWEEN);
	        this.state = 7135;
	        this.frameRange();
	        this.state = 7136;
	        this.match(MySqlParser.AND);
	        this.state = 7137;
	        this.frameRange();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	frameRange() {
	    let localctx = new FrameRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, MySqlParser.RULE_frameRange);
	    var _la = 0;
	    try {
	        this.state = 7146;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1058,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7139;
	            this.match(MySqlParser.CURRENT);
	            this.state = 7140;
	            this.match(MySqlParser.ROW);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7141;
	            this.match(MySqlParser.UNBOUNDED);
	            this.state = 7142;
	            _la = this._input.LA(1);
	            if(!(_la===433 || _la===559)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7143;
	            this.expression(0);
	            this.state = 7144;
	            _la = this._input.LA(1);
	            if(!(_la===433 || _la===559)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionClause() {
	    let localctx = new PartitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, MySqlParser.RULE_partitionClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7148;
	        this.match(MySqlParser.PARTITION);
	        this.state = 7149;
	        this.match(MySqlParser.BY);
	        this.state = 7150;
	        this.expression(0);
	        this.state = 7155;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 7151;
	            this.match(MySqlParser.COMMA);
	            this.state = 7152;
	            this.expression(0);
	            this.state = 7157;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalarFunctionName() {
	    let localctx = new ScalarFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, MySqlParser.RULE_scalarFunctionName);
	    try {
	        this.state = 7182;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 39:
	        case 97:
	        case 148:
	        case 150:
	        case 217:
	        case 218:
	        case 219:
	        case 221:
	        case 251:
	        case 252:
	        case 253:
	        case 254:
	        case 255:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 264:
	        case 265:
	        case 266:
	        case 267:
	        case 268:
	        case 269:
	        case 270:
	        case 271:
	        case 272:
	        case 273:
	        case 274:
	        case 275:
	        case 276:
	        case 277:
	        case 278:
	        case 279:
	        case 280:
	        case 281:
	        case 282:
	        case 290:
	        case 291:
	        case 292:
	        case 293:
	        case 295:
	        case 296:
	        case 297:
	        case 300:
	        case 301:
	        case 302:
	        case 303:
	        case 304:
	        case 324:
	        case 459:
	        case 673:
	        case 689:
	        case 690:
	        case 691:
	        case 692:
	        case 693:
	        case 694:
	        case 695:
	        case 696:
	        case 736:
	        case 803:
	        case 806:
	        case 807:
	        case 808:
	        case 809:
	        case 810:
	        case 811:
	        case 812:
	        case 813:
	        case 814:
	        case 815:
	        case 816:
	        case 817:
	        case 818:
	        case 819:
	        case 820:
	        case 821:
	        case 822:
	        case 823:
	        case 824:
	        case 825:
	        case 826:
	        case 827:
	        case 828:
	        case 829:
	        case 830:
	        case 831:
	        case 832:
	        case 833:
	        case 834:
	        case 835:
	        case 837:
	        case 838:
	        case 839:
	        case 840:
	        case 841:
	        case 842:
	        case 843:
	        case 844:
	        case 845:
	        case 846:
	        case 847:
	        case 848:
	        case 849:
	        case 850:
	        case 851:
	        case 852:
	        case 853:
	        case 854:
	        case 855:
	        case 856:
	        case 857:
	        case 858:
	        case 859:
	        case 860:
	        case 861:
	        case 862:
	        case 863:
	        case 864:
	        case 865:
	        case 866:
	        case 867:
	        case 868:
	        case 869:
	        case 870:
	        case 871:
	        case 872:
	        case 873:
	        case 874:
	        case 876:
	        case 877:
	        case 878:
	        case 879:
	        case 880:
	        case 881:
	        case 882:
	        case 883:
	        case 884:
	        case 885:
	        case 886:
	        case 887:
	        case 888:
	        case 889:
	        case 890:
	        case 891:
	        case 892:
	        case 893:
	        case 894:
	        case 895:
	        case 896:
	        case 897:
	        case 898:
	        case 899:
	        case 900:
	        case 901:
	        case 902:
	        case 903:
	        case 904:
	        case 905:
	        case 906:
	        case 907:
	        case 908:
	        case 909:
	        case 910:
	        case 911:
	        case 912:
	        case 913:
	        case 914:
	        case 915:
	        case 916:
	        case 917:
	        case 918:
	        case 919:
	        case 920:
	        case 921:
	        case 922:
	        case 923:
	        case 924:
	        case 925:
	        case 926:
	        case 927:
	        case 928:
	        case 929:
	        case 930:
	        case 931:
	        case 932:
	        case 933:
	        case 934:
	        case 935:
	        case 936:
	        case 937:
	        case 938:
	        case 939:
	        case 940:
	        case 941:
	        case 942:
	        case 943:
	        case 944:
	        case 945:
	        case 946:
	        case 947:
	        case 948:
	        case 949:
	        case 950:
	        case 951:
	        case 952:
	        case 953:
	        case 954:
	        case 955:
	        case 956:
	        case 957:
	        case 958:
	        case 959:
	        case 960:
	        case 961:
	        case 962:
	        case 963:
	        case 964:
	        case 965:
	        case 966:
	        case 967:
	        case 968:
	        case 969:
	        case 970:
	        case 971:
	        case 972:
	        case 973:
	        case 974:
	        case 975:
	        case 976:
	        case 977:
	        case 978:
	        case 979:
	        case 980:
	        case 981:
	        case 982:
	        case 983:
	        case 984:
	        case 985:
	        case 986:
	        case 987:
	        case 988:
	        case 989:
	        case 990:
	        case 991:
	        case 992:
	        case 993:
	        case 994:
	        case 995:
	        case 996:
	        case 997:
	        case 998:
	        case 999:
	        case 1001:
	        case 1002:
	        case 1003:
	        case 1004:
	        case 1006:
	        case 1007:
	        case 1008:
	        case 1009:
	        case 1010:
	        case 1011:
	        case 1012:
	        case 1013:
	        case 1014:
	        case 1015:
	        case 1016:
	        case 1017:
	        case 1018:
	        case 1019:
	        case 1020:
	        case 1021:
	        case 1022:
	        case 1023:
	        case 1024:
	        case 1025:
	        case 1026:
	        case 1027:
	        case 1028:
	        case 1029:
	        case 1030:
	        case 1031:
	        case 1032:
	        case 1033:
	        case 1034:
	        case 1035:
	        case 1036:
	        case 1037:
	        case 1038:
	        case 1039:
	        case 1040:
	        case 1041:
	        case 1042:
	        case 1043:
	        case 1044:
	        case 1045:
	        case 1046:
	        case 1047:
	        case 1048:
	        case 1049:
	        case 1050:
	        case 1051:
	        case 1052:
	        case 1053:
	        case 1054:
	        case 1055:
	        case 1056:
	        case 1057:
	        case 1058:
	        case 1059:
	        case 1060:
	        case 1061:
	        case 1062:
	        case 1063:
	        case 1064:
	        case 1065:
	        case 1066:
	        case 1067:
	        case 1068:
	        case 1069:
	        case 1070:
	        case 1071:
	        case 1072:
	        case 1073:
	        case 1074:
	        case 1075:
	        case 1076:
	        case 1077:
	        case 1078:
	        case 1079:
	        case 1080:
	        case 1081:
	        case 1082:
	        case 1083:
	        case 1084:
	        case 1085:
	        case 1086:
	        case 1087:
	        case 1089:
	        case 1090:
	        case 1091:
	        case 1092:
	        case 1093:
	        case 1094:
	        case 1095:
	        case 1096:
	        case 1097:
	        case 1098:
	        case 1099:
	        case 1100:
	        case 1101:
	        case 1102:
	        case 1103:
	        case 1104:
	        case 1105:
	        case 1106:
	        case 1107:
	        case 1123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7158;
	            this.functionNameBase();
	            break;
	        case 747:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7159;
	            this.match(MySqlParser.ASCII);
	            break;
	        case 317:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7160;
	            this.match(MySqlParser.CURDATE);
	            break;
	        case 313:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7161;
	            this.match(MySqlParser.CURRENT_DATE);
	            break;
	        case 314:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7162;
	            this.match(MySqlParser.CURRENT_TIME);
	            break;
	        case 315:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7163;
	            this.match(MySqlParser.CURRENT_TIMESTAMP);
	            break;
	        case 318:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7164;
	            this.match(MySqlParser.CURTIME);
	            break;
	        case 319:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7165;
	            this.match(MySqlParser.DATE_ADD);
	            break;
	        case 320:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7166;
	            this.match(MySqlParser.DATE_SUB);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7167;
	            this.match(MySqlParser.IF);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7168;
	            this.match(MySqlParser.INSERT);
	            break;
	        case 316:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7169;
	            this.match(MySqlParser.LOCALTIME);
	            break;
	        case 322:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7170;
	            this.match(MySqlParser.LOCALTIMESTAMP);
	            break;
	        case 508:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7171;
	            this.match(MySqlParser.MID);
	            break;
	        case 323:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7172;
	            this.match(MySqlParser.NOW);
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 7173;
	            this.match(MySqlParser.REPEAT);
	            break;
	        case 141:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 7174;
	            this.match(MySqlParser.REPLACE);
	            break;
	        case 325:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 7175;
	            this.match(MySqlParser.SUBSTR);
	            break;
	        case 326:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 7176;
	            this.match(MySqlParser.SUBSTRING);
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 7177;
	            this.match(MySqlParser.SYSDATE);
	            break;
	        case 328:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 7178;
	            this.match(MySqlParser.TRIM);
	            break;
	        case 329:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 7179;
	            this.match(MySqlParser.UTC_DATE);
	            break;
	        case 330:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 7180;
	            this.match(MySqlParser.UTC_TIME);
	            break;
	        case 331:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 7181;
	            this.match(MySqlParser.UTC_TIMESTAMP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	passwordFunctionClause() {
	    let localctx = new PasswordFunctionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, MySqlParser.RULE_passwordFunctionClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7184;
	        localctx.functionName = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===535 || _la===551)) {
	            localctx.functionName = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7185;
	        this.match(MySqlParser.LR_BRACKET);
	        this.state = 7186;
	        this.functionArg();
	        this.state = 7187;
	        this.match(MySqlParser.RR_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArgs() {
	    let localctx = new FunctionArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, MySqlParser.RULE_functionArgs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7193;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1061,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7189;
	            this.constant();
	            break;

	        case 2:
	            this.state = 7190;
	            this.fullColumnName();
	            break;

	        case 3:
	            this.state = 7191;
	            this.functionCall();
	            break;

	        case 4:
	            this.state = 7192;
	            this.expression(0);
	            break;

	        }
	        this.state = 7204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1135) {
	            this.state = 7195;
	            this.match(MySqlParser.COMMA);
	            this.state = 7200;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1062,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7196;
	                this.constant();
	                break;

	            case 2:
	                this.state = 7197;
	                this.fullColumnName();
	                break;

	            case 3:
	                this.state = 7198;
	                this.functionCall();
	                break;

	            case 4:
	                this.state = 7199;
	                this.expression(0);
	                break;

	            }
	            this.state = 7206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionArg() {
	    let localctx = new FunctionArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, MySqlParser.RULE_functionArg);
	    try {
	        this.state = 7211;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1064,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7207;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7208;
	            this.fullColumnName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7209;
	            this.functionCall();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7210;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 688;
	    this.enterRecursionRule(localctx, 688, MySqlParser.RULE_expression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7224;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1066,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 7214;
	            localctx.notOperator = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===114 || _la===1127)) {
	                localctx.notOperator = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7215;
	            this.expression(4);
	            break;

	        case 2:
	            localctx = new IsExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7216;
	            this.predicate(0);
	            this.state = 7217;
	            this.match(MySqlParser.IS);
	            this.state = 7219;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===114) {
	                this.state = 7218;
	                this.match(MySqlParser.NOT);
	            }

	            this.state = 7221;
	            localctx.testValue = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===63 || _la===178 || _la===662)) {
	                localctx.testValue = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            localctx = new PredicateExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7223;
	            this.predicate(0);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 7232;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1067,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new LogicalExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expression);
	                this.state = 7226;
	                if (!( this.precpred(this._ctx, 3))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                }
	                this.state = 7227;
	                this.logicalOperator();
	                this.state = 7228;
	                this.expression(4); 
	            }
	            this.state = 7234;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1067,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	predicate(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PredicateContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 690;
	    this.enterRecursionRule(localctx, 690, MySqlParser.RULE_predicate, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new ExpressionAtomPredicateContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 7236;
	        this.expressionAtom(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 7302;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1075,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 7300;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1074,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BinaryComparisonPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7238;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 7239;
	                    this.comparisonOperator();
	                    this.state = 7240;
	                    localctx.right = this.predicate(9);
	                    break;

	                case 2:
	                    localctx = new BetweenPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7242;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 7244;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===114) {
	                        this.state = 7243;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 7246;
	                    this.match(MySqlParser.BETWEEN);
	                    this.state = 7247;
	                    this.predicate(0);
	                    this.state = 7248;
	                    this.match(MySqlParser.AND);
	                    this.state = 7249;
	                    this.predicate(7);
	                    break;

	                case 3:
	                    localctx = new SoundsLikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7251;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 7252;
	                    this.match(MySqlParser.SOUNDS);
	                    this.state = 7253;
	                    this.match(MySqlParser.LIKE);
	                    this.state = 7254;
	                    this.predicate(6);
	                    break;

	                case 4:
	                    localctx = new RegexpPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7255;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 7257;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===114) {
	                        this.state = 7256;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 7259;
	                    localctx.regex = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===137 || _la===149)) {
	                        localctx.regex = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 7260;
	                    this.predicate(4);
	                    break;

	                case 5:
	                    localctx = new InPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7261;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 7263;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===114) {
	                        this.state = 7262;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 7265;
	                    this.match(MySqlParser.IN);
	                    this.state = 7266;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 7269;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1071,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 7267;
	                        this.selectStatement();
	                        break;

	                    case 2:
	                        this.state = 7268;
	                        this.expressions();
	                        break;

	                    }
	                    this.state = 7271;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;

	                case 6:
	                    localctx = new IsNullPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7273;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 7274;
	                    this.match(MySqlParser.IS);
	                    this.state = 7275;
	                    this.nullNotnull();
	                    break;

	                case 7:
	                    localctx = new SubqueryComparisonPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7276;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 7277;
	                    this.comparisonOperator();
	                    this.state = 7278;
	                    localctx.quantifier = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===6 || _la===337 || _la===618)) {
	                        localctx.quantifier = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 7279;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 7280;
	                    this.selectStatement();
	                    this.state = 7281;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;

	                case 8:
	                    localctx = new LikePredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7283;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 7285;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===114) {
	                        this.state = 7284;
	                        this.match(MySqlParser.NOT);
	                    }

	                    this.state = 7287;
	                    this.match(MySqlParser.LIKE);
	                    this.state = 7288;
	                    this.predicate(0);
	                    this.state = 7291;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1073,this._ctx);
	                    if(la_===1) {
	                        this.state = 7289;
	                        this.match(MySqlParser.ESCAPE);
	                        this.state = 7290;
	                        this.match(MySqlParser.STRING_LITERAL);

	                    }
	                    break;

	                case 9:
	                    localctx = new JsonMemberOfPredicateContext(this, new PredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_predicate);
	                    this.state = 7293;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 7294;
	                    this.match(MySqlParser.MEMBER);
	                    this.state = 7295;
	                    this.match(MySqlParser.OF);
	                    this.state = 7296;
	                    this.match(MySqlParser.LR_BRACKET);
	                    this.state = 7297;
	                    this.predicate(0);
	                    this.state = 7298;
	                    this.match(MySqlParser.RR_BRACKET);
	                    break;

	                } 
	            }
	            this.state = 7304;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1075,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expressionAtom(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionAtomContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 692;
	    this.enterRecursionRule(localctx, 692, MySqlParser.RULE_expressionAtom, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7353;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1078,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConstantExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 7306;
	            this.constant();
	            break;

	        case 2:
	            localctx = new FullColumnNameExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7307;
	            this.fullColumnName();
	            break;

	        case 3:
	            localctx = new FunctionCallExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7308;
	            this.functionCall();
	            break;

	        case 4:
	            localctx = new MysqlVariableExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7309;
	            this.mysqlVariable();
	            break;

	        case 5:
	            localctx = new UnaryExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7310;
	            this.unaryOperator();
	            this.state = 7311;
	            this.expressionAtom(12);
	            break;

	        case 6:
	            localctx = new BinaryExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7313;
	            this.match(MySqlParser.BINARY);
	            this.state = 7314;
	            this.expressionAtom(11);
	            break;

	        case 7:
	            localctx = new VariableAssignExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7315;
	            this.match(MySqlParser.LOCAL_ID);
	            this.state = 7316;
	            this.match(MySqlParser.VAR_ASSIGN);
	            this.state = 7317;
	            this.expressionAtom(10);
	            break;

	        case 8:
	            localctx = new NestedExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7318;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7319;
	            this.expression(0);
	            this.state = 7324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===1135) {
	                this.state = 7320;
	                this.match(MySqlParser.COMMA);
	                this.state = 7321;
	                this.expression(0);
	                this.state = 7326;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 7327;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 9:
	            localctx = new NestedRowExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7329;
	            this.match(MySqlParser.ROW);
	            this.state = 7330;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7331;
	            this.expression(0);
	            this.state = 7334; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 7332;
	                this.match(MySqlParser.COMMA);
	                this.state = 7333;
	                this.expression(0);
	                this.state = 7336; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===1135);
	            this.state = 7338;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 10:
	            localctx = new ExistsExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7340;
	            this.match(MySqlParser.EXISTS);
	            this.state = 7341;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7342;
	            this.selectStatement();
	            this.state = 7343;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 11:
	            localctx = new SubqueryExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7345;
	            this.match(MySqlParser.LR_BRACKET);
	            this.state = 7346;
	            this.selectStatement();
	            this.state = 7347;
	            this.match(MySqlParser.RR_BRACKET);
	            break;

	        case 12:
	            localctx = new IntervalExpressionAtomContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 7349;
	            this.match(MySqlParser.INTERVAL);
	            this.state = 7350;
	            this.expression(0);
	            this.state = 7351;
	            this.intervalType();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 7376;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1080,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 7374;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1079,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BitExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 7355;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 7356;
	                    this.bitOperator();
	                    this.state = 7357;
	                    localctx.right = this.expressionAtom(5);
	                    break;

	                case 2:
	                    localctx = new MathExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 7359;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 7360;
	                    this.multOperator();
	                    this.state = 7361;
	                    localctx.right = this.expressionAtom(4);
	                    break;

	                case 3:
	                    localctx = new MathExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 7363;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 7364;
	                    this.addOperator();
	                    this.state = 7365;
	                    localctx.right = this.expressionAtom(3);
	                    break;

	                case 4:
	                    localctx = new JsonExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 7367;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 7368;
	                    this.jsonOperator();
	                    this.state = 7369;
	                    localctx.right = this.expressionAtom(2);
	                    break;

	                case 5:
	                    localctx = new CollateExpressionAtomContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySqlParser.RULE_expressionAtom);
	                    this.state = 7371;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 7372;
	                    this.match(MySqlParser.COLLATE);
	                    this.state = 7373;
	                    this.collationName();
	                    break;

	                } 
	            }
	            this.state = 7378;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1080,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, MySqlParser.RULE_unaryOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7379;
	        _la = this._input.LA(1);
	        if(!(_la===114 || ((((_la - 1120)) & ~0x1f) === 0 && ((1 << (_la - 1120)) & 387) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonOperator() {
	    let localctx = new ComparisonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, MySqlParser.RULE_comparisonOperator);
	    try {
	        this.state = 7395;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1081,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7381;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7382;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7383;
	            this.match(MySqlParser.LESS_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7384;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 7385;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7386;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            this.state = 7387;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7388;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 7389;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7390;
	            this.match(MySqlParser.EXCLAMATION_SYMBOL);
	            this.state = 7391;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7392;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 7393;
	            this.match(MySqlParser.EQUAL_SYMBOL);
	            this.state = 7394;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOperator() {
	    let localctx = new LogicalOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, MySqlParser.RULE_logicalOperator);
	    try {
	        this.state = 7404;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7397;
	            this.match(MySqlParser.AND);
	            break;
	        case 1130:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7398;
	            this.match(MySqlParser.BIT_AND_OP);
	            this.state = 7399;
	            this.match(MySqlParser.BIT_AND_OP);
	            break;
	        case 194:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7400;
	            this.match(MySqlParser.XOR);
	            break;
	        case 123:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7401;
	            this.match(MySqlParser.OR);
	            break;
	        case 1129:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7402;
	            this.match(MySqlParser.BIT_OR_OP);
	            this.state = 7403;
	            this.match(MySqlParser.BIT_OR_OP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitOperator() {
	    let localctx = new BitOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, MySqlParser.RULE_bitOperator);
	    try {
	        this.state = 7413;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1126:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7406;
	            this.match(MySqlParser.LESS_SYMBOL);
	            this.state = 7407;
	            this.match(MySqlParser.LESS_SYMBOL);
	            break;
	        case 1125:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7408;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            this.state = 7409;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;
	        case 1130:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7410;
	            this.match(MySqlParser.BIT_AND_OP);
	            break;
	        case 1131:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7411;
	            this.match(MySqlParser.BIT_XOR_OP);
	            break;
	        case 1129:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7412;
	            this.match(MySqlParser.BIT_OR_OP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multOperator() {
	    let localctx = new MultOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, MySqlParser.RULE_multOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7415;
	        _la = this._input.LA(1);
	        if(!(((((_la - 1117)) & ~0x1f) === 0 && ((1 << (_la - 1117)) & 103) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addOperator() {
	    let localctx = new AddOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, MySqlParser.RULE_addOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7417;
	        _la = this._input.LA(1);
	        if(!(_la===1120 || _la===1121)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonOperator() {
	    let localctx = new JsonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, MySqlParser.RULE_jsonOperator);
	    try {
	        this.state = 7424;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1084,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7419;
	            this.match(MySqlParser.MINUS);
	            this.state = 7420;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7421;
	            this.match(MySqlParser.MINUS);
	            this.state = 7422;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            this.state = 7423;
	            this.match(MySqlParser.GREATER_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetNameBase() {
	    let localctx = new CharsetNameBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, MySqlParser.RULE_charsetNameBase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7426;
	        _la = this._input.LA(1);
	        if(!(_la===226 || ((((_la - 746)) & ~0x1f) === 0 && ((1 << (_la - 746)) & 4294967295) !== 0) || ((((_la - 778)) & ~0x1f) === 0 && ((1 << (_la - 778)) & 511) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionLevelBase() {
	    let localctx = new TransactionLevelBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, MySqlParser.RULE_transactionLevelBase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7428;
	        _la = this._input.LA(1);
	        if(!(((((_la - 799)) & ~0x1f) === 0 && ((1 << (_la - 799)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegesBase() {
	    let localctx = new PrivilegesBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, MySqlParser.RULE_privilegesBase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7430;
	        _la = this._input.LA(1);
	        if(!(((((_la - 708)) & ~0x1f) === 0 && ((1 << (_la - 708)) & 2181955587) !== 0) || _la===740 || _la===742)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalTypeBase() {
	    let localctx = new IntervalTypeBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, MySqlParser.RULE_intervalTypeBase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7432;
	        _la = this._input.LA(1);
	        if(!(((((_la - 689)) & ~0x1f) === 0 && ((1 << (_la - 689)) & 255) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataTypeBase() {
	    let localctx = new DataTypeBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, MySqlParser.RULE_dataTypeBase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7434;
	        _la = this._input.LA(1);
	        if(!(((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 1179679) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keywordsCanBeId() {
	    let localctx = new KeywordsCanBeIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, MySqlParser.RULE_keywordsCanBeId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7436;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 537151488) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 22028421) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 2097217) !== 0) || ((((_la - 117)) & ~0x1f) === 0 && ((1 << (_la - 117)) & 8337) !== 0) || _la===158 || _la===168 || _la===239 || ((((_la - 283)) & ~0x1f) === 0 && ((1 << (_la - 283)) & 1069648127) !== 0) || ((((_la - 332)) & ~0x1f) === 0 && ((1 << (_la - 332)) & 4294967295) !== 0) || ((((_la - 364)) & ~0x1f) === 0 && ((1 << (_la - 364)) & 4290772991) !== 0) || ((((_la - 396)) & ~0x1f) === 0 && ((1 << (_la - 396)) & 4294966015) !== 0) || ((((_la - 428)) & ~0x1f) === 0 && ((1 << (_la - 428)) & 2139095007) !== 0) || ((((_la - 460)) & ~0x1f) === 0 && ((1 << (_la - 460)) & 4294967295) !== 0) || ((((_la - 492)) & ~0x1f) === 0 && ((1 << (_la - 492)) & 3221225471) !== 0) || ((((_la - 527)) & ~0x1f) === 0 && ((1 << (_la - 527)) & 4294180863) !== 0) || ((((_la - 560)) & ~0x1f) === 0 && ((1 << (_la - 560)) & 3221225471) !== 0) || ((((_la - 592)) & ~0x1f) === 0 && ((1 << (_la - 592)) & 4294934525) !== 0) || ((((_la - 624)) & ~0x1f) === 0 && ((1 << (_la - 624)) & 4294959103) !== 0) || ((((_la - 656)) & ~0x1f) === 0 && ((1 << (_la - 656)) & 4159569919) !== 0) || ((((_la - 688)) & ~0x1f) === 0 && ((1 << (_la - 688)) & 1641019905) !== 0) || ((((_la - 720)) & ~0x1f) === 0 && ((1 << (_la - 720)) & 61300511) !== 0) || _la===792 || _la===836 || _la===875 || _la===1000 || _la===1005 || _la===1088)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionNameBase() {
	    let localctx = new FunctionNameBaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, MySqlParser.RULE_functionNameBase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7438;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===97 || _la===148 || _la===150 || ((((_la - 217)) & ~0x1f) === 0 && ((1 << (_la - 217)) & 23) !== 0) || ((((_la - 251)) & ~0x1f) === 0 && ((1 << (_la - 251)) & 4294967295) !== 0) || ((((_la - 290)) & ~0x1f) === 0 && ((1 << (_la - 290)) & 31983) !== 0) || _la===324 || _la===459 || ((((_la - 673)) & ~0x1f) === 0 && ((1 << (_la - 673)) & 16711681) !== 0) || _la===736 || ((((_la - 803)) & ~0x1f) === 0 && ((1 << (_la - 803)) & 4294967289) !== 0) || ((((_la - 835)) & ~0x1f) === 0 && ((1 << (_la - 835)) & 4294967293) !== 0) || ((((_la - 867)) & ~0x1f) === 0 && ((1 << (_la - 867)) & 4294967039) !== 0) || ((((_la - 899)) & ~0x1f) === 0 && ((1 << (_la - 899)) & 4294967295) !== 0) || ((((_la - 931)) & ~0x1f) === 0 && ((1 << (_la - 931)) & 4294967295) !== 0) || ((((_la - 963)) & ~0x1f) === 0 && ((1 << (_la - 963)) & 4294967295) !== 0) || ((((_la - 995)) & ~0x1f) === 0 && ((1 << (_la - 995)) & 4294966239) !== 0) || ((((_la - 1027)) & ~0x1f) === 0 && ((1 << (_la - 1027)) & 4294967295) !== 0) || ((((_la - 1059)) & ~0x1f) === 0 && ((1 << (_la - 1059)) & 3758096383) !== 0) || ((((_la - 1091)) & ~0x1f) === 0 && ((1 << (_la - 1091)) & 131071) !== 0) || _la===1123)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

MySqlParser.EOF = antlr4.Token.EOF;
MySqlParser.SPACE = 1;
MySqlParser.SPEC_MYSQL_COMMENT = 2;
MySqlParser.COMMENT_INPUT = 3;
MySqlParser.LINE_COMMENT = 4;
MySqlParser.ADD = 5;
MySqlParser.ALL = 6;
MySqlParser.ALTER = 7;
MySqlParser.ALWAYS = 8;
MySqlParser.ANALYZE = 9;
MySqlParser.AND = 10;
MySqlParser.ARRAY = 11;
MySqlParser.AS = 12;
MySqlParser.ASC = 13;
MySqlParser.ATTRIBUTE = 14;
MySqlParser.BEFORE = 15;
MySqlParser.BETWEEN = 16;
MySqlParser.BOTH = 17;
MySqlParser.BUCKETS = 18;
MySqlParser.BY = 19;
MySqlParser.CALL = 20;
MySqlParser.CASCADE = 21;
MySqlParser.CASE = 22;
MySqlParser.CAST = 23;
MySqlParser.CHANGE = 24;
MySqlParser.CHARACTER = 25;
MySqlParser.CHECK = 26;
MySqlParser.COLLATE = 27;
MySqlParser.COLUMN = 28;
MySqlParser.CONDITION = 29;
MySqlParser.CONSTRAINT = 30;
MySqlParser.CONTINUE = 31;
MySqlParser.CONVERT = 32;
MySqlParser.CREATE = 33;
MySqlParser.CROSS = 34;
MySqlParser.CURRENT = 35;
MySqlParser.CURRENT_ROLE = 36;
MySqlParser.CURRENT_USER = 37;
MySqlParser.CURSOR = 38;
MySqlParser.DATABASE = 39;
MySqlParser.DATABASES = 40;
MySqlParser.DECLARE = 41;
MySqlParser.DEFAULT = 42;
MySqlParser.DELAYED = 43;
MySqlParser.DELETE = 44;
MySqlParser.DESC = 45;
MySqlParser.DESCRIBE = 46;
MySqlParser.DETERMINISTIC = 47;
MySqlParser.DIAGNOSTICS = 48;
MySqlParser.DISTINCT = 49;
MySqlParser.DISTINCTROW = 50;
MySqlParser.DROP = 51;
MySqlParser.EACH = 52;
MySqlParser.ELSE = 53;
MySqlParser.ELSEIF = 54;
MySqlParser.EMPTY = 55;
MySqlParser.ENCLOSED = 56;
MySqlParser.ENFORCED = 57;
MySqlParser.ESCAPED = 58;
MySqlParser.EXCEPT = 59;
MySqlParser.EXISTS = 60;
MySqlParser.EXIT = 61;
MySqlParser.EXPLAIN = 62;
MySqlParser.FALSE = 63;
MySqlParser.FETCH = 64;
MySqlParser.FOR = 65;
MySqlParser.FORCE = 66;
MySqlParser.FOREIGN = 67;
MySqlParser.FROM = 68;
MySqlParser.FULLTEXT = 69;
MySqlParser.GENERATED = 70;
MySqlParser.GET = 71;
MySqlParser.GRANT = 72;
MySqlParser.GROUP = 73;
MySqlParser.HAVING = 74;
MySqlParser.HIGH_PRIORITY = 75;
MySqlParser.HISTOGRAM = 76;
MySqlParser.IF = 77;
MySqlParser.IGNORE = 78;
MySqlParser.IGNORED = 79;
MySqlParser.IN = 80;
MySqlParser.INDEX = 81;
MySqlParser.INFILE = 82;
MySqlParser.INNER = 83;
MySqlParser.INOUT = 84;
MySqlParser.INSERT = 85;
MySqlParser.INTERVAL = 86;
MySqlParser.INTO = 87;
MySqlParser.IS = 88;
MySqlParser.ITERATE = 89;
MySqlParser.JOIN = 90;
MySqlParser.KEY = 91;
MySqlParser.KEYS = 92;
MySqlParser.KILL = 93;
MySqlParser.LATERAL = 94;
MySqlParser.LEADING = 95;
MySqlParser.LEAVE = 96;
MySqlParser.LEFT = 97;
MySqlParser.LIKE = 98;
MySqlParser.LIMIT = 99;
MySqlParser.LINEAR = 100;
MySqlParser.LINES = 101;
MySqlParser.LOAD = 102;
MySqlParser.LOCK = 103;
MySqlParser.LOCKED = 104;
MySqlParser.LOOP = 105;
MySqlParser.LOW_PRIORITY = 106;
MySqlParser.MASTER_BIND = 107;
MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT = 108;
MySqlParser.MATCH = 109;
MySqlParser.MAXVALUE = 110;
MySqlParser.MINVALUE = 111;
MySqlParser.MODIFIES = 112;
MySqlParser.NATURAL = 113;
MySqlParser.NOT = 114;
MySqlParser.NO_WRITE_TO_BINLOG = 115;
MySqlParser.NULL_LITERAL = 116;
MySqlParser.NUMBER = 117;
MySqlParser.ON = 118;
MySqlParser.OPTIMIZE = 119;
MySqlParser.OPTION = 120;
MySqlParser.OPTIONAL = 121;
MySqlParser.OPTIONALLY = 122;
MySqlParser.OR = 123;
MySqlParser.ORDER = 124;
MySqlParser.OUT = 125;
MySqlParser.OUTER = 126;
MySqlParser.OUTFILE = 127;
MySqlParser.OVER = 128;
MySqlParser.PARTITION = 129;
MySqlParser.PRIMARY = 130;
MySqlParser.PROCEDURE = 131;
MySqlParser.PURGE = 132;
MySqlParser.RANGE = 133;
MySqlParser.READ = 134;
MySqlParser.READS = 135;
MySqlParser.REFERENCES = 136;
MySqlParser.REGEXP = 137;
MySqlParser.RELEASE = 138;
MySqlParser.RENAME = 139;
MySqlParser.REPEAT = 140;
MySqlParser.REPLACE = 141;
MySqlParser.REQUIRE = 142;
MySqlParser.RESIGNAL = 143;
MySqlParser.RESTRICT = 144;
MySqlParser.RETAIN = 145;
MySqlParser.RETURN = 146;
MySqlParser.REVOKE = 147;
MySqlParser.RIGHT = 148;
MySqlParser.RLIKE = 149;
MySqlParser.SCHEMA = 150;
MySqlParser.SCHEMAS = 151;
MySqlParser.SELECT = 152;
MySqlParser.SET = 153;
MySqlParser.SEPARATOR = 154;
MySqlParser.SHOW = 155;
MySqlParser.SIGNAL = 156;
MySqlParser.SKIP_ = 157;
MySqlParser.SKIP_QUERY_REWRITE = 158;
MySqlParser.SPATIAL = 159;
MySqlParser.SQL = 160;
MySqlParser.SQLEXCEPTION = 161;
MySqlParser.SQLSTATE = 162;
MySqlParser.SQLWARNING = 163;
MySqlParser.SQL_BIG_RESULT = 164;
MySqlParser.SQL_CALC_FOUND_ROWS = 165;
MySqlParser.SQL_SMALL_RESULT = 166;
MySqlParser.SSL = 167;
MySqlParser.STACKED = 168;
MySqlParser.STARTING = 169;
MySqlParser.STATEMENT = 170;
MySqlParser.STRAIGHT_JOIN = 171;
MySqlParser.TABLE = 172;
MySqlParser.TERMINATED = 173;
MySqlParser.THEN = 174;
MySqlParser.TO = 175;
MySqlParser.TRAILING = 176;
MySqlParser.TRIGGER = 177;
MySqlParser.TRUE = 178;
MySqlParser.UNDO = 179;
MySqlParser.UNION = 180;
MySqlParser.UNIQUE = 181;
MySqlParser.UNLOCK = 182;
MySqlParser.UNSIGNED = 183;
MySqlParser.UPDATE = 184;
MySqlParser.USAGE = 185;
MySqlParser.USE = 186;
MySqlParser.USING = 187;
MySqlParser.VALUES = 188;
MySqlParser.WHEN = 189;
MySqlParser.WHERE = 190;
MySqlParser.WHILE = 191;
MySqlParser.WITH = 192;
MySqlParser.WRITE = 193;
MySqlParser.XOR = 194;
MySqlParser.ZEROFILL = 195;
MySqlParser.TINYINT = 196;
MySqlParser.SMALLINT = 197;
MySqlParser.MEDIUMINT = 198;
MySqlParser.MIDDLEINT = 199;
MySqlParser.INT = 200;
MySqlParser.INT1 = 201;
MySqlParser.INT2 = 202;
MySqlParser.INT3 = 203;
MySqlParser.INT4 = 204;
MySqlParser.INT8 = 205;
MySqlParser.INTEGER = 206;
MySqlParser.BIGINT = 207;
MySqlParser.REAL = 208;
MySqlParser.DOUBLE = 209;
MySqlParser.PRECISION = 210;
MySqlParser.FLOAT = 211;
MySqlParser.FLOAT4 = 212;
MySqlParser.FLOAT8 = 213;
MySqlParser.DECIMAL = 214;
MySqlParser.DEC = 215;
MySqlParser.NUMERIC = 216;
MySqlParser.DATE = 217;
MySqlParser.TIME = 218;
MySqlParser.TIMESTAMP = 219;
MySqlParser.DATETIME = 220;
MySqlParser.YEAR = 221;
MySqlParser.CHAR = 222;
MySqlParser.VARCHAR = 223;
MySqlParser.NVARCHAR = 224;
MySqlParser.NATIONAL = 225;
MySqlParser.BINARY = 226;
MySqlParser.VARBINARY = 227;
MySqlParser.TINYBLOB = 228;
MySqlParser.BLOB = 229;
MySqlParser.MEDIUMBLOB = 230;
MySqlParser.LONG = 231;
MySqlParser.LONGBLOB = 232;
MySqlParser.TINYTEXT = 233;
MySqlParser.TEXT = 234;
MySqlParser.MEDIUMTEXT = 235;
MySqlParser.LONGTEXT = 236;
MySqlParser.ENUM = 237;
MySqlParser.VARYING = 238;
MySqlParser.SERIAL = 239;
MySqlParser.YEAR_MONTH = 240;
MySqlParser.DAY_HOUR = 241;
MySqlParser.DAY_MINUTE = 242;
MySqlParser.DAY_SECOND = 243;
MySqlParser.HOUR_MINUTE = 244;
MySqlParser.HOUR_SECOND = 245;
MySqlParser.MINUTE_SECOND = 246;
MySqlParser.SECOND_MICROSECOND = 247;
MySqlParser.MINUTE_MICROSECOND = 248;
MySqlParser.HOUR_MICROSECOND = 249;
MySqlParser.DAY_MICROSECOND = 250;
MySqlParser.JSON_ARRAY = 251;
MySqlParser.JSON_ARRAYAGG = 252;
MySqlParser.JSON_ARRAY_APPEND = 253;
MySqlParser.JSON_ARRAY_INSERT = 254;
MySqlParser.JSON_CONTAINS = 255;
MySqlParser.JSON_CONTAINS_PATH = 256;
MySqlParser.JSON_DEPTH = 257;
MySqlParser.JSON_EXTRACT = 258;
MySqlParser.JSON_INSERT = 259;
MySqlParser.JSON_KEYS = 260;
MySqlParser.JSON_LENGTH = 261;
MySqlParser.JSON_MERGE = 262;
MySqlParser.JSON_MERGE_PATCH = 263;
MySqlParser.JSON_MERGE_PRESERVE = 264;
MySqlParser.JSON_OBJECT = 265;
MySqlParser.JSON_OBJECTAGG = 266;
MySqlParser.JSON_OVERLAPS = 267;
MySqlParser.JSON_PRETTY = 268;
MySqlParser.JSON_QUOTE = 269;
MySqlParser.JSON_REMOVE = 270;
MySqlParser.JSON_REPLACE = 271;
MySqlParser.JSON_SCHEMA_VALID = 272;
MySqlParser.JSON_SCHEMA_VALIDATION_REPORT = 273;
MySqlParser.JSON_SEARCH = 274;
MySqlParser.JSON_SET = 275;
MySqlParser.JSON_STORAGE_FREE = 276;
MySqlParser.JSON_STORAGE_SIZE = 277;
MySqlParser.JSON_TABLE = 278;
MySqlParser.JSON_TYPE = 279;
MySqlParser.JSON_UNQUOTE = 280;
MySqlParser.JSON_VALID = 281;
MySqlParser.JSON_VALUE = 282;
MySqlParser.NESTED = 283;
MySqlParser.ORDINALITY = 284;
MySqlParser.PATH = 285;
MySqlParser.AVG = 286;
MySqlParser.BIT_AND = 287;
MySqlParser.BIT_OR = 288;
MySqlParser.BIT_XOR = 289;
MySqlParser.COUNT = 290;
MySqlParser.CUME_DIST = 291;
MySqlParser.DENSE_RANK = 292;
MySqlParser.FIRST_VALUE = 293;
MySqlParser.GROUP_CONCAT = 294;
MySqlParser.LAG = 295;
MySqlParser.LAST_VALUE = 296;
MySqlParser.LEAD = 297;
MySqlParser.MAX = 298;
MySqlParser.MIN = 299;
MySqlParser.NTILE = 300;
MySqlParser.NTH_VALUE = 301;
MySqlParser.PERCENT_RANK = 302;
MySqlParser.RANK = 303;
MySqlParser.ROW_NUMBER = 304;
MySqlParser.STD = 305;
MySqlParser.STDDEV = 306;
MySqlParser.STDDEV_POP = 307;
MySqlParser.STDDEV_SAMP = 308;
MySqlParser.SUM = 309;
MySqlParser.VAR_POP = 310;
MySqlParser.VAR_SAMP = 311;
MySqlParser.VARIANCE = 312;
MySqlParser.CURRENT_DATE = 313;
MySqlParser.CURRENT_TIME = 314;
MySqlParser.CURRENT_TIMESTAMP = 315;
MySqlParser.LOCALTIME = 316;
MySqlParser.CURDATE = 317;
MySqlParser.CURTIME = 318;
MySqlParser.DATE_ADD = 319;
MySqlParser.DATE_SUB = 320;
MySqlParser.EXTRACT = 321;
MySqlParser.LOCALTIMESTAMP = 322;
MySqlParser.NOW = 323;
MySqlParser.POSITION = 324;
MySqlParser.SUBSTR = 325;
MySqlParser.SUBSTRING = 326;
MySqlParser.SYSDATE = 327;
MySqlParser.TRIM = 328;
MySqlParser.UTC_DATE = 329;
MySqlParser.UTC_TIME = 330;
MySqlParser.UTC_TIMESTAMP = 331;
MySqlParser.ACCOUNT = 332;
MySqlParser.ACTION = 333;
MySqlParser.AFTER = 334;
MySqlParser.AGGREGATE = 335;
MySqlParser.ALGORITHM = 336;
MySqlParser.ANY = 337;
MySqlParser.AT = 338;
MySqlParser.AUTHORS = 339;
MySqlParser.AUTOCOMMIT = 340;
MySqlParser.AUTOEXTEND_SIZE = 341;
MySqlParser.AUTO_INCREMENT = 342;
MySqlParser.AVG_ROW_LENGTH = 343;
MySqlParser.BEGIN = 344;
MySqlParser.BINLOG = 345;
MySqlParser.BIT = 346;
MySqlParser.BLOCK = 347;
MySqlParser.BOOL = 348;
MySqlParser.BOOLEAN = 349;
MySqlParser.BTREE = 350;
MySqlParser.CACHE = 351;
MySqlParser.CASCADED = 352;
MySqlParser.CHAIN = 353;
MySqlParser.CHANGED = 354;
MySqlParser.CHANNEL = 355;
MySqlParser.CHECKSUM = 356;
MySqlParser.PAGE_CHECKSUM = 357;
MySqlParser.CIPHER = 358;
MySqlParser.CLASS_ORIGIN = 359;
MySqlParser.CLIENT = 360;
MySqlParser.CLOSE = 361;
MySqlParser.CLUSTERING = 362;
MySqlParser.COALESCE = 363;
MySqlParser.CODE = 364;
MySqlParser.COLUMNS = 365;
MySqlParser.COLUMN_FORMAT = 366;
MySqlParser.COLUMN_NAME = 367;
MySqlParser.COMMENT = 368;
MySqlParser.COMMIT = 369;
MySqlParser.COMPACT = 370;
MySqlParser.COMPLETION = 371;
MySqlParser.COMPRESSED = 372;
MySqlParser.COMPRESSION = 373;
MySqlParser.CONCURRENT = 374;
MySqlParser.CONNECT = 375;
MySqlParser.CONNECTION = 376;
MySqlParser.CONSISTENT = 377;
MySqlParser.CONSTRAINT_CATALOG = 378;
MySqlParser.CONSTRAINT_SCHEMA = 379;
MySqlParser.CONSTRAINT_NAME = 380;
MySqlParser.CONTAINS = 381;
MySqlParser.CONTEXT = 382;
MySqlParser.CONTRIBUTORS = 383;
MySqlParser.COPY = 384;
MySqlParser.CPU = 385;
MySqlParser.CYCLE = 386;
MySqlParser.CURSOR_NAME = 387;
MySqlParser.DATA = 388;
MySqlParser.DATAFILE = 389;
MySqlParser.DEALLOCATE = 390;
MySqlParser.DEFAULT_AUTH = 391;
MySqlParser.DEFINER = 392;
MySqlParser.DELAY_KEY_WRITE = 393;
MySqlParser.DES_KEY_FILE = 394;
MySqlParser.DIRECTORY = 395;
MySqlParser.DISABLE = 396;
MySqlParser.DISCARD = 397;
MySqlParser.DISK = 398;
MySqlParser.DO = 399;
MySqlParser.DUMPFILE = 400;
MySqlParser.DUPLICATE = 401;
MySqlParser.DYNAMIC = 402;
MySqlParser.ENABLE = 403;
MySqlParser.ENCRYPTED = 404;
MySqlParser.ENCRYPTION = 405;
MySqlParser.ENCRYPTION_KEY_ID = 406;
MySqlParser.END = 407;
MySqlParser.ENDS = 408;
MySqlParser.ENGINE = 409;
MySqlParser.ENGINES = 410;
MySqlParser.ERROR = 411;
MySqlParser.ERRORS = 412;
MySqlParser.ESCAPE = 413;
MySqlParser.EVEN = 414;
MySqlParser.EVENT = 415;
MySqlParser.EVENTS = 416;
MySqlParser.EVERY = 417;
MySqlParser.EXCHANGE = 418;
MySqlParser.EXCLUSIVE = 419;
MySqlParser.EXPIRE = 420;
MySqlParser.EXPORT = 421;
MySqlParser.EXTENDED = 422;
MySqlParser.EXTENT_SIZE = 423;
MySqlParser.FAILED_LOGIN_ATTEMPTS = 424;
MySqlParser.FAST = 425;
MySqlParser.FAULTS = 426;
MySqlParser.FIELDS = 427;
MySqlParser.FILE_BLOCK_SIZE = 428;
MySqlParser.FILTER = 429;
MySqlParser.FIRST = 430;
MySqlParser.FIXED = 431;
MySqlParser.FLUSH = 432;
MySqlParser.FOLLOWING = 433;
MySqlParser.FOLLOWS = 434;
MySqlParser.FOUND = 435;
MySqlParser.FULL = 436;
MySqlParser.FUNCTION = 437;
MySqlParser.GENERAL = 438;
MySqlParser.GLOBAL = 439;
MySqlParser.GRANTS = 440;
MySqlParser.GROUP_REPLICATION = 441;
MySqlParser.HANDLER = 442;
MySqlParser.HASH = 443;
MySqlParser.HELP = 444;
MySqlParser.HISTORY = 445;
MySqlParser.HOST = 446;
MySqlParser.HOSTS = 447;
MySqlParser.IDENTIFIED = 448;
MySqlParser.IGNORE_SERVER_IDS = 449;
MySqlParser.IMPORT = 450;
MySqlParser.INCREMENT = 451;
MySqlParser.INDEXES = 452;
MySqlParser.INITIAL_SIZE = 453;
MySqlParser.INPLACE = 454;
MySqlParser.INSERT_METHOD = 455;
MySqlParser.INSTALL = 456;
MySqlParser.INSTANCE = 457;
MySqlParser.INSTANT = 458;
MySqlParser.INVISIBLE = 459;
MySqlParser.INVOKER = 460;
MySqlParser.IO = 461;
MySqlParser.IO_THREAD = 462;
MySqlParser.IPC = 463;
MySqlParser.ISOLATION = 464;
MySqlParser.ISSUER = 465;
MySqlParser.JSON = 466;
MySqlParser.KEY_BLOCK_SIZE = 467;
MySqlParser.LANGUAGE = 468;
MySqlParser.LAST = 469;
MySqlParser.LEAVES = 470;
MySqlParser.LESS = 471;
MySqlParser.LEVEL = 472;
MySqlParser.LIST = 473;
MySqlParser.LOCAL = 474;
MySqlParser.LOGFILE = 475;
MySqlParser.LOGS = 476;
MySqlParser.MASTER = 477;
MySqlParser.MASTER_AUTO_POSITION = 478;
MySqlParser.MASTER_CONNECT_RETRY = 479;
MySqlParser.MASTER_DELAY = 480;
MySqlParser.MASTER_HEARTBEAT_PERIOD = 481;
MySqlParser.MASTER_HOST = 482;
MySqlParser.MASTER_LOG_FILE = 483;
MySqlParser.MASTER_LOG_POS = 484;
MySqlParser.MASTER_PASSWORD = 485;
MySqlParser.MASTER_PORT = 486;
MySqlParser.MASTER_RETRY_COUNT = 487;
MySqlParser.MASTER_SSL = 488;
MySqlParser.MASTER_SSL_CA = 489;
MySqlParser.MASTER_SSL_CAPATH = 490;
MySqlParser.MASTER_SSL_CERT = 491;
MySqlParser.MASTER_SSL_CIPHER = 492;
MySqlParser.MASTER_SSL_CRL = 493;
MySqlParser.MASTER_SSL_CRLPATH = 494;
MySqlParser.MASTER_SSL_KEY = 495;
MySqlParser.MASTER_TLS_VERSION = 496;
MySqlParser.MASTER_USER = 497;
MySqlParser.MAX_CONNECTIONS_PER_HOUR = 498;
MySqlParser.MAX_QUERIES_PER_HOUR = 499;
MySqlParser.MAX_ROWS = 500;
MySqlParser.MAX_SIZE = 501;
MySqlParser.MAX_UPDATES_PER_HOUR = 502;
MySqlParser.MAX_USER_CONNECTIONS = 503;
MySqlParser.MEDIUM = 504;
MySqlParser.MEMBER = 505;
MySqlParser.MERGE = 506;
MySqlParser.MESSAGE_TEXT = 507;
MySqlParser.MID = 508;
MySqlParser.MIGRATE = 509;
MySqlParser.MIN_ROWS = 510;
MySqlParser.MODE = 511;
MySqlParser.MODIFY = 512;
MySqlParser.MUTEX = 513;
MySqlParser.MYSQL = 514;
MySqlParser.MYSQL_ERRNO = 515;
MySqlParser.NAME = 516;
MySqlParser.NAMES = 517;
MySqlParser.NCHAR = 518;
MySqlParser.NEVER = 519;
MySqlParser.NEXT = 520;
MySqlParser.NO = 521;
MySqlParser.NOCACHE = 522;
MySqlParser.NOCOPY = 523;
MySqlParser.NOCYCLE = 524;
MySqlParser.NOMAXVALUE = 525;
MySqlParser.NOMINVALUE = 526;
MySqlParser.NOWAIT = 527;
MySqlParser.NODEGROUP = 528;
MySqlParser.NONE = 529;
MySqlParser.ODBC = 530;
MySqlParser.OFFLINE = 531;
MySqlParser.OFFSET = 532;
MySqlParser.OF = 533;
MySqlParser.OJ = 534;
MySqlParser.OLD_PASSWORD = 535;
MySqlParser.ONE = 536;
MySqlParser.ONLINE = 537;
MySqlParser.ONLY = 538;
MySqlParser.OPEN = 539;
MySqlParser.OPTIMIZER_COSTS = 540;
MySqlParser.OPTIONS = 541;
MySqlParser.OWNER = 542;
MySqlParser.PACK_KEYS = 543;
MySqlParser.PAGE = 544;
MySqlParser.PAGE_COMPRESSED = 545;
MySqlParser.PAGE_COMPRESSION_LEVEL = 546;
MySqlParser.PARSER = 547;
MySqlParser.PARTIAL = 548;
MySqlParser.PARTITIONING = 549;
MySqlParser.PARTITIONS = 550;
MySqlParser.PASSWORD = 551;
MySqlParser.PASSWORD_LOCK_TIME = 552;
MySqlParser.PHASE = 553;
MySqlParser.PLUGIN = 554;
MySqlParser.PLUGIN_DIR = 555;
MySqlParser.PLUGINS = 556;
MySqlParser.PORT = 557;
MySqlParser.PRECEDES = 558;
MySqlParser.PRECEDING = 559;
MySqlParser.PREPARE = 560;
MySqlParser.PRESERVE = 561;
MySqlParser.PREV = 562;
MySqlParser.PROCESSLIST = 563;
MySqlParser.PROFILE = 564;
MySqlParser.PROFILES = 565;
MySqlParser.PROXY = 566;
MySqlParser.QUERY = 567;
MySqlParser.QUICK = 568;
MySqlParser.REBUILD = 569;
MySqlParser.RECOVER = 570;
MySqlParser.RECURSIVE = 571;
MySqlParser.REDO_BUFFER_SIZE = 572;
MySqlParser.REDUNDANT = 573;
MySqlParser.RELAY = 574;
MySqlParser.RELAY_LOG_FILE = 575;
MySqlParser.RELAY_LOG_POS = 576;
MySqlParser.RELAYLOG = 577;
MySqlParser.REMOVE = 578;
MySqlParser.REORGANIZE = 579;
MySqlParser.REPAIR = 580;
MySqlParser.REPLICATE_DO_DB = 581;
MySqlParser.REPLICATE_DO_TABLE = 582;
MySqlParser.REPLICATE_IGNORE_DB = 583;
MySqlParser.REPLICATE_IGNORE_TABLE = 584;
MySqlParser.REPLICATE_REWRITE_DB = 585;
MySqlParser.REPLICATE_WILD_DO_TABLE = 586;
MySqlParser.REPLICATE_WILD_IGNORE_TABLE = 587;
MySqlParser.REPLICATION = 588;
MySqlParser.RESET = 589;
MySqlParser.RESTART = 590;
MySqlParser.RESUME = 591;
MySqlParser.RETURNED_SQLSTATE = 592;
MySqlParser.RETURNING = 593;
MySqlParser.RETURNS = 594;
MySqlParser.REUSE = 595;
MySqlParser.ROLE = 596;
MySqlParser.ROLLBACK = 597;
MySqlParser.ROLLUP = 598;
MySqlParser.ROTATE = 599;
MySqlParser.ROW = 600;
MySqlParser.ROWS = 601;
MySqlParser.ROW_FORMAT = 602;
MySqlParser.RTREE = 603;
MySqlParser.SAVEPOINT = 604;
MySqlParser.SCHEDULE = 605;
MySqlParser.SECURITY = 606;
MySqlParser.SEQUENCE = 607;
MySqlParser.SERVER = 608;
MySqlParser.SESSION = 609;
MySqlParser.SHARE = 610;
MySqlParser.SHARED = 611;
MySqlParser.SIGNED = 612;
MySqlParser.SIMPLE = 613;
MySqlParser.SLAVE = 614;
MySqlParser.SLOW = 615;
MySqlParser.SNAPSHOT = 616;
MySqlParser.SOCKET = 617;
MySqlParser.SOME = 618;
MySqlParser.SONAME = 619;
MySqlParser.SOUNDS = 620;
MySqlParser.SOURCE = 621;
MySqlParser.SQL_AFTER_GTIDS = 622;
MySqlParser.SQL_AFTER_MTS_GAPS = 623;
MySqlParser.SQL_BEFORE_GTIDS = 624;
MySqlParser.SQL_BUFFER_RESULT = 625;
MySqlParser.SQL_CACHE = 626;
MySqlParser.SQL_NO_CACHE = 627;
MySqlParser.SQL_THREAD = 628;
MySqlParser.START = 629;
MySqlParser.STARTS = 630;
MySqlParser.STATS_AUTO_RECALC = 631;
MySqlParser.STATS_PERSISTENT = 632;
MySqlParser.STATS_SAMPLE_PAGES = 633;
MySqlParser.STATUS = 634;
MySqlParser.STOP = 635;
MySqlParser.STORAGE = 636;
MySqlParser.STORED = 637;
MySqlParser.STRING = 638;
MySqlParser.SUBCLASS_ORIGIN = 639;
MySqlParser.SUBJECT = 640;
MySqlParser.SUBPARTITION = 641;
MySqlParser.SUBPARTITIONS = 642;
MySqlParser.SUSPEND = 643;
MySqlParser.SWAPS = 644;
MySqlParser.SWITCHES = 645;
MySqlParser.TABLE_NAME = 646;
MySqlParser.TABLESPACE = 647;
MySqlParser.TABLE_TYPE = 648;
MySqlParser.TEMPORARY = 649;
MySqlParser.TEMPTABLE = 650;
MySqlParser.THAN = 651;
MySqlParser.TRADITIONAL = 652;
MySqlParser.TRANSACTION = 653;
MySqlParser.TRANSACTIONAL = 654;
MySqlParser.TRIGGERS = 655;
MySqlParser.TRUNCATE = 656;
MySqlParser.UNBOUNDED = 657;
MySqlParser.UNDEFINED = 658;
MySqlParser.UNDOFILE = 659;
MySqlParser.UNDO_BUFFER_SIZE = 660;
MySqlParser.UNINSTALL = 661;
MySqlParser.UNKNOWN = 662;
MySqlParser.UNTIL = 663;
MySqlParser.UPGRADE = 664;
MySqlParser.USER = 665;
MySqlParser.USE_FRM = 666;
MySqlParser.USER_RESOURCES = 667;
MySqlParser.VALIDATION = 668;
MySqlParser.VALUE = 669;
MySqlParser.VARIABLES = 670;
MySqlParser.VIEW = 671;
MySqlParser.VIRTUAL = 672;
MySqlParser.VISIBLE = 673;
MySqlParser.WAIT = 674;
MySqlParser.WARNINGS = 675;
MySqlParser.WINDOW = 676;
MySqlParser.WITHOUT = 677;
MySqlParser.WORK = 678;
MySqlParser.WRAPPER = 679;
MySqlParser.X509 = 680;
MySqlParser.XA = 681;
MySqlParser.XML = 682;
MySqlParser.YES = 683;
MySqlParser.EUR = 684;
MySqlParser.USA = 685;
MySqlParser.JIS = 686;
MySqlParser.ISO = 687;
MySqlParser.INTERNAL = 688;
MySqlParser.QUARTER = 689;
MySqlParser.MONTH = 690;
MySqlParser.DAY = 691;
MySqlParser.HOUR = 692;
MySqlParser.MINUTE = 693;
MySqlParser.WEEK = 694;
MySqlParser.SECOND = 695;
MySqlParser.MICROSECOND = 696;
MySqlParser.ADMIN = 697;
MySqlParser.APPLICATION_PASSWORD_ADMIN = 698;
MySqlParser.AUDIT_ABORT_EXEMPT = 699;
MySqlParser.AUDIT_ADMIN = 700;
MySqlParser.AUTHENTICATION_POLICY_ADMIN = 701;
MySqlParser.BACKUP_ADMIN = 702;
MySqlParser.BINLOG_ADMIN = 703;
MySqlParser.BINLOG_ENCRYPTION_ADMIN = 704;
MySqlParser.CLONE_ADMIN = 705;
MySqlParser.CONNECTION_ADMIN = 706;
MySqlParser.ENCRYPTION_KEY_ADMIN = 707;
MySqlParser.EXECUTE = 708;
MySqlParser.FILE = 709;
MySqlParser.FIREWALL_ADMIN = 710;
MySqlParser.FIREWALL_EXEMPT = 711;
MySqlParser.FIREWALL_USER = 712;
MySqlParser.FLUSH_OPTIMIZER_COSTS = 713;
MySqlParser.FLUSH_STATUS = 714;
MySqlParser.FLUSH_TABLES = 715;
MySqlParser.FLUSH_USER_RESOURCES = 716;
MySqlParser.GROUP_REPLICATION_ADMIN = 717;
MySqlParser.INNODB_REDO_LOG_ARCHIVE = 718;
MySqlParser.INNODB_REDO_LOG_ENABLE = 719;
MySqlParser.INVOKE = 720;
MySqlParser.LAMBDA = 721;
MySqlParser.NDB_STORED_USER = 722;
MySqlParser.PASSWORDLESS_USER_ADMIN = 723;
MySqlParser.PERSIST_RO_VARIABLES_ADMIN = 724;
MySqlParser.PRIVILEGES = 725;
MySqlParser.PROCESS = 726;
MySqlParser.RELOAD = 727;
MySqlParser.REPLICATION_APPLIER = 728;
MySqlParser.REPLICATION_SLAVE_ADMIN = 729;
MySqlParser.RESOURCE_GROUP_ADMIN = 730;
MySqlParser.RESOURCE_GROUP_USER = 731;
MySqlParser.ROLE_ADMIN = 732;
MySqlParser.ROUTINE = 733;
MySqlParser.S3 = 734;
MySqlParser.SERVICE_CONNECTION_ADMIN = 735;
MySqlParser.SESSION_VARIABLES_ADMIN = 736;
MySqlParser.SET_USER_ID = 737;
MySqlParser.SHOW_ROUTINE = 738;
MySqlParser.SHUTDOWN = 739;
MySqlParser.SUPER = 740;
MySqlParser.SYSTEM_VARIABLES_ADMIN = 741;
MySqlParser.TABLES = 742;
MySqlParser.TABLE_ENCRYPTION_ADMIN = 743;
MySqlParser.VERSION_TOKEN_ADMIN = 744;
MySqlParser.XA_RECOVER_ADMIN = 745;
MySqlParser.ARMSCII8 = 746;
MySqlParser.ASCII = 747;
MySqlParser.BIG5 = 748;
MySqlParser.CP1250 = 749;
MySqlParser.CP1251 = 750;
MySqlParser.CP1256 = 751;
MySqlParser.CP1257 = 752;
MySqlParser.CP850 = 753;
MySqlParser.CP852 = 754;
MySqlParser.CP866 = 755;
MySqlParser.CP932 = 756;
MySqlParser.DEC8 = 757;
MySqlParser.EUCJPMS = 758;
MySqlParser.EUCKR = 759;
MySqlParser.GB18030 = 760;
MySqlParser.GB2312 = 761;
MySqlParser.GBK = 762;
MySqlParser.GEOSTD8 = 763;
MySqlParser.GREEK = 764;
MySqlParser.HEBREW = 765;
MySqlParser.HP8 = 766;
MySqlParser.KEYBCS2 = 767;
MySqlParser.KOI8R = 768;
MySqlParser.KOI8U = 769;
MySqlParser.LATIN1 = 770;
MySqlParser.LATIN2 = 771;
MySqlParser.LATIN5 = 772;
MySqlParser.LATIN7 = 773;
MySqlParser.MACCE = 774;
MySqlParser.MACROMAN = 775;
MySqlParser.SJIS = 776;
MySqlParser.SWE7 = 777;
MySqlParser.TIS620 = 778;
MySqlParser.UCS2 = 779;
MySqlParser.UJIS = 780;
MySqlParser.UTF16 = 781;
MySqlParser.UTF16LE = 782;
MySqlParser.UTF32 = 783;
MySqlParser.UTF8 = 784;
MySqlParser.UTF8MB3 = 785;
MySqlParser.UTF8MB4 = 786;
MySqlParser.ARCHIVE = 787;
MySqlParser.BLACKHOLE = 788;
MySqlParser.CSV = 789;
MySqlParser.FEDERATED = 790;
MySqlParser.INNODB = 791;
MySqlParser.MEMORY = 792;
MySqlParser.MRG_MYISAM = 793;
MySqlParser.MYISAM = 794;
MySqlParser.NDB = 795;
MySqlParser.NDBCLUSTER = 796;
MySqlParser.PERFORMANCE_SCHEMA = 797;
MySqlParser.TOKUDB = 798;
MySqlParser.REPEATABLE = 799;
MySqlParser.COMMITTED = 800;
MySqlParser.UNCOMMITTED = 801;
MySqlParser.SERIALIZABLE = 802;
MySqlParser.GEOMETRYCOLLECTION = 803;
MySqlParser.GEOMCOLLECTION = 804;
MySqlParser.GEOMETRY = 805;
MySqlParser.LINESTRING = 806;
MySqlParser.MULTILINESTRING = 807;
MySqlParser.MULTIPOINT = 808;
MySqlParser.MULTIPOLYGON = 809;
MySqlParser.POINT = 810;
MySqlParser.POLYGON = 811;
MySqlParser.ABS = 812;
MySqlParser.ACOS = 813;
MySqlParser.ADDDATE = 814;
MySqlParser.ADDTIME = 815;
MySqlParser.AES_DECRYPT = 816;
MySqlParser.AES_ENCRYPT = 817;
MySqlParser.AREA = 818;
MySqlParser.ASBINARY = 819;
MySqlParser.ASIN = 820;
MySqlParser.ASTEXT = 821;
MySqlParser.ASWKB = 822;
MySqlParser.ASWKT = 823;
MySqlParser.ASYMMETRIC_DECRYPT = 824;
MySqlParser.ASYMMETRIC_DERIVE = 825;
MySqlParser.ASYMMETRIC_ENCRYPT = 826;
MySqlParser.ASYMMETRIC_SIGN = 827;
MySqlParser.ASYMMETRIC_VERIFY = 828;
MySqlParser.ATAN = 829;
MySqlParser.ATAN2 = 830;
MySqlParser.BENCHMARK = 831;
MySqlParser.BIN = 832;
MySqlParser.BIT_COUNT = 833;
MySqlParser.BIT_LENGTH = 834;
MySqlParser.BUFFER = 835;
MySqlParser.CATALOG_NAME = 836;
MySqlParser.CEIL = 837;
MySqlParser.CEILING = 838;
MySqlParser.CENTROID = 839;
MySqlParser.CHARACTER_LENGTH = 840;
MySqlParser.CHARSET = 841;
MySqlParser.CHAR_LENGTH = 842;
MySqlParser.COERCIBILITY = 843;
MySqlParser.COLLATION = 844;
MySqlParser.COMPRESS = 845;
MySqlParser.CONCAT = 846;
MySqlParser.CONCAT_WS = 847;
MySqlParser.CONNECTION_ID = 848;
MySqlParser.CONV = 849;
MySqlParser.CONVERT_TZ = 850;
MySqlParser.COS = 851;
MySqlParser.COT = 852;
MySqlParser.CRC32 = 853;
MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY = 854;
MySqlParser.CREATE_ASYMMETRIC_PUB_KEY = 855;
MySqlParser.CREATE_DH_PARAMETERS = 856;
MySqlParser.CREATE_DIGEST = 857;
MySqlParser.CROSSES = 858;
MySqlParser.DATEDIFF = 859;
MySqlParser.DATE_FORMAT = 860;
MySqlParser.DAYNAME = 861;
MySqlParser.DAYOFMONTH = 862;
MySqlParser.DAYOFWEEK = 863;
MySqlParser.DAYOFYEAR = 864;
MySqlParser.DECODE = 865;
MySqlParser.DEGREES = 866;
MySqlParser.DES_DECRYPT = 867;
MySqlParser.DES_ENCRYPT = 868;
MySqlParser.DIMENSION = 869;
MySqlParser.DISJOINT = 870;
MySqlParser.ELT = 871;
MySqlParser.ENCODE = 872;
MySqlParser.ENCRYPT = 873;
MySqlParser.ENDPOINT = 874;
MySqlParser.ENGINE_ATTRIBUTE = 875;
MySqlParser.ENVELOPE = 876;
MySqlParser.EQUALS = 877;
MySqlParser.EXP = 878;
MySqlParser.EXPORT_SET = 879;
MySqlParser.EXTERIORRING = 880;
MySqlParser.EXTRACTVALUE = 881;
MySqlParser.FIELD = 882;
MySqlParser.FIND_IN_SET = 883;
MySqlParser.FLOOR = 884;
MySqlParser.FORMAT = 885;
MySqlParser.FOUND_ROWS = 886;
MySqlParser.FROM_BASE64 = 887;
MySqlParser.FROM_DAYS = 888;
MySqlParser.FROM_UNIXTIME = 889;
MySqlParser.GEOMCOLLFROMTEXT = 890;
MySqlParser.GEOMCOLLFROMWKB = 891;
MySqlParser.GEOMETRYCOLLECTIONFROMTEXT = 892;
MySqlParser.GEOMETRYCOLLECTIONFROMWKB = 893;
MySqlParser.GEOMETRYFROMTEXT = 894;
MySqlParser.GEOMETRYFROMWKB = 895;
MySqlParser.GEOMETRYN = 896;
MySqlParser.GEOMETRYTYPE = 897;
MySqlParser.GEOMFROMTEXT = 898;
MySqlParser.GEOMFROMWKB = 899;
MySqlParser.GET_FORMAT = 900;
MySqlParser.GET_LOCK = 901;
MySqlParser.GLENGTH = 902;
MySqlParser.GREATEST = 903;
MySqlParser.GTID_SUBSET = 904;
MySqlParser.GTID_SUBTRACT = 905;
MySqlParser.HEX = 906;
MySqlParser.IFNULL = 907;
MySqlParser.INET6_ATON = 908;
MySqlParser.INET6_NTOA = 909;
MySqlParser.INET_ATON = 910;
MySqlParser.INET_NTOA = 911;
MySqlParser.INSTR = 912;
MySqlParser.INTERIORRINGN = 913;
MySqlParser.INTERSECTS = 914;
MySqlParser.ISCLOSED = 915;
MySqlParser.ISEMPTY = 916;
MySqlParser.ISNULL = 917;
MySqlParser.ISSIMPLE = 918;
MySqlParser.IS_FREE_LOCK = 919;
MySqlParser.IS_IPV4 = 920;
MySqlParser.IS_IPV4_COMPAT = 921;
MySqlParser.IS_IPV4_MAPPED = 922;
MySqlParser.IS_IPV6 = 923;
MySqlParser.IS_USED_LOCK = 924;
MySqlParser.LAST_INSERT_ID = 925;
MySqlParser.LCASE = 926;
MySqlParser.LEAST = 927;
MySqlParser.LENGTH = 928;
MySqlParser.LINEFROMTEXT = 929;
MySqlParser.LINEFROMWKB = 930;
MySqlParser.LINESTRINGFROMTEXT = 931;
MySqlParser.LINESTRINGFROMWKB = 932;
MySqlParser.LN = 933;
MySqlParser.LOAD_FILE = 934;
MySqlParser.LOCATE = 935;
MySqlParser.LOG = 936;
MySqlParser.LOG10 = 937;
MySqlParser.LOG2 = 938;
MySqlParser.LOWER = 939;
MySqlParser.LPAD = 940;
MySqlParser.LTRIM = 941;
MySqlParser.MAKEDATE = 942;
MySqlParser.MAKETIME = 943;
MySqlParser.MAKE_SET = 944;
MySqlParser.MASTER_POS_WAIT = 945;
MySqlParser.MBRCONTAINS = 946;
MySqlParser.MBRDISJOINT = 947;
MySqlParser.MBREQUAL = 948;
MySqlParser.MBRINTERSECTS = 949;
MySqlParser.MBROVERLAPS = 950;
MySqlParser.MBRTOUCHES = 951;
MySqlParser.MBRWITHIN = 952;
MySqlParser.MD5 = 953;
MySqlParser.MLINEFROMTEXT = 954;
MySqlParser.MLINEFROMWKB = 955;
MySqlParser.MONTHNAME = 956;
MySqlParser.MPOINTFROMTEXT = 957;
MySqlParser.MPOINTFROMWKB = 958;
MySqlParser.MPOLYFROMTEXT = 959;
MySqlParser.MPOLYFROMWKB = 960;
MySqlParser.MULTILINESTRINGFROMTEXT = 961;
MySqlParser.MULTILINESTRINGFROMWKB = 962;
MySqlParser.MULTIPOINTFROMTEXT = 963;
MySqlParser.MULTIPOINTFROMWKB = 964;
MySqlParser.MULTIPOLYGONFROMTEXT = 965;
MySqlParser.MULTIPOLYGONFROMWKB = 966;
MySqlParser.NAME_CONST = 967;
MySqlParser.NULLIF = 968;
MySqlParser.NUMGEOMETRIES = 969;
MySqlParser.NUMINTERIORRINGS = 970;
MySqlParser.NUMPOINTS = 971;
MySqlParser.OCT = 972;
MySqlParser.OCTET_LENGTH = 973;
MySqlParser.ORD = 974;
MySqlParser.OVERLAPS = 975;
MySqlParser.PERIOD_ADD = 976;
MySqlParser.PERIOD_DIFF = 977;
MySqlParser.PI = 978;
MySqlParser.POINTFROMTEXT = 979;
MySqlParser.POINTFROMWKB = 980;
MySqlParser.POINTN = 981;
MySqlParser.POLYFROMTEXT = 982;
MySqlParser.POLYFROMWKB = 983;
MySqlParser.POLYGONFROMTEXT = 984;
MySqlParser.POLYGONFROMWKB = 985;
MySqlParser.POW = 986;
MySqlParser.POWER = 987;
MySqlParser.QUOTE = 988;
MySqlParser.RADIANS = 989;
MySqlParser.RAND = 990;
MySqlParser.RANDOM = 991;
MySqlParser.RANDOM_BYTES = 992;
MySqlParser.RELEASE_LOCK = 993;
MySqlParser.REVERSE = 994;
MySqlParser.ROUND = 995;
MySqlParser.ROW_COUNT = 996;
MySqlParser.RPAD = 997;
MySqlParser.RTRIM = 998;
MySqlParser.SEC_TO_TIME = 999;
MySqlParser.SECONDARY_ENGINE_ATTRIBUTE = 1000;
MySqlParser.SESSION_USER = 1001;
MySqlParser.SHA = 1002;
MySqlParser.SHA1 = 1003;
MySqlParser.SHA2 = 1004;
MySqlParser.SCHEMA_NAME = 1005;
MySqlParser.SIGN = 1006;
MySqlParser.SIN = 1007;
MySqlParser.SLEEP = 1008;
MySqlParser.SOUNDEX = 1009;
MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS = 1010;
MySqlParser.SQRT = 1011;
MySqlParser.SRID = 1012;
MySqlParser.STARTPOINT = 1013;
MySqlParser.STRCMP = 1014;
MySqlParser.STR_TO_DATE = 1015;
MySqlParser.ST_AREA = 1016;
MySqlParser.ST_ASBINARY = 1017;
MySqlParser.ST_ASTEXT = 1018;
MySqlParser.ST_ASWKB = 1019;
MySqlParser.ST_ASWKT = 1020;
MySqlParser.ST_BUFFER = 1021;
MySqlParser.ST_CENTROID = 1022;
MySqlParser.ST_CONTAINS = 1023;
MySqlParser.ST_CROSSES = 1024;
MySqlParser.ST_DIFFERENCE = 1025;
MySqlParser.ST_DIMENSION = 1026;
MySqlParser.ST_DISJOINT = 1027;
MySqlParser.ST_DISTANCE = 1028;
MySqlParser.ST_ENDPOINT = 1029;
MySqlParser.ST_ENVELOPE = 1030;
MySqlParser.ST_EQUALS = 1031;
MySqlParser.ST_EXTERIORRING = 1032;
MySqlParser.ST_GEOMCOLLFROMTEXT = 1033;
MySqlParser.ST_GEOMCOLLFROMTXT = 1034;
MySqlParser.ST_GEOMCOLLFROMWKB = 1035;
MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT = 1036;
MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB = 1037;
MySqlParser.ST_GEOMETRYFROMTEXT = 1038;
MySqlParser.ST_GEOMETRYFROMWKB = 1039;
MySqlParser.ST_GEOMETRYN = 1040;
MySqlParser.ST_GEOMETRYTYPE = 1041;
MySqlParser.ST_GEOMFROMTEXT = 1042;
MySqlParser.ST_GEOMFROMWKB = 1043;
MySqlParser.ST_INTERIORRINGN = 1044;
MySqlParser.ST_INTERSECTION = 1045;
MySqlParser.ST_INTERSECTS = 1046;
MySqlParser.ST_ISCLOSED = 1047;
MySqlParser.ST_ISEMPTY = 1048;
MySqlParser.ST_ISSIMPLE = 1049;
MySqlParser.ST_LINEFROMTEXT = 1050;
MySqlParser.ST_LINEFROMWKB = 1051;
MySqlParser.ST_LINESTRINGFROMTEXT = 1052;
MySqlParser.ST_LINESTRINGFROMWKB = 1053;
MySqlParser.ST_NUMGEOMETRIES = 1054;
MySqlParser.ST_NUMINTERIORRING = 1055;
MySqlParser.ST_NUMINTERIORRINGS = 1056;
MySqlParser.ST_NUMPOINTS = 1057;
MySqlParser.ST_OVERLAPS = 1058;
MySqlParser.ST_POINTFROMTEXT = 1059;
MySqlParser.ST_POINTFROMWKB = 1060;
MySqlParser.ST_POINTN = 1061;
MySqlParser.ST_POLYFROMTEXT = 1062;
MySqlParser.ST_POLYFROMWKB = 1063;
MySqlParser.ST_POLYGONFROMTEXT = 1064;
MySqlParser.ST_POLYGONFROMWKB = 1065;
MySqlParser.ST_SRID = 1066;
MySqlParser.ST_STARTPOINT = 1067;
MySqlParser.ST_SYMDIFFERENCE = 1068;
MySqlParser.ST_TOUCHES = 1069;
MySqlParser.ST_UNION = 1070;
MySqlParser.ST_WITHIN = 1071;
MySqlParser.ST_X = 1072;
MySqlParser.ST_Y = 1073;
MySqlParser.SUBDATE = 1074;
MySqlParser.SUBSTRING_INDEX = 1075;
MySqlParser.SUBTIME = 1076;
MySqlParser.SYSTEM_USER = 1077;
MySqlParser.TAN = 1078;
MySqlParser.TIMEDIFF = 1079;
MySqlParser.TIMESTAMPADD = 1080;
MySqlParser.TIMESTAMPDIFF = 1081;
MySqlParser.TIME_FORMAT = 1082;
MySqlParser.TIME_TO_SEC = 1083;
MySqlParser.TOUCHES = 1084;
MySqlParser.TO_BASE64 = 1085;
MySqlParser.TO_DAYS = 1086;
MySqlParser.TO_SECONDS = 1087;
MySqlParser.TP_CONNECTION_ADMIN = 1088;
MySqlParser.UCASE = 1089;
MySqlParser.UNCOMPRESS = 1090;
MySqlParser.UNCOMPRESSED_LENGTH = 1091;
MySqlParser.UNHEX = 1092;
MySqlParser.UNIX_TIMESTAMP = 1093;
MySqlParser.UPDATEXML = 1094;
MySqlParser.UPPER = 1095;
MySqlParser.UUID = 1096;
MySqlParser.UUID_SHORT = 1097;
MySqlParser.VALIDATE_PASSWORD_STRENGTH = 1098;
MySqlParser.VERSION = 1099;
MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1100;
MySqlParser.WEEKDAY = 1101;
MySqlParser.WEEKOFYEAR = 1102;
MySqlParser.WEIGHT_STRING = 1103;
MySqlParser.WITHIN = 1104;
MySqlParser.YEARWEEK = 1105;
MySqlParser.Y_FUNCTION = 1106;
MySqlParser.X_FUNCTION = 1107;
MySqlParser.VAR_ASSIGN = 1108;
MySqlParser.PLUS_ASSIGN = 1109;
MySqlParser.MINUS_ASSIGN = 1110;
MySqlParser.MULT_ASSIGN = 1111;
MySqlParser.DIV_ASSIGN = 1112;
MySqlParser.MOD_ASSIGN = 1113;
MySqlParser.AND_ASSIGN = 1114;
MySqlParser.XOR_ASSIGN = 1115;
MySqlParser.OR_ASSIGN = 1116;
MySqlParser.STAR = 1117;
MySqlParser.DIVIDE = 1118;
MySqlParser.MODULE = 1119;
MySqlParser.PLUS = 1120;
MySqlParser.MINUS = 1121;
MySqlParser.DIV = 1122;
MySqlParser.MOD = 1123;
MySqlParser.EQUAL_SYMBOL = 1124;
MySqlParser.GREATER_SYMBOL = 1125;
MySqlParser.LESS_SYMBOL = 1126;
MySqlParser.EXCLAMATION_SYMBOL = 1127;
MySqlParser.BIT_NOT_OP = 1128;
MySqlParser.BIT_OR_OP = 1129;
MySqlParser.BIT_AND_OP = 1130;
MySqlParser.BIT_XOR_OP = 1131;
MySqlParser.DOT = 1132;
MySqlParser.LR_BRACKET = 1133;
MySqlParser.RR_BRACKET = 1134;
MySqlParser.COMMA = 1135;
MySqlParser.SEMI = 1136;
MySqlParser.AT_SIGN = 1137;
MySqlParser.ZERO_DECIMAL = 1138;
MySqlParser.ONE_DECIMAL = 1139;
MySqlParser.TWO_DECIMAL = 1140;
MySqlParser.SINGLE_QUOTE_SYMB = 1141;
MySqlParser.DOUBLE_QUOTE_SYMB = 1142;
MySqlParser.REVERSE_QUOTE_SYMB = 1143;
MySqlParser.COLON_SYMB = 1144;
MySqlParser.CHARSET_REVERSE_QOUTE_STRING = 1145;
MySqlParser.FILESIZE_LITERAL = 1146;
MySqlParser.START_NATIONAL_STRING_LITERAL = 1147;
MySqlParser.STRING_LITERAL = 1148;
MySqlParser.DECIMAL_LITERAL = 1149;
MySqlParser.HEXADECIMAL_LITERAL = 1150;
MySqlParser.REAL_LITERAL = 1151;
MySqlParser.NULL_SPEC_LITERAL = 1152;
MySqlParser.BIT_STRING = 1153;
MySqlParser.STRING_CHARSET_NAME = 1154;
MySqlParser.DOT_ID = 1155;
MySqlParser.ID = 1156;
MySqlParser.REVERSE_QUOTE_ID = 1157;
MySqlParser.HOST_IP_ADDRESS = 1158;
MySqlParser.LOCAL_ID = 1159;
MySqlParser.GLOBAL_ID = 1160;
MySqlParser.ERROR_RECONGNIGION = 1161;

MySqlParser.RULE_root = 0;
MySqlParser.RULE_sqlStatements = 1;
MySqlParser.RULE_sqlStatement = 2;
MySqlParser.RULE_emptyStatement_ = 3;
MySqlParser.RULE_ddlStatement = 4;
MySqlParser.RULE_dmlStatement = 5;
MySqlParser.RULE_transactionStatement = 6;
MySqlParser.RULE_replicationStatement = 7;
MySqlParser.RULE_preparedStatement = 8;
MySqlParser.RULE_compoundStatement = 9;
MySqlParser.RULE_administrationStatement = 10;
MySqlParser.RULE_utilityStatement = 11;
MySqlParser.RULE_createDatabase = 12;
MySqlParser.RULE_createEvent = 13;
MySqlParser.RULE_createIndex = 14;
MySqlParser.RULE_createLogfileGroup = 15;
MySqlParser.RULE_createProcedure = 16;
MySqlParser.RULE_createFunction = 17;
MySqlParser.RULE_createRole = 18;
MySqlParser.RULE_createServer = 19;
MySqlParser.RULE_createTable = 20;
MySqlParser.RULE_createTablespaceInnodb = 21;
MySqlParser.RULE_createTablespaceNdb = 22;
MySqlParser.RULE_createTrigger = 23;
MySqlParser.RULE_withClause = 24;
MySqlParser.RULE_commonTableExpressions = 25;
MySqlParser.RULE_cteName = 26;
MySqlParser.RULE_cteColumnName = 27;
MySqlParser.RULE_createView = 28;
MySqlParser.RULE_createDatabaseOption = 29;
MySqlParser.RULE_charSet = 30;
MySqlParser.RULE_currentUserExpression = 31;
MySqlParser.RULE_ownerStatement = 32;
MySqlParser.RULE_scheduleExpression = 33;
MySqlParser.RULE_timestampValue = 34;
MySqlParser.RULE_intervalExpr = 35;
MySqlParser.RULE_intervalType = 36;
MySqlParser.RULE_enableType = 37;
MySqlParser.RULE_indexType = 38;
MySqlParser.RULE_indexOption = 39;
MySqlParser.RULE_procedureParameter = 40;
MySqlParser.RULE_functionParameter = 41;
MySqlParser.RULE_routineOption = 42;
MySqlParser.RULE_serverOption = 43;
MySqlParser.RULE_createDefinitions = 44;
MySqlParser.RULE_createDefinition = 45;
MySqlParser.RULE_columnDefinition = 46;
MySqlParser.RULE_columnConstraint = 47;
MySqlParser.RULE_tableConstraint = 48;
MySqlParser.RULE_referenceDefinition = 49;
MySqlParser.RULE_referenceAction = 50;
MySqlParser.RULE_referenceControlType = 51;
MySqlParser.RULE_indexColumnDefinition = 52;
MySqlParser.RULE_tableOption = 53;
MySqlParser.RULE_tableType = 54;
MySqlParser.RULE_tablespaceStorage = 55;
MySqlParser.RULE_partitionDefinitions = 56;
MySqlParser.RULE_partitionFunctionDefinition = 57;
MySqlParser.RULE_subpartitionFunctionDefinition = 58;
MySqlParser.RULE_partitionDefinition = 59;
MySqlParser.RULE_partitionDefinerAtom = 60;
MySqlParser.RULE_partitionDefinerVector = 61;
MySqlParser.RULE_subpartitionDefinition = 62;
MySqlParser.RULE_partitionOption = 63;
MySqlParser.RULE_alterDatabase = 64;
MySqlParser.RULE_alterEvent = 65;
MySqlParser.RULE_alterFunction = 66;
MySqlParser.RULE_alterInstance = 67;
MySqlParser.RULE_alterLogfileGroup = 68;
MySqlParser.RULE_alterProcedure = 69;
MySqlParser.RULE_alterServer = 70;
MySqlParser.RULE_alterTable = 71;
MySqlParser.RULE_alterTablespace = 72;
MySqlParser.RULE_alterView = 73;
MySqlParser.RULE_alterSpecification = 74;
MySqlParser.RULE_alterPartitionSpecification = 75;
MySqlParser.RULE_dropDatabase = 76;
MySqlParser.RULE_dropEvent = 77;
MySqlParser.RULE_dropIndex = 78;
MySqlParser.RULE_dropLogfileGroup = 79;
MySqlParser.RULE_dropProcedure = 80;
MySqlParser.RULE_dropFunction = 81;
MySqlParser.RULE_dropServer = 82;
MySqlParser.RULE_dropTable = 83;
MySqlParser.RULE_dropTablespace = 84;
MySqlParser.RULE_dropTrigger = 85;
MySqlParser.RULE_dropView = 86;
MySqlParser.RULE_dropRole = 87;
MySqlParser.RULE_setRole = 88;
MySqlParser.RULE_renameTable = 89;
MySqlParser.RULE_renameTableClause = 90;
MySqlParser.RULE_truncateTable = 91;
MySqlParser.RULE_callStatement = 92;
MySqlParser.RULE_deleteStatement = 93;
MySqlParser.RULE_doStatement = 94;
MySqlParser.RULE_handlerStatement = 95;
MySqlParser.RULE_insertStatement = 96;
MySqlParser.RULE_loadDataStatement = 97;
MySqlParser.RULE_loadXmlStatement = 98;
MySqlParser.RULE_replaceStatement = 99;
MySqlParser.RULE_selectStatement = 100;
MySqlParser.RULE_updateStatement = 101;
MySqlParser.RULE_valuesStatement = 102;
MySqlParser.RULE_insertStatementValue = 103;
MySqlParser.RULE_updatedElement = 104;
MySqlParser.RULE_assignmentField = 105;
MySqlParser.RULE_lockClause = 106;
MySqlParser.RULE_singleDeleteStatement = 107;
MySqlParser.RULE_multipleDeleteStatement = 108;
MySqlParser.RULE_handlerOpenStatement = 109;
MySqlParser.RULE_handlerReadIndexStatement = 110;
MySqlParser.RULE_handlerReadStatement = 111;
MySqlParser.RULE_handlerCloseStatement = 112;
MySqlParser.RULE_singleUpdateStatement = 113;
MySqlParser.RULE_multipleUpdateStatement = 114;
MySqlParser.RULE_orderByClause = 115;
MySqlParser.RULE_orderByExpression = 116;
MySqlParser.RULE_tableSources = 117;
MySqlParser.RULE_tableSource = 118;
MySqlParser.RULE_tableSourceItem = 119;
MySqlParser.RULE_indexHint = 120;
MySqlParser.RULE_indexHintType = 121;
MySqlParser.RULE_joinPart = 122;
MySqlParser.RULE_joinSpec = 123;
MySqlParser.RULE_queryExpression = 124;
MySqlParser.RULE_queryExpressionNointo = 125;
MySqlParser.RULE_querySpecification = 126;
MySqlParser.RULE_querySpecificationNointo = 127;
MySqlParser.RULE_unionParenthesis = 128;
MySqlParser.RULE_unionStatement = 129;
MySqlParser.RULE_lateralStatement = 130;
MySqlParser.RULE_jsonTable = 131;
MySqlParser.RULE_jsonColumnList = 132;
MySqlParser.RULE_jsonColumn = 133;
MySqlParser.RULE_jsonOnEmpty = 134;
MySqlParser.RULE_jsonOnError = 135;
MySqlParser.RULE_selectSpec = 136;
MySqlParser.RULE_selectElements = 137;
MySqlParser.RULE_selectElement = 138;
MySqlParser.RULE_selectIntoExpression = 139;
MySqlParser.RULE_selectFieldsInto = 140;
MySqlParser.RULE_selectLinesInto = 141;
MySqlParser.RULE_fromClause = 142;
MySqlParser.RULE_groupByClause = 143;
MySqlParser.RULE_havingClause = 144;
MySqlParser.RULE_windowClause = 145;
MySqlParser.RULE_groupByItem = 146;
MySqlParser.RULE_limitClause = 147;
MySqlParser.RULE_limitClauseAtom = 148;
MySqlParser.RULE_startTransaction = 149;
MySqlParser.RULE_beginWork = 150;
MySqlParser.RULE_commitWork = 151;
MySqlParser.RULE_rollbackWork = 152;
MySqlParser.RULE_savepointStatement = 153;
MySqlParser.RULE_rollbackStatement = 154;
MySqlParser.RULE_releaseStatement = 155;
MySqlParser.RULE_lockTables = 156;
MySqlParser.RULE_unlockTables = 157;
MySqlParser.RULE_setAutocommitStatement = 158;
MySqlParser.RULE_setTransactionStatement = 159;
MySqlParser.RULE_transactionMode = 160;
MySqlParser.RULE_lockTableElement = 161;
MySqlParser.RULE_lockAction = 162;
MySqlParser.RULE_transactionOption = 163;
MySqlParser.RULE_transactionLevel = 164;
MySqlParser.RULE_changeMaster = 165;
MySqlParser.RULE_changeReplicationFilter = 166;
MySqlParser.RULE_purgeBinaryLogs = 167;
MySqlParser.RULE_resetMaster = 168;
MySqlParser.RULE_resetSlave = 169;
MySqlParser.RULE_startSlave = 170;
MySqlParser.RULE_stopSlave = 171;
MySqlParser.RULE_startGroupReplication = 172;
MySqlParser.RULE_stopGroupReplication = 173;
MySqlParser.RULE_masterOption = 174;
MySqlParser.RULE_stringMasterOption = 175;
MySqlParser.RULE_decimalMasterOption = 176;
MySqlParser.RULE_boolMasterOption = 177;
MySqlParser.RULE_channelOption = 178;
MySqlParser.RULE_replicationFilter = 179;
MySqlParser.RULE_tablePair = 180;
MySqlParser.RULE_threadType = 181;
MySqlParser.RULE_untilOption = 182;
MySqlParser.RULE_connectionOption = 183;
MySqlParser.RULE_gtuidSet = 184;
MySqlParser.RULE_xaStartTransaction = 185;
MySqlParser.RULE_xaEndTransaction = 186;
MySqlParser.RULE_xaPrepareStatement = 187;
MySqlParser.RULE_xaCommitWork = 188;
MySqlParser.RULE_xaRollbackWork = 189;
MySqlParser.RULE_xaRecoverWork = 190;
MySqlParser.RULE_prepareStatement = 191;
MySqlParser.RULE_executeStatement = 192;
MySqlParser.RULE_deallocatePrepare = 193;
MySqlParser.RULE_routineBody = 194;
MySqlParser.RULE_blockStatement = 195;
MySqlParser.RULE_caseStatement = 196;
MySqlParser.RULE_ifStatement = 197;
MySqlParser.RULE_iterateStatement = 198;
MySqlParser.RULE_leaveStatement = 199;
MySqlParser.RULE_loopStatement = 200;
MySqlParser.RULE_repeatStatement = 201;
MySqlParser.RULE_returnStatement = 202;
MySqlParser.RULE_whileStatement = 203;
MySqlParser.RULE_cursorStatement = 204;
MySqlParser.RULE_declareVariable = 205;
MySqlParser.RULE_declareCondition = 206;
MySqlParser.RULE_declareCursor = 207;
MySqlParser.RULE_declareHandler = 208;
MySqlParser.RULE_handlerConditionValue = 209;
MySqlParser.RULE_procedureSqlStatement = 210;
MySqlParser.RULE_caseAlternative = 211;
MySqlParser.RULE_elifAlternative = 212;
MySqlParser.RULE_alterUser = 213;
MySqlParser.RULE_createUser = 214;
MySqlParser.RULE_dropUser = 215;
MySqlParser.RULE_grantStatement = 216;
MySqlParser.RULE_roleOption = 217;
MySqlParser.RULE_grantProxy = 218;
MySqlParser.RULE_renameUser = 219;
MySqlParser.RULE_revokeStatement = 220;
MySqlParser.RULE_revokeProxy = 221;
MySqlParser.RULE_setPasswordStatement = 222;
MySqlParser.RULE_userSpecification = 223;
MySqlParser.RULE_userAuthOption = 224;
MySqlParser.RULE_authOptionClause = 225;
MySqlParser.RULE_authenticationRule = 226;
MySqlParser.RULE_tlsOption = 227;
MySqlParser.RULE_userResourceOption = 228;
MySqlParser.RULE_userPasswordOption = 229;
MySqlParser.RULE_userLockOption = 230;
MySqlParser.RULE_privelegeClause = 231;
MySqlParser.RULE_privilege = 232;
MySqlParser.RULE_privilegeLevel = 233;
MySqlParser.RULE_renameUserClause = 234;
MySqlParser.RULE_analyzeTable = 235;
MySqlParser.RULE_checkTable = 236;
MySqlParser.RULE_checksumTable = 237;
MySqlParser.RULE_optimizeTable = 238;
MySqlParser.RULE_repairTable = 239;
MySqlParser.RULE_checkTableOption = 240;
MySqlParser.RULE_createUdfunction = 241;
MySqlParser.RULE_installPlugin = 242;
MySqlParser.RULE_uninstallPlugin = 243;
MySqlParser.RULE_setStatement = 244;
MySqlParser.RULE_showStatement = 245;
MySqlParser.RULE_variableClause = 246;
MySqlParser.RULE_showCommonEntity = 247;
MySqlParser.RULE_showFilter = 248;
MySqlParser.RULE_showGlobalInfoClause = 249;
MySqlParser.RULE_showSchemaEntity = 250;
MySqlParser.RULE_showProfileType = 251;
MySqlParser.RULE_binlogStatement = 252;
MySqlParser.RULE_cacheIndexStatement = 253;
MySqlParser.RULE_flushStatement = 254;
MySqlParser.RULE_killStatement = 255;
MySqlParser.RULE_loadIndexIntoCache = 256;
MySqlParser.RULE_resetStatement = 257;
MySqlParser.RULE_shutdownStatement = 258;
MySqlParser.RULE_tableIndexes = 259;
MySqlParser.RULE_flushOption = 260;
MySqlParser.RULE_flushTableOption = 261;
MySqlParser.RULE_loadedTableIndexes = 262;
MySqlParser.RULE_simpleDescribeStatement = 263;
MySqlParser.RULE_fullDescribeStatement = 264;
MySqlParser.RULE_helpStatement = 265;
MySqlParser.RULE_useStatement = 266;
MySqlParser.RULE_signalStatement = 267;
MySqlParser.RULE_resignalStatement = 268;
MySqlParser.RULE_signalConditionInformation = 269;
MySqlParser.RULE_withStatement = 270;
MySqlParser.RULE_tableStatement = 271;
MySqlParser.RULE_diagnosticsStatement = 272;
MySqlParser.RULE_diagnosticsConditionInformationName = 273;
MySqlParser.RULE_describeObjectClause = 274;
MySqlParser.RULE_fullId = 275;
MySqlParser.RULE_tableName = 276;
MySqlParser.RULE_roleName = 277;
MySqlParser.RULE_fullColumnName = 278;
MySqlParser.RULE_indexColumnName = 279;
MySqlParser.RULE_simpleUserName = 280;
MySqlParser.RULE_hostName = 281;
MySqlParser.RULE_userName = 282;
MySqlParser.RULE_mysqlVariable = 283;
MySqlParser.RULE_charsetName = 284;
MySqlParser.RULE_collationName = 285;
MySqlParser.RULE_engineName = 286;
MySqlParser.RULE_engineNameBase = 287;
MySqlParser.RULE_uuidSet = 288;
MySqlParser.RULE_xid = 289;
MySqlParser.RULE_xuidStringId = 290;
MySqlParser.RULE_authPlugin = 291;
MySqlParser.RULE_uid = 292;
MySqlParser.RULE_simpleId = 293;
MySqlParser.RULE_dottedId = 294;
MySqlParser.RULE_decimalLiteral = 295;
MySqlParser.RULE_fileSizeLiteral = 296;
MySqlParser.RULE_stringLiteral = 297;
MySqlParser.RULE_booleanLiteral = 298;
MySqlParser.RULE_hexadecimalLiteral = 299;
MySqlParser.RULE_nullNotnull = 300;
MySqlParser.RULE_constant = 301;
MySqlParser.RULE_dataType = 302;
MySqlParser.RULE_collectionOptions = 303;
MySqlParser.RULE_convertedDataType = 304;
MySqlParser.RULE_lengthOneDimension = 305;
MySqlParser.RULE_lengthTwoDimension = 306;
MySqlParser.RULE_lengthTwoOptionalDimension = 307;
MySqlParser.RULE_uidList = 308;
MySqlParser.RULE_fullColumnNameList = 309;
MySqlParser.RULE_tables = 310;
MySqlParser.RULE_indexColumnNames = 311;
MySqlParser.RULE_expressions = 312;
MySqlParser.RULE_expressionsWithDefaults = 313;
MySqlParser.RULE_constants = 314;
MySqlParser.RULE_simpleStrings = 315;
MySqlParser.RULE_userVariables = 316;
MySqlParser.RULE_defaultValue = 317;
MySqlParser.RULE_currentTimestamp = 318;
MySqlParser.RULE_expressionOrDefault = 319;
MySqlParser.RULE_ifExists = 320;
MySqlParser.RULE_ifNotExists = 321;
MySqlParser.RULE_orReplace = 322;
MySqlParser.RULE_waitNowaitClause = 323;
MySqlParser.RULE_functionCall = 324;
MySqlParser.RULE_specificFunction = 325;
MySqlParser.RULE_caseFuncAlternative = 326;
MySqlParser.RULE_levelsInWeightString = 327;
MySqlParser.RULE_levelInWeightListElement = 328;
MySqlParser.RULE_aggregateWindowedFunction = 329;
MySqlParser.RULE_nonAggregateWindowedFunction = 330;
MySqlParser.RULE_overClause = 331;
MySqlParser.RULE_windowSpec = 332;
MySqlParser.RULE_windowName = 333;
MySqlParser.RULE_frameClause = 334;
MySqlParser.RULE_frameUnits = 335;
MySqlParser.RULE_frameExtent = 336;
MySqlParser.RULE_frameBetween = 337;
MySqlParser.RULE_frameRange = 338;
MySqlParser.RULE_partitionClause = 339;
MySqlParser.RULE_scalarFunctionName = 340;
MySqlParser.RULE_passwordFunctionClause = 341;
MySqlParser.RULE_functionArgs = 342;
MySqlParser.RULE_functionArg = 343;
MySqlParser.RULE_expression = 344;
MySqlParser.RULE_predicate = 345;
MySqlParser.RULE_expressionAtom = 346;
MySqlParser.RULE_unaryOperator = 347;
MySqlParser.RULE_comparisonOperator = 348;
MySqlParser.RULE_logicalOperator = 349;
MySqlParser.RULE_bitOperator = 350;
MySqlParser.RULE_multOperator = 351;
MySqlParser.RULE_addOperator = 352;
MySqlParser.RULE_jsonOperator = 353;
MySqlParser.RULE_charsetNameBase = 354;
MySqlParser.RULE_transactionLevelBase = 355;
MySqlParser.RULE_privilegesBase = 356;
MySqlParser.RULE_intervalTypeBase = 357;
MySqlParser.RULE_dataTypeBase = 358;
MySqlParser.RULE_keywordsCanBeId = 359;
MySqlParser.RULE_functionNameBase = 360;

class RootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_root;
    }

	EOF() {
	    return this.getToken(MySqlParser.EOF, 0);
	};

	sqlStatements() {
	    return this.getTypedRuleContext(SqlStatementsContext,0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.MINUS);
	    } else {
	        return this.getToken(MySqlParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoot(this);
		}
	}


}



class SqlStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_sqlStatements;
    }

	sqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(SqlStatementContext,i);
	    }
	};

	emptyStatement_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EmptyStatement_Context);
	    } else {
	        return this.getTypedRuleContext(EmptyStatement_Context,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.MINUS);
	    } else {
	        return this.getToken(MySqlParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlStatements(this);
		}
	}


}



class SqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_sqlStatement;
    }

	ddlStatement() {
	    return this.getTypedRuleContext(DdlStatementContext,0);
	};

	dmlStatement() {
	    return this.getTypedRuleContext(DmlStatementContext,0);
	};

	transactionStatement() {
	    return this.getTypedRuleContext(TransactionStatementContext,0);
	};

	replicationStatement() {
	    return this.getTypedRuleContext(ReplicationStatementContext,0);
	};

	preparedStatement() {
	    return this.getTypedRuleContext(PreparedStatementContext,0);
	};

	administrationStatement() {
	    return this.getTypedRuleContext(AdministrationStatementContext,0);
	};

	utilityStatement() {
	    return this.getTypedRuleContext(UtilityStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlStatement(this);
		}
	}


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_emptyStatement_;
    }

	SEMI() {
	    return this.getToken(MySqlParser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEmptyStatement_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEmptyStatement_(this);
		}
	}


}



class DdlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ddlStatement;
    }

	createDatabase() {
	    return this.getTypedRuleContext(CreateDatabaseContext,0);
	};

	createEvent() {
	    return this.getTypedRuleContext(CreateEventContext,0);
	};

	createIndex() {
	    return this.getTypedRuleContext(CreateIndexContext,0);
	};

	createLogfileGroup() {
	    return this.getTypedRuleContext(CreateLogfileGroupContext,0);
	};

	createProcedure() {
	    return this.getTypedRuleContext(CreateProcedureContext,0);
	};

	createFunction() {
	    return this.getTypedRuleContext(CreateFunctionContext,0);
	};

	createServer() {
	    return this.getTypedRuleContext(CreateServerContext,0);
	};

	createTable() {
	    return this.getTypedRuleContext(CreateTableContext,0);
	};

	createTablespaceInnodb() {
	    return this.getTypedRuleContext(CreateTablespaceInnodbContext,0);
	};

	createTablespaceNdb() {
	    return this.getTypedRuleContext(CreateTablespaceNdbContext,0);
	};

	createTrigger() {
	    return this.getTypedRuleContext(CreateTriggerContext,0);
	};

	createView() {
	    return this.getTypedRuleContext(CreateViewContext,0);
	};

	createRole() {
	    return this.getTypedRuleContext(CreateRoleContext,0);
	};

	alterDatabase() {
	    return this.getTypedRuleContext(AlterDatabaseContext,0);
	};

	alterEvent() {
	    return this.getTypedRuleContext(AlterEventContext,0);
	};

	alterFunction() {
	    return this.getTypedRuleContext(AlterFunctionContext,0);
	};

	alterInstance() {
	    return this.getTypedRuleContext(AlterInstanceContext,0);
	};

	alterLogfileGroup() {
	    return this.getTypedRuleContext(AlterLogfileGroupContext,0);
	};

	alterProcedure() {
	    return this.getTypedRuleContext(AlterProcedureContext,0);
	};

	alterServer() {
	    return this.getTypedRuleContext(AlterServerContext,0);
	};

	alterTable() {
	    return this.getTypedRuleContext(AlterTableContext,0);
	};

	alterTablespace() {
	    return this.getTypedRuleContext(AlterTablespaceContext,0);
	};

	alterView() {
	    return this.getTypedRuleContext(AlterViewContext,0);
	};

	dropDatabase() {
	    return this.getTypedRuleContext(DropDatabaseContext,0);
	};

	dropEvent() {
	    return this.getTypedRuleContext(DropEventContext,0);
	};

	dropIndex() {
	    return this.getTypedRuleContext(DropIndexContext,0);
	};

	dropLogfileGroup() {
	    return this.getTypedRuleContext(DropLogfileGroupContext,0);
	};

	dropProcedure() {
	    return this.getTypedRuleContext(DropProcedureContext,0);
	};

	dropFunction() {
	    return this.getTypedRuleContext(DropFunctionContext,0);
	};

	dropServer() {
	    return this.getTypedRuleContext(DropServerContext,0);
	};

	dropTable() {
	    return this.getTypedRuleContext(DropTableContext,0);
	};

	dropTablespace() {
	    return this.getTypedRuleContext(DropTablespaceContext,0);
	};

	dropTrigger() {
	    return this.getTypedRuleContext(DropTriggerContext,0);
	};

	dropView() {
	    return this.getTypedRuleContext(DropViewContext,0);
	};

	dropRole() {
	    return this.getTypedRuleContext(DropRoleContext,0);
	};

	setRole() {
	    return this.getTypedRuleContext(SetRoleContext,0);
	};

	renameTable() {
	    return this.getTypedRuleContext(RenameTableContext,0);
	};

	truncateTable() {
	    return this.getTypedRuleContext(TruncateTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDdlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDdlStatement(this);
		}
	}


}



class DmlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dmlStatement;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	replaceStatement() {
	    return this.getTypedRuleContext(ReplaceStatementContext,0);
	};

	callStatement() {
	    return this.getTypedRuleContext(CallStatementContext,0);
	};

	loadDataStatement() {
	    return this.getTypedRuleContext(LoadDataStatementContext,0);
	};

	loadXmlStatement() {
	    return this.getTypedRuleContext(LoadXmlStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	handlerStatement() {
	    return this.getTypedRuleContext(HandlerStatementContext,0);
	};

	valuesStatement() {
	    return this.getTypedRuleContext(ValuesStatementContext,0);
	};

	withStatement() {
	    return this.getTypedRuleContext(WithStatementContext,0);
	};

	tableStatement() {
	    return this.getTypedRuleContext(TableStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDmlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDmlStatement(this);
		}
	}


}



class TransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionStatement;
    }

	startTransaction() {
	    return this.getTypedRuleContext(StartTransactionContext,0);
	};

	beginWork() {
	    return this.getTypedRuleContext(BeginWorkContext,0);
	};

	commitWork() {
	    return this.getTypedRuleContext(CommitWorkContext,0);
	};

	rollbackWork() {
	    return this.getTypedRuleContext(RollbackWorkContext,0);
	};

	savepointStatement() {
	    return this.getTypedRuleContext(SavepointStatementContext,0);
	};

	rollbackStatement() {
	    return this.getTypedRuleContext(RollbackStatementContext,0);
	};

	releaseStatement() {
	    return this.getTypedRuleContext(ReleaseStatementContext,0);
	};

	lockTables() {
	    return this.getTypedRuleContext(LockTablesContext,0);
	};

	unlockTables() {
	    return this.getTypedRuleContext(UnlockTablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionStatement(this);
		}
	}


}



class ReplicationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replicationStatement;
    }

	changeMaster() {
	    return this.getTypedRuleContext(ChangeMasterContext,0);
	};

	changeReplicationFilter() {
	    return this.getTypedRuleContext(ChangeReplicationFilterContext,0);
	};

	purgeBinaryLogs() {
	    return this.getTypedRuleContext(PurgeBinaryLogsContext,0);
	};

	resetMaster() {
	    return this.getTypedRuleContext(ResetMasterContext,0);
	};

	resetSlave() {
	    return this.getTypedRuleContext(ResetSlaveContext,0);
	};

	startSlave() {
	    return this.getTypedRuleContext(StartSlaveContext,0);
	};

	stopSlave() {
	    return this.getTypedRuleContext(StopSlaveContext,0);
	};

	startGroupReplication() {
	    return this.getTypedRuleContext(StartGroupReplicationContext,0);
	};

	stopGroupReplication() {
	    return this.getTypedRuleContext(StopGroupReplicationContext,0);
	};

	xaStartTransaction() {
	    return this.getTypedRuleContext(XaStartTransactionContext,0);
	};

	xaEndTransaction() {
	    return this.getTypedRuleContext(XaEndTransactionContext,0);
	};

	xaPrepareStatement() {
	    return this.getTypedRuleContext(XaPrepareStatementContext,0);
	};

	xaCommitWork() {
	    return this.getTypedRuleContext(XaCommitWorkContext,0);
	};

	xaRollbackWork() {
	    return this.getTypedRuleContext(XaRollbackWorkContext,0);
	};

	xaRecoverWork() {
	    return this.getTypedRuleContext(XaRecoverWorkContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReplicationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReplicationStatement(this);
		}
	}


}



class PreparedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_preparedStatement;
    }

	prepareStatement() {
	    return this.getTypedRuleContext(PrepareStatementContext,0);
	};

	executeStatement() {
	    return this.getTypedRuleContext(ExecuteStatementContext,0);
	};

	deallocatePrepare() {
	    return this.getTypedRuleContext(DeallocatePrepareContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPreparedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPreparedStatement(this);
		}
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_compoundStatement;
    }

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	caseStatement() {
	    return this.getTypedRuleContext(CaseStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	leaveStatement() {
	    return this.getTypedRuleContext(LeaveStatementContext,0);
	};

	loopStatement() {
	    return this.getTypedRuleContext(LoopStatementContext,0);
	};

	repeatStatement() {
	    return this.getTypedRuleContext(RepeatStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	iterateStatement() {
	    return this.getTypedRuleContext(IterateStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	cursorStatement() {
	    return this.getTypedRuleContext(CursorStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCompoundStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCompoundStatement(this);
		}
	}


}



class AdministrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_administrationStatement;
    }

	alterUser() {
	    return this.getTypedRuleContext(AlterUserContext,0);
	};

	createUser() {
	    return this.getTypedRuleContext(CreateUserContext,0);
	};

	dropUser() {
	    return this.getTypedRuleContext(DropUserContext,0);
	};

	grantStatement() {
	    return this.getTypedRuleContext(GrantStatementContext,0);
	};

	grantProxy() {
	    return this.getTypedRuleContext(GrantProxyContext,0);
	};

	renameUser() {
	    return this.getTypedRuleContext(RenameUserContext,0);
	};

	revokeStatement() {
	    return this.getTypedRuleContext(RevokeStatementContext,0);
	};

	revokeProxy() {
	    return this.getTypedRuleContext(RevokeProxyContext,0);
	};

	analyzeTable() {
	    return this.getTypedRuleContext(AnalyzeTableContext,0);
	};

	checkTable() {
	    return this.getTypedRuleContext(CheckTableContext,0);
	};

	checksumTable() {
	    return this.getTypedRuleContext(ChecksumTableContext,0);
	};

	optimizeTable() {
	    return this.getTypedRuleContext(OptimizeTableContext,0);
	};

	repairTable() {
	    return this.getTypedRuleContext(RepairTableContext,0);
	};

	createUdfunction() {
	    return this.getTypedRuleContext(CreateUdfunctionContext,0);
	};

	installPlugin() {
	    return this.getTypedRuleContext(InstallPluginContext,0);
	};

	uninstallPlugin() {
	    return this.getTypedRuleContext(UninstallPluginContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	showStatement() {
	    return this.getTypedRuleContext(ShowStatementContext,0);
	};

	binlogStatement() {
	    return this.getTypedRuleContext(BinlogStatementContext,0);
	};

	cacheIndexStatement() {
	    return this.getTypedRuleContext(CacheIndexStatementContext,0);
	};

	flushStatement() {
	    return this.getTypedRuleContext(FlushStatementContext,0);
	};

	killStatement() {
	    return this.getTypedRuleContext(KillStatementContext,0);
	};

	loadIndexIntoCache() {
	    return this.getTypedRuleContext(LoadIndexIntoCacheContext,0);
	};

	resetStatement() {
	    return this.getTypedRuleContext(ResetStatementContext,0);
	};

	shutdownStatement() {
	    return this.getTypedRuleContext(ShutdownStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAdministrationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAdministrationStatement(this);
		}
	}


}



class UtilityStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_utilityStatement;
    }

	simpleDescribeStatement() {
	    return this.getTypedRuleContext(SimpleDescribeStatementContext,0);
	};

	fullDescribeStatement() {
	    return this.getTypedRuleContext(FullDescribeStatementContext,0);
	};

	helpStatement() {
	    return this.getTypedRuleContext(HelpStatementContext,0);
	};

	useStatement() {
	    return this.getTypedRuleContext(UseStatementContext,0);
	};

	signalStatement() {
	    return this.getTypedRuleContext(SignalStatementContext,0);
	};

	resignalStatement() {
	    return this.getTypedRuleContext(ResignalStatementContext,0);
	};

	diagnosticsStatement() {
	    return this.getTypedRuleContext(DiagnosticsStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUtilityStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUtilityStatement(this);
		}
	}


}



class CreateDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDatabase;
        this.dbFormat = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	createDatabaseOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDatabase(this);
		}
	}


}



class CreateEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createEvent;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	scheduleExpression() {
	    return this.getTypedRuleContext(ScheduleExpressionContext,0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	enableType() {
	    return this.getTypedRuleContext(EnableTypeContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateEvent(this);
		}
	}


}



class CreateIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createIndex;
        this.intimeAction = null;
        this.indexCategory = null;
        this.algType = null;
        this.lockType = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	ALGORITHM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ALGORITHM);
	    } else {
	        return this.getToken(MySqlParser.ALGORITHM, i);
	    }
	};


	LOCK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOCK);
	    } else {
	        return this.getToken(MySqlParser.LOCK, i);
	    }
	};


	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	INPLACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.INPLACE);
	    } else {
	        return this.getToken(MySqlParser.INPLACE, i);
	    }
	};


	COPY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COPY);
	    } else {
	        return this.getToken(MySqlParser.COPY, i);
	    }
	};


	NONE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NONE);
	    } else {
	        return this.getToken(MySqlParser.NONE, i);
	    }
	};


	SHARED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SHARED);
	    } else {
	        return this.getToken(MySqlParser.SHARED, i);
	    }
	};


	EXCLUSIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EXCLUSIVE);
	    } else {
	        return this.getToken(MySqlParser.EXCLUSIVE, i);
	    }
	};


	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateIndex(this);
		}
	}


}



class CreateLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createLogfileGroup;
        this.undoFile = null;
        this.initSize = null;
        this.undoSize = null;
        this.redoSize = null;
        this.comment = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	UNDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
	};

	REDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileSizeLiteralContext);
	    } else {
	        return this.getTypedRuleContext(FileSizeLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateLogfileGroup(this);
		}
	}


}



class CreateProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createProcedure;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	procedureParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureParameterContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateProcedure(this);
		}
	}


}



class CreateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createFunction;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	AGGREGATE() {
	    return this.getToken(MySqlParser.AGGREGATE, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	functionParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParameterContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateFunction(this);
		}
	}


}



class CreateRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createRole;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	roleName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoleNameContext);
	    } else {
	        return this.getTypedRuleContext(RoleNameContext,i);
	    }
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateRole(this);
		}
	}


}



class CreateServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createServer;
        this.wrapperName = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	WRAPPER() {
	    return this.getToken(MySqlParser.WRAPPER, 0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	serverOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ServerOptionContext);
	    } else {
	        return this.getTypedRuleContext(ServerOptionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	MYSQL() {
	    return this.getToken(MySqlParser.MYSQL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateServer(this);
		}
	}


}



class CreateTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTable;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CopyCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        this.parenthesisTable = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCopyCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCopyCreateTable(this);
		}
	}


}

MySqlParser.CopyCreateTableContext = CopyCreateTableContext;

class ColumnCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	createDefinitions() {
	    return this.getTypedRuleContext(CreateDefinitionsContext,0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	tableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionContext,i);
	    }
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnCreateTable(this);
		}
	}


}

MySqlParser.ColumnCreateTableContext = ColumnCreateTableContext;

class QueryCreateTableContext extends CreateTableContext {

    constructor(parser, ctx) {
        super(parser);
        this.keyViolate = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	createDefinitions() {
	    return this.getTypedRuleContext(CreateDefinitionsContext,0);
	};

	tableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionContext,i);
	    }
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryCreateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryCreateTable(this);
		}
	}


}

MySqlParser.QueryCreateTableContext = QueryCreateTableContext;

class CreateTablespaceInnodbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTablespaceInnodb;
        this.datafile = null;
        this.fileBlockSize = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	FILE_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTablespaceInnodb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTablespaceInnodb(this);
		}
	}


}



class CreateTablespaceNdbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTablespaceNdb;
        this.datafile = null;
        this.extentSize = null;
        this.initialSize = null;
        this.autoextendSize = null;
        this.maxSize = null;
        this.comment = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	EXTENT_SIZE() {
	    return this.getToken(MySqlParser.EXTENT_SIZE, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	AUTOEXTEND_SIZE() {
	    return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	};

	MAX_SIZE() {
	    return this.getToken(MySqlParser.MAX_SIZE, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FileSizeLiteralContext);
	    } else {
	        return this.getTypedRuleContext(FileSizeLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTablespaceNdb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTablespaceNdb(this);
		}
	}


}



class CreateTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createTrigger;
        this.thisTrigger = null;
        this.triggerTime = null;
        this.triggerEvent = null;
        this.triggerPlace = null;
        this.otherTrigger = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	EACH() {
	    return this.getToken(MySqlParser.EACH, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	BEFORE() {
	    return this.getToken(MySqlParser.BEFORE, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	FOLLOWS() {
	    return this.getToken(MySqlParser.FOLLOWS, 0);
	};

	PRECEDES() {
	    return this.getToken(MySqlParser.PRECEDES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateTrigger(this);
		}
	}


}



class WithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_withClause;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	commonTableExpressions() {
	    return this.getTypedRuleContext(CommonTableExpressionsContext,0);
	};

	RECURSIVE() {
	    return this.getToken(MySqlParser.RECURSIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWithClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWithClause(this);
		}
	}


}



class CommonTableExpressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_commonTableExpressions;
    }

	cteName() {
	    return this.getTypedRuleContext(CteNameContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	dmlStatement() {
	    return this.getTypedRuleContext(DmlStatementContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	cteColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CteColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(CteColumnNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	commonTableExpressions() {
	    return this.getTypedRuleContext(CommonTableExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCommonTableExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCommonTableExpressions(this);
		}
	}


}



class CteNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cteName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCteName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCteName(this);
		}
	}


}



class CteColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cteColumnName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCteColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCteColumnName(this);
		}
	}


}



class CreateViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createView;
        this.algType = null;
        this.secContext = null;
        this.checkOption = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	orReplace() {
	    return this.getTypedRuleContext(OrReplaceContext,0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateView(this);
		}
	}


}



class CreateDatabaseOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDatabaseOption;
    }

	charSet() {
	    return this.getTypedRuleContext(CharSetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	ENCRYPTION() {
	    return this.getToken(MySqlParser.ENCRYPTION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDatabaseOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDatabaseOption(this);
		}
	}


}



class CharSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_charSet;
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharSet(this);
		}
	}


}



class CurrentUserExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_currentUserExpression;
    }

	CURRENT_USER() {
	    return this.getToken(MySqlParser.CURRENT_USER, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCurrentUserExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCurrentUserExpression(this);
		}
	}


}



class OwnerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ownerStatement;
    }

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	currentUserExpression() {
	    return this.getTypedRuleContext(CurrentUserExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOwnerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOwnerStatement(this);
		}
	}


}



class ScheduleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_scheduleExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PreciseScheduleContext extends ScheduleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AT() {
	    return this.getToken(MySqlParser.AT, 0);
	};

	timestampValue() {
	    return this.getTypedRuleContext(TimestampValueContext,0);
	};

	intervalExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalExprContext);
	    } else {
	        return this.getTypedRuleContext(IntervalExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPreciseSchedule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPreciseSchedule(this);
		}
	}


}

MySqlParser.PreciseScheduleContext = PreciseScheduleContext;

class IntervalScheduleContext extends ScheduleExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.startTimestamp = null;;
        this._intervalExpr = null;;
        this.startIntervals = [];;
        this.endTimestamp = null;;
        this.endIntervals = [];;
        super.copyFrom(ctx);
    }

	EVERY() {
	    return this.getToken(MySqlParser.EVERY, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	STARTS() {
	    return this.getToken(MySqlParser.STARTS, 0);
	};

	ENDS() {
	    return this.getToken(MySqlParser.ENDS, 0);
	};

	timestampValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimestampValueContext);
	    } else {
	        return this.getTypedRuleContext(TimestampValueContext,i);
	    }
	};

	intervalExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IntervalExprContext);
	    } else {
	        return this.getTypedRuleContext(IntervalExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalSchedule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalSchedule(this);
		}
	}


}

MySqlParser.IntervalScheduleContext = IntervalScheduleContext;

class TimestampValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_timestampValue;
    }

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTimestampValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTimestampValue(this);
		}
	}


}



class IntervalExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalExpr;
    }

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalExpr(this);
		}
	}


}



class IntervalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalType;
    }

	intervalTypeBase() {
	    return this.getTypedRuleContext(IntervalTypeBaseContext,0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	YEAR_MONTH() {
	    return this.getToken(MySqlParser.YEAR_MONTH, 0);
	};

	DAY_HOUR() {
	    return this.getToken(MySqlParser.DAY_HOUR, 0);
	};

	DAY_MINUTE() {
	    return this.getToken(MySqlParser.DAY_MINUTE, 0);
	};

	DAY_SECOND() {
	    return this.getToken(MySqlParser.DAY_SECOND, 0);
	};

	HOUR_MINUTE() {
	    return this.getToken(MySqlParser.HOUR_MINUTE, 0);
	};

	HOUR_SECOND() {
	    return this.getToken(MySqlParser.HOUR_SECOND, 0);
	};

	MINUTE_SECOND() {
	    return this.getToken(MySqlParser.MINUTE_SECOND, 0);
	};

	SECOND_MICROSECOND() {
	    return this.getToken(MySqlParser.SECOND_MICROSECOND, 0);
	};

	MINUTE_MICROSECOND() {
	    return this.getToken(MySqlParser.MINUTE_MICROSECOND, 0);
	};

	HOUR_MICROSECOND() {
	    return this.getToken(MySqlParser.HOUR_MICROSECOND, 0);
	};

	DAY_MICROSECOND() {
	    return this.getToken(MySqlParser.DAY_MICROSECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalType(this);
		}
	}


}



class EnableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_enableType;
    }

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEnableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEnableType(this);
		}
	}


}



class IndexTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexType;
    }

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	BTREE() {
	    return this.getToken(MySqlParser.BTREE, 0);
	};

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexType(this);
		}
	}


}



class IndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexOption;
    }

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	PARSER() {
	    return this.getToken(MySqlParser.PARSER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	VISIBLE() {
	    return this.getToken(MySqlParser.VISIBLE, 0);
	};

	INVISIBLE() {
	    return this.getToken(MySqlParser.INVISIBLE, 0);
	};

	ENGINE_ATTRIBUTE() {
	    return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0);
	};

	SECONDARY_ENGINE_ATTRIBUTE() {
	    return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexOption(this);
		}
	}


}



class ProcedureParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureParameter;
        this.direction = null;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	OUT() {
	    return this.getToken(MySqlParser.OUT, 0);
	};

	INOUT() {
	    return this.getToken(MySqlParser.INOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureParameter(this);
		}
	}


}



class FunctionParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionParameter;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionParameter(this);
		}
	}


}



class RoutineOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_routineOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class RoutineBehaviorContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DETERMINISTIC() {
	    return this.getToken(MySqlParser.DETERMINISTIC, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineBehavior(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineBehavior(this);
		}
	}


}

MySqlParser.RoutineBehaviorContext = RoutineBehaviorContext;

class RoutineLanguageContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LANGUAGE() {
	    return this.getToken(MySqlParser.LANGUAGE, 0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineLanguage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineLanguage(this);
		}
	}


}

MySqlParser.RoutineLanguageContext = RoutineLanguageContext;

class RoutineCommentContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineComment(this);
		}
	}


}

MySqlParser.RoutineCommentContext = RoutineCommentContext;

class RoutineSecurityContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.context = null;;
        super.copyFrom(ctx);
    }

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineSecurity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineSecurity(this);
		}
	}


}

MySqlParser.RoutineSecurityContext = RoutineSecurityContext;

class RoutineDataContext extends RoutineOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONTAINS() {
	    return this.getToken(MySqlParser.CONTAINS, 0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	READS() {
	    return this.getToken(MySqlParser.READS, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	MODIFIES() {
	    return this.getToken(MySqlParser.MODIFIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineData(this);
		}
	}


}

MySqlParser.RoutineDataContext = RoutineDataContext;

class ServerOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_serverOption;
    }

	HOST() {
	    return this.getToken(MySqlParser.HOST, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	SOCKET() {
	    return this.getToken(MySqlParser.SOCKET, 0);
	};

	OWNER() {
	    return this.getToken(MySqlParser.OWNER, 0);
	};

	PORT() {
	    return this.getToken(MySqlParser.PORT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterServerOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitServerOption(this);
		}
	}


}



class CreateDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDefinitions;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	createDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateDefinitions(this);
		}
	}


}



class CreateDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ColumnDeclarationContext extends CreateDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnDeclaration(this);
		}
	}


}

MySqlParser.ColumnDeclarationContext = ColumnDeclarationContext;

class ConstraintDeclarationContext extends CreateDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableConstraint() {
	    return this.getTypedRuleContext(TableConstraintContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	ENFORCED() {
	    return this.getToken(MySqlParser.ENFORCED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstraintDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstraintDeclaration(this);
		}
	}


}

MySqlParser.ConstraintDeclarationContext = ConstraintDeclarationContext;

class IndexDeclarationContext extends CreateDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	indexColumnDefinition() {
	    return this.getTypedRuleContext(IndexColumnDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexDeclaration(this);
		}
	}


}

MySqlParser.IndexDeclarationContext = IndexDeclarationContext;

class ColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnDefinition;
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	columnConstraint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnConstraintContext);
	    } else {
	        return this.getTypedRuleContext(ColumnConstraintContext,i);
	    }
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	ENFORCED() {
	    return this.getToken(MySqlParser.ENFORCED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterColumnDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitColumnDefinition(this);
		}
	}


}



class ColumnConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_columnConstraint;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class StorageColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.storageval = null;;
        super.copyFrom(ctx);
    }

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStorageColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStorageColumnConstraint(this);
		}
	}


}

MySqlParser.StorageColumnConstraintContext = StorageColumnConstraintContext;

class VisibilityColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VISIBLE() {
	    return this.getToken(MySqlParser.VISIBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVisibilityColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVisibilityColumnConstraint(this);
		}
	}


}

MySqlParser.VisibilityColumnConstraintContext = VisibilityColumnConstraintContext;

class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	currentTimestamp() {
	    return this.getTypedRuleContext(CurrentTimestampContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAutoIncrementColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAutoIncrementColumnConstraint(this);
		}
	}


}

MySqlParser.AutoIncrementColumnConstraintContext = AutoIncrementColumnConstraintContext;

class CommentColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCommentColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCommentColumnConstraint(this);
		}
	}


}

MySqlParser.CommentColumnConstraintContext = CommentColumnConstraintContext;

class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUniqueKeyColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUniqueKeyColumnConstraint(this);
		}
	}


}

MySqlParser.UniqueKeyColumnConstraintContext = UniqueKeyColumnConstraintContext;

class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSerialDefaultColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSerialDefaultColumnConstraint(this);
		}
	}


}

MySqlParser.SerialDefaultColumnConstraintContext = SerialDefaultColumnConstraintContext;

class GeneratedColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	GENERATED() {
	    return this.getToken(MySqlParser.GENERATED, 0);
	};

	ALWAYS() {
	    return this.getToken(MySqlParser.ALWAYS, 0);
	};

	VIRTUAL() {
	    return this.getToken(MySqlParser.VIRTUAL, 0);
	};

	STORED() {
	    return this.getToken(MySqlParser.STORED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGeneratedColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGeneratedColumnConstraint(this);
		}
	}


}

MySqlParser.GeneratedColumnConstraintContext = GeneratedColumnConstraintContext;

class FormatColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.colformat = null;;
        super.copyFrom(ctx);
    }

	COLUMN_FORMAT() {
	    return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFormatColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFormatColumnConstraint(this);
		}
	}


}

MySqlParser.FormatColumnConstraintContext = FormatColumnConstraintContext;

class CollateColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollateColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollateColumnConstraint(this);
		}
	}


}

MySqlParser.CollateColumnConstraintContext = CollateColumnConstraintContext;

class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrimaryKeyColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrimaryKeyColumnConstraint(this);
		}
	}


}

MySqlParser.PrimaryKeyColumnConstraintContext = PrimaryKeyColumnConstraintContext;

class CheckColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckColumnConstraint(this);
		}
	}


}

MySqlParser.CheckColumnConstraintContext = CheckColumnConstraintContext;

class NullColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	nullNotnull() {
	    return this.getTypedRuleContext(NullNotnullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNullColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNullColumnConstraint(this);
		}
	}


}

MySqlParser.NullColumnConstraintContext = NullColumnConstraintContext;

class DefaultColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultColumnConstraint(this);
		}
	}


}

MySqlParser.DefaultColumnConstraintContext = DefaultColumnConstraintContext;

class ReferenceColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceColumnConstraint(this);
		}
	}


}

MySqlParser.ReferenceColumnConstraintContext = ReferenceColumnConstraintContext;

class InvisibilityColumnConstraintContext extends ColumnConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INVISIBLE() {
	    return this.getToken(MySqlParser.INVISIBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInvisibilityColumnConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInvisibilityColumnConstraint(this);
		}
	}


}

MySqlParser.InvisibilityColumnConstraintContext = InvisibilityColumnConstraintContext;

class TableConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableConstraint;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UniqueKeyTableConstraintContext extends TableConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.indexFormat = null;;
        this.index = null;;
        super.copyFrom(ctx);
    }

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUniqueKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUniqueKeyTableConstraint(this);
		}
	}


}

MySqlParser.UniqueKeyTableConstraintContext = UniqueKeyTableConstraintContext;

class CheckTableConstraintContext extends TableConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTableConstraint(this);
		}
	}


}

MySqlParser.CheckTableConstraintContext = CheckTableConstraintContext;

class PrimaryKeyTableConstraintContext extends TableConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.index = null;;
        super.copyFrom(ctx);
    }

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrimaryKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrimaryKeyTableConstraint(this);
		}
	}


}

MySqlParser.PrimaryKeyTableConstraintContext = PrimaryKeyTableConstraintContext;

class ForeignKeyTableConstraintContext extends TableConstraintContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.index = null;;
        super.copyFrom(ctx);
    }

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterForeignKeyTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitForeignKeyTableConstraint(this);
		}
	}


}

MySqlParser.ForeignKeyTableConstraintContext = ForeignKeyTableConstraintContext;

class ReferenceDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceDefinition;
        this.matchType = null;
    }

	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	MATCH() {
	    return this.getToken(MySqlParser.MATCH, 0);
	};

	referenceAction() {
	    return this.getTypedRuleContext(ReferenceActionContext,0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	PARTIAL() {
	    return this.getToken(MySqlParser.PARTIAL, 0);
	};

	SIMPLE() {
	    return this.getToken(MySqlParser.SIMPLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceDefinition(this);
		}
	}


}



class ReferenceActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceAction;
        this.onDelete = null;
        this.onUpdate = null;
    }

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	referenceControlType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReferenceControlTypeContext);
	    } else {
	        return this.getTypedRuleContext(ReferenceControlTypeContext,i);
	    }
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceAction(this);
		}
	}


}



class ReferenceControlTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_referenceControlType;
    }

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	ACTION() {
	    return this.getToken(MySqlParser.ACTION, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReferenceControlType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReferenceControlType(this);
		}
	}


}



class IndexColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null;;
        super.copyFrom(ctx);
    }

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpecialIndexDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpecialIndexDeclaration(this);
		}
	}


}

MySqlParser.SpecialIndexDeclarationContext = SpecialIndexDeclarationContext;

class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null;;
        super.copyFrom(ctx);
    }

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleIndexDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleIndexDeclaration(this);
		}
	}


}

MySqlParser.SimpleIndexDeclarationContext = SimpleIndexDeclarationContext;

class TableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableOptionEngineContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionEngine(this);
		}
	}


}

MySqlParser.TableOptionEngineContext = TableOptionEngineContext;

class TableOptionMaxRowsContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionMaxRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionMaxRows(this);
		}
	}


}

MySqlParser.TableOptionMaxRowsContext = TableOptionMaxRowsContext;

class TableOptionCollateContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCollate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCollate(this);
		}
	}


}

MySqlParser.TableOptionCollateContext = TableOptionCollateContext;

class TableOptionPersistentContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null;;
        super.copyFrom(ctx);
    }

	STATS_PERSISTENT() {
	    return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPersistent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPersistent(this);
		}
	}


}

MySqlParser.TableOptionPersistentContext = TableOptionPersistentContext;

class TableOptionTablespaceContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	tablespaceStorage() {
	    return this.getTypedRuleContext(TablespaceStorageContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionTablespace(this);
		}
	}


}

MySqlParser.TableOptionTablespaceContext = TableOptionTablespaceContext;

class TableOptionAutoextendSizeContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AUTOEXTEND_SIZE() {
	    return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionAutoextendSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionAutoextendSize(this);
		}
	}


}

MySqlParser.TableOptionAutoextendSizeContext = TableOptionAutoextendSizeContext;

class TableOptionPageCompressedContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PAGE_COMPRESSED() {
	    return this.getToken(MySqlParser.PAGE_COMPRESSED, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPageCompressed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPageCompressed(this);
		}
	}


}

MySqlParser.TableOptionPageCompressedContext = TableOptionPageCompressedContext;

class TableOptionStartTransactionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionStartTransaction(this);
		}
	}


}

MySqlParser.TableOptionStartTransactionContext = TableOptionStartTransactionContext;

class TableOptionPackKeysContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null;;
        super.copyFrom(ctx);
    }

	PACK_KEYS() {
	    return this.getToken(MySqlParser.PACK_KEYS, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPackKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPackKeys(this);
		}
	}


}

MySqlParser.TableOptionPackKeysContext = TableOptionPackKeysContext;

class TableOptionPasswordContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPassword(this);
		}
	}


}

MySqlParser.TableOptionPasswordContext = TableOptionPasswordContext;

class TableOptionUnionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionUnion(this);
		}
	}


}

MySqlParser.TableOptionUnionContext = TableOptionUnionContext;

class TableOptionSamplePageContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STATS_SAMPLE_PAGES() {
	    return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionSamplePage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionSamplePage(this);
		}
	}


}

MySqlParser.TableOptionSamplePageContext = TableOptionSamplePageContext;

class TableOptionCharsetContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	charSet() {
	    return this.getTypedRuleContext(CharSetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCharset(this);
		}
	}


}

MySqlParser.TableOptionCharsetContext = TableOptionCharsetContext;

class TableOptionIndexDirectoryContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionIndexDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionIndexDirectory(this);
		}
	}


}

MySqlParser.TableOptionIndexDirectoryContext = TableOptionIndexDirectoryContext;

class TableOptionTableTypeContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE_TYPE() {
	    return this.getToken(MySqlParser.TABLE_TYPE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	tableType() {
	    return this.getTypedRuleContext(TableTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionTableType(this);
		}
	}


}

MySqlParser.TableOptionTableTypeContext = TableOptionTableTypeContext;

class TableOptionKeyBlockSizeContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionKeyBlockSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionKeyBlockSize(this);
		}
	}


}

MySqlParser.TableOptionKeyBlockSizeContext = TableOptionKeyBlockSizeContext;

class TableOptionEncryptionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENCRYPTION() {
	    return this.getToken(MySqlParser.ENCRYPTION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionEncryption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionEncryption(this);
		}
	}


}

MySqlParser.TableOptionEncryptionContext = TableOptionEncryptionContext;

class TableOptionDataDirectoryContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionDataDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionDataDirectory(this);
		}
	}


}

MySqlParser.TableOptionDataDirectoryContext = TableOptionDataDirectoryContext;

class TableOptionRecalculationContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.extBoolValue = null;;
        super.copyFrom(ctx);
    }

	STATS_AUTO_RECALC() {
	    return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionRecalculation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionRecalculation(this);
		}
	}


}

MySqlParser.TableOptionRecalculationContext = TableOptionRecalculationContext;

class TableOptionAutoIncrementContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionAutoIncrement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionAutoIncrement(this);
		}
	}


}

MySqlParser.TableOptionAutoIncrementContext = TableOptionAutoIncrementContext;

class TableOptionEncryptionKeyIdContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENCRYPTION_KEY_ID() {
	    return this.getToken(MySqlParser.ENCRYPTION_KEY_ID, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionEncryptionKeyId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionEncryptionKeyId(this);
		}
	}


}

MySqlParser.TableOptionEncryptionKeyIdContext = TableOptionEncryptionKeyIdContext;

class TableOptionChecksumContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolValue = null;;
        super.copyFrom(ctx);
    }

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	PAGE_CHECKSUM() {
	    return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionChecksum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionChecksum(this);
		}
	}


}

MySqlParser.TableOptionChecksumContext = TableOptionChecksumContext;

class TableOptionDelayContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolValue = null;;
        super.copyFrom(ctx);
    }

	DELAY_KEY_WRITE() {
	    return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionDelay(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionDelay(this);
		}
	}


}

MySqlParser.TableOptionDelayContext = TableOptionDelayContext;

class TableOptionConnectionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionConnection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionConnection(this);
		}
	}


}

MySqlParser.TableOptionConnectionContext = TableOptionConnectionContext;

class TableOptionTransactionalContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRANSACTIONAL() {
	    return this.getToken(MySqlParser.TRANSACTIONAL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionTransactional(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionTransactional(this);
		}
	}


}

MySqlParser.TableOptionTransactionalContext = TableOptionTransactionalContext;

class TableOptionPageCompressionLevelContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	PAGE_COMPRESSION_LEVEL() {
	    return this.getToken(MySqlParser.PAGE_COMPRESSION_LEVEL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionPageCompressionLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionPageCompressionLevel(this);
		}
	}


}

MySqlParser.TableOptionPageCompressionLevelContext = TableOptionPageCompressionLevelContext;

class TableOptionSecondaryEngineAttributeContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SECONDARY_ENGINE_ATTRIBUTE() {
	    return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionSecondaryEngineAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionSecondaryEngineAttribute(this);
		}
	}


}

MySqlParser.TableOptionSecondaryEngineAttributeContext = TableOptionSecondaryEngineAttributeContext;

class TableOptionCommentContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionComment(this);
		}
	}


}

MySqlParser.TableOptionCommentContext = TableOptionCommentContext;

class TableOptionAverageContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AVG_ROW_LENGTH() {
	    return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionAverage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionAverage(this);
		}
	}


}

MySqlParser.TableOptionAverageContext = TableOptionAverageContext;

class TableOptionRowFormatContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.rowFormat = null;;
        super.copyFrom(ctx);
    }

	ROW_FORMAT() {
	    return this.getToken(MySqlParser.ROW_FORMAT, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	COMPRESSED() {
	    return this.getToken(MySqlParser.COMPRESSED, 0);
	};

	REDUNDANT() {
	    return this.getToken(MySqlParser.REDUNDANT, 0);
	};

	COMPACT() {
	    return this.getToken(MySqlParser.COMPACT, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionRowFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionRowFormat(this);
		}
	}


}

MySqlParser.TableOptionRowFormatContext = TableOptionRowFormatContext;

class TableOptionCompressionContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMPRESSION() {
	    return this.getToken(MySqlParser.COMPRESSION, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionCompression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionCompression(this);
		}
	}


}

MySqlParser.TableOptionCompressionContext = TableOptionCompressionContext;

class TableOptionInsertMethodContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.insertMethod = null;;
        super.copyFrom(ctx);
    }

	INSERT_METHOD() {
	    return this.getToken(MySqlParser.INSERT_METHOD, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionInsertMethod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionInsertMethod(this);
		}
	}


}

MySqlParser.TableOptionInsertMethodContext = TableOptionInsertMethodContext;

class TableOptionEngineAttributeContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENGINE_ATTRIBUTE() {
	    return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionEngineAttribute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionEngineAttribute(this);
		}
	}


}

MySqlParser.TableOptionEngineAttributeContext = TableOptionEngineAttributeContext;

class TableOptionMinRowsContext extends TableOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableOptionMinRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableOptionMinRows(this);
		}
	}


}

MySqlParser.TableOptionMinRowsContext = TableOptionMinRowsContext;

class TableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableType;
    }

	MYSQL() {
	    return this.getToken(MySqlParser.MYSQL, 0);
	};

	ODBC() {
	    return this.getToken(MySqlParser.ODBC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableType(this);
		}
	}


}



class TablespaceStorageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tablespaceStorage;
    }

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTablespaceStorage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTablespaceStorage(this);
		}
	}


}



class PartitionDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinitions;
        this.count = null;
        this.subCount = null;
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	BY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BY);
	    } else {
	        return this.getToken(MySqlParser.BY, i);
	    }
	};


	partitionFunctionDefinition() {
	    return this.getTypedRuleContext(PartitionFunctionDefinitionContext,0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	subpartitionFunctionDefinition() {
	    return this.getTypedRuleContext(SubpartitionFunctionDefinitionContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	SUBPARTITIONS() {
	    return this.getToken(MySqlParser.SUBPARTITIONS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinitions(this);
		}
	}


}



class PartitionFunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionFunctionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionFunctionKeyContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null;;
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionKey(this);
		}
	}


}

MySqlParser.PartitionFunctionKeyContext = PartitionFunctionKeyContext;

class PartitionFunctionHashContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionHash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionHash(this);
		}
	}


}

MySqlParser.PartitionFunctionHashContext = PartitionFunctionHashContext;

class PartitionFunctionListContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LIST() {
	    return this.getToken(MySqlParser.LIST, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionList(this);
		}
	}


}

MySqlParser.PartitionFunctionListContext = PartitionFunctionListContext;

class PartitionFunctionRangeContext extends PartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RANGE() {
	    return this.getToken(MySqlParser.RANGE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionFunctionRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionFunctionRange(this);
		}
	}


}

MySqlParser.PartitionFunctionRangeContext = PartitionFunctionRangeContext;

class SubpartitionFunctionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_subpartitionFunctionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubPartitionFunctionHashContext extends SubpartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubPartitionFunctionHash(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubPartitionFunctionHash(this);
		}
	}


}

MySqlParser.SubPartitionFunctionHashContext = SubPartitionFunctionHashContext;

class SubPartitionFunctionKeyContext extends SubpartitionFunctionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null;;
        super.copyFrom(ctx);
    }

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	LINEAR() {
	    return this.getToken(MySqlParser.LINEAR, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubPartitionFunctionKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubPartitionFunctionKey(this);
		}
	}


}

MySqlParser.SubPartitionFunctionKeyContext = SubPartitionFunctionKeyContext;

class PartitionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinition;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionComparisonContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	LESS() {
	    return this.getToken(MySqlParser.LESS, 0);
	};

	THAN() {
	    return this.getToken(MySqlParser.THAN, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionComparison(this);
		}
	}


}

MySqlParser.PartitionComparisonContext = PartitionComparisonContext;

class PartitionListAtomContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionListAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionListAtom(this);
		}
	}


}

MySqlParser.PartitionListAtomContext = PartitionListAtomContext;

class PartitionListVectorContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	partitionDefinerVector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerVectorContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerVectorContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionListVector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionListVector(this);
		}
	}


}

MySqlParser.PartitionListVectorContext = PartitionListVectorContext;

class PartitionSimpleContext extends PartitionDefinitionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionSimple(this);
		}
	}


}

MySqlParser.PartitionSimpleContext = PartitionSimpleContext;

class PartitionDefinerAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinerAtom;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	MAXVALUE() {
	    return this.getToken(MySqlParser.MAXVALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinerAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinerAtom(this);
		}
	}


}



class PartitionDefinerVectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionDefinerVector;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinerAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinerAtomContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinerAtomContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionDefinerVector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionDefinerVector(this);
		}
	}


}



class SubpartitionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_subpartitionDefinition;
    }

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubpartitionDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubpartitionDefinition(this);
		}
	}


}



class PartitionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionOptionCommentContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.comment = null;;
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionComment(this);
		}
	}


}

MySqlParser.PartitionOptionCommentContext = PartitionOptionCommentContext;

class PartitionOptionNodeGroupContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.nodegroup = null;;
        super.copyFrom(ctx);
    }

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionNodeGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionNodeGroup(this);
		}
	}


}

MySqlParser.PartitionOptionNodeGroupContext = PartitionOptionNodeGroupContext;

class PartitionOptionIndexDirectoryContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexDirectory = null;;
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionIndexDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionIndexDirectory(this);
		}
	}


}

MySqlParser.PartitionOptionIndexDirectoryContext = PartitionOptionIndexDirectoryContext;

class PartitionOptionMaxRowsContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.maxRows = null;;
        super.copyFrom(ctx);
    }

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionMaxRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionMaxRows(this);
		}
	}


}

MySqlParser.PartitionOptionMaxRowsContext = PartitionOptionMaxRowsContext;

class PartitionOptionTablespaceContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.tablespace = null;;
        super.copyFrom(ctx);
    }

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionTablespace(this);
		}
	}


}

MySqlParser.PartitionOptionTablespaceContext = PartitionOptionTablespaceContext;

class PartitionOptionEngineContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionEngine(this);
		}
	}


}

MySqlParser.PartitionOptionEngineContext = PartitionOptionEngineContext;

class PartitionOptionMinRowsContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.minRows = null;;
        super.copyFrom(ctx);
    }

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionMinRows(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionMinRows(this);
		}
	}


}

MySqlParser.PartitionOptionMinRowsContext = PartitionOptionMinRowsContext;

class PartitionOptionDataDirectoryContext extends PartitionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dataDirectory = null;;
        super.copyFrom(ctx);
    }

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionOptionDataDirectory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionOptionDataDirectory(this);
		}
	}


}

MySqlParser.PartitionOptionDataDirectoryContext = PartitionOptionDataDirectoryContext;

class AlterDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterDatabase;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterUpgradeNameContext extends AlterDatabaseContext {

    constructor(parser, ctx) {
        super(parser);
        this.dbFormat = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	NAME() {
	    return this.getToken(MySqlParser.NAME, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUpgradeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUpgradeName(this);
		}
	}


}

MySqlParser.AlterUpgradeNameContext = AlterUpgradeNameContext;

class AlterSimpleDatabaseContext extends AlterDatabaseContext {

    constructor(parser, ctx) {
        super(parser);
        this.dbFormat = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	createDatabaseOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterSimpleDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterSimpleDatabase(this);
		}
	}


}

MySqlParser.AlterSimpleDatabaseContext = AlterSimpleDatabaseContext;

class AlterEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterEvent;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	scheduleExpression() {
	    return this.getTypedRuleContext(ScheduleExpressionContext,0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	enableType() {
	    return this.getTypedRuleContext(EnableTypeContext,0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterEvent(this);
		}
	}


}



class AlterFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterFunction;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterFunction(this);
		}
	}


}



class AlterInstanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterInstance;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	INSTANCE() {
	    return this.getToken(MySqlParser.INSTANCE, 0);
	};

	ROTATE() {
	    return this.getToken(MySqlParser.ROTATE, 0);
	};

	INNODB() {
	    return this.getToken(MySqlParser.INNODB, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterInstance(this);
		}
	}


}



class AlterLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterLogfileGroup;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterLogfileGroup(this);
		}
	}


}



class AlterProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterProcedure;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	routineOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterProcedure(this);
		}
	}


}



class AlterServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterServer;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	serverOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ServerOptionContext);
	    } else {
	        return this.getTypedRuleContext(ServerOptionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterServer(this);
		}
	}


}



class AlterTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterTable;
        this.intimeAction = null;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	waitNowaitClause() {
	    return this.getTypedRuleContext(WaitNowaitClauseContext,0);
	};

	alterSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(AlterSpecificationContext,i);
	    }
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterTable(this);
		}
	}


}



class AlterTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterTablespace;
        this.objectAction = null;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	fileSizeLiteral() {
	    return this.getTypedRuleContext(FileSizeLiteralContext,0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterTablespace(this);
		}
	}


}



class AlterViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterView;
        this.algType = null;
        this.secContext = null;
        this.checkOpt = null;
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ownerStatement() {
	    return this.getTypedRuleContext(OwnerStatementContext,0);
	};

	SQL() {
	    return this.getToken(MySqlParser.SQL, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterView(this);
		}
	}


}



class AlterSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterSpecification;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterByAlterColumnDefaultContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	VISIBLE() {
	    return this.getToken(MySqlParser.VISIBLE, 0);
	};

	INVISIBLE() {
	    return this.getToken(MySqlParser.INVISIBLE, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAlterColumnDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAlterColumnDefault(this);
		}
	}


}

MySqlParser.AlterByAlterColumnDefaultContext = AlterByAlterColumnDefaultContext;

class AlterByDisableKeysContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDisableKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDisableKeys(this);
		}
	}


}

MySqlParser.AlterByDisableKeysContext = AlterByDisableKeysContext;

class AlterByDefaultCharsetContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDefaultCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDefaultCharset(this);
		}
	}


}

MySqlParser.AlterByDefaultCharsetContext = AlterByDefaultCharsetContext;

class AlterByRenameColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.oldColumn = null;;
        this.newColumn = null;;
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRenameColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRenameColumn(this);
		}
	}


}

MySqlParser.AlterByRenameColumnContext = AlterByRenameColumnContext;

class AlterByConvertCharsetContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByConvertCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByConvertCharset(this);
		}
	}


}

MySqlParser.AlterByConvertCharsetContext = AlterByConvertCharsetContext;

class AlterByAddForeignKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.indexName = null;;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	referenceDefinition() {
	    return this.getTypedRuleContext(ReferenceDefinitionContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddForeignKey(this);
		}
	}


}

MySqlParser.AlterByAddForeignKeyContext = AlterByAddForeignKeyContext;

class AlterByRenameIndexContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null;;
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRenameIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRenameIndex(this);
		}
	}


}

MySqlParser.AlterByRenameIndexContext = AlterByRenameIndexContext;

class AlterByRenameContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.renameFormat = null;;
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRename(this);
		}
	}


}

MySqlParser.AlterByRenameContext = AlterByRenameContext;

class AlterByImportTablespaceContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByImportTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByImportTablespace(this);
		}
	}


}

MySqlParser.AlterByImportTablespaceContext = AlterByImportTablespaceContext;

class AlterByAddDefinitionsContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	createDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddDefinitions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddDefinitions(this);
		}
	}


}

MySqlParser.AlterByAddDefinitionsContext = AlterByAddDefinitionsContext;

class AlterByAlterCheckTableConstraintContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	ENFORCED() {
	    return this.getToken(MySqlParser.ENFORCED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAlterCheckTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAlterCheckTableConstraint(this);
		}
	}


}

MySqlParser.AlterByAlterCheckTableConstraintContext = AlterByAlterCheckTableConstraintContext;

class AlterByDropConstraintCheckContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropConstraintCheck(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropConstraintCheck(this);
		}
	}


}

MySqlParser.AlterByDropConstraintCheckContext = AlterByDropConstraintCheckContext;

class AlterByAddColumnsContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ColumnDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddColumns(this);
		}
	}


}

MySqlParser.AlterByAddColumnsContext = AlterByAddColumnsContext;

class AlterByAlterIndexVisibilityContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	VISIBLE() {
	    return this.getToken(MySqlParser.VISIBLE, 0);
	};

	INVISIBLE() {
	    return this.getToken(MySqlParser.INVISIBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAlterIndexVisibility(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAlterIndexVisibility(this);
		}
	}


}

MySqlParser.AlterByAlterIndexVisibilityContext = AlterByAlterIndexVisibilityContext;

class AlterByDropForeignKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	FOREIGN() {
	    return this.getToken(MySqlParser.FOREIGN, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropForeignKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropForeignKey(this);
		}
	}


}

MySqlParser.AlterByDropForeignKeyContext = AlterByDropForeignKeyContext;

class AlterByAddCheckTableConstraintContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	ENFORCED() {
	    return this.getToken(MySqlParser.ENFORCED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddCheckTableConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddCheckTableConstraint(this);
		}
	}


}

MySqlParser.AlterByAddCheckTableConstraintContext = AlterByAddCheckTableConstraintContext;

class AlterPartitionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	alterPartitionSpecification() {
	    return this.getTypedRuleContext(AlterPartitionSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterPartition(this);
		}
	}


}

MySqlParser.AlterPartitionContext = AlterPartitionContext;

class AlterByAddIndexContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null;;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddIndex(this);
		}
	}


}

MySqlParser.AlterByAddIndexContext = AlterByAddIndexContext;

class AlterByDropColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropColumn(this);
		}
	}


}

MySqlParser.AlterByDropColumnContext = AlterByDropColumnContext;

class AlterByChangeDefaultContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByChangeDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByChangeDefault(this);
		}
	}


}

MySqlParser.AlterByChangeDefaultContext = AlterByChangeDefaultContext;

class AlterByForceContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FORCE() {
	    return this.getToken(MySqlParser.FORCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByForce(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByForce(this);
		}
	}


}

MySqlParser.AlterByForceContext = AlterByForceContext;

class AlterByAddSpecialIndexContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.keyType = null;;
        this.indexFormat = null;;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	FULLTEXT() {
	    return this.getToken(MySqlParser.FULLTEXT, 0);
	};

	SPATIAL() {
	    return this.getToken(MySqlParser.SPATIAL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddSpecialIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddSpecialIndex(this);
		}
	}


}

MySqlParser.AlterByAddSpecialIndexContext = AlterByAddSpecialIndexContext;

class AlterByModifyColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(MySqlParser.MODIFY, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByModifyColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByModifyColumn(this);
		}
	}


}

MySqlParser.AlterByModifyColumnContext = AlterByModifyColumnContext;

class AlterByTableOptionContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableOptionContext);
	    } else {
	        return this.getTypedRuleContext(TableOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByTableOption(this);
		}
	}


}

MySqlParser.AlterByTableOptionContext = AlterByTableOptionContext;

class AlterByDropPrimaryKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropPrimaryKey(this);
		}
	}


}

MySqlParser.AlterByDropPrimaryKeyContext = AlterByDropPrimaryKeyContext;

class AlterByLockContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.lockType = null;;
        super.copyFrom(ctx);
    }

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	SHARED() {
	    return this.getToken(MySqlParser.SHARED, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(MySqlParser.EXCLUSIVE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByLock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByLock(this);
		}
	}


}

MySqlParser.AlterByLockContext = AlterByLockContext;

class AlterByDiscardTablespaceContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDiscardTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDiscardTablespace(this);
		}
	}


}

MySqlParser.AlterByDiscardTablespaceContext = AlterByDiscardTablespaceContext;

class AlterByValidateContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.validationFormat = null;;
        super.copyFrom(ctx);
    }

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByValidate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByValidate(this);
		}
	}


}

MySqlParser.AlterByValidateContext = AlterByValidateContext;

class AlterByAddPrimaryKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.index = null;;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddPrimaryKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddPrimaryKey(this);
		}
	}


}

MySqlParser.AlterByAddPrimaryKeyContext = AlterByAddPrimaryKeyContext;

class AlterByEnableKeysContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByEnableKeys(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByEnableKeys(this);
		}
	}


}

MySqlParser.AlterByEnableKeysContext = AlterByEnableKeysContext;

class AlterBySetAlgorithmContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.algType = null;;
        super.copyFrom(ctx);
    }

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	INSTANT() {
	    return this.getToken(MySqlParser.INSTANT, 0);
	};

	INPLACE() {
	    return this.getToken(MySqlParser.INPLACE, 0);
	};

	COPY() {
	    return this.getToken(MySqlParser.COPY, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterBySetAlgorithm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterBySetAlgorithm(this);
		}
	}


}

MySqlParser.AlterBySetAlgorithmContext = AlterBySetAlgorithmContext;

class AlterByChangeColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.oldColumn = null;;
        this.newColumn = null;;
        this.afterColumn = null;;
        super.copyFrom(ctx);
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByChangeColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByChangeColumn(this);
		}
	}


}

MySqlParser.AlterByChangeColumnContext = AlterByChangeColumnContext;

class AlterByAddUniqueKeyContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.name = null;;
        this.indexFormat = null;;
        this.indexName = null;;
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	UNIQUE() {
	    return this.getToken(MySqlParser.UNIQUE, 0);
	};

	indexColumnNames() {
	    return this.getTypedRuleContext(IndexColumnNamesContext,0);
	};

	CONSTRAINT() {
	    return this.getToken(MySqlParser.CONSTRAINT, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddUniqueKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddUniqueKey(this);
		}
	}


}

MySqlParser.AlterByAddUniqueKeyContext = AlterByAddUniqueKeyContext;

class AlterByDropIndexContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null;;
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropIndex(this);
		}
	}


}

MySqlParser.AlterByDropIndexContext = AlterByDropIndexContext;

class AlterByAddColumnContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	COLUMN() {
	    return this.getToken(MySqlParser.COLUMN, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddColumn(this);
		}
	}


}

MySqlParser.AlterByAddColumnContext = AlterByAddColumnContext;

class AlterByOrderContext extends AlterSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByOrder(this);
		}
	}


}

MySqlParser.AlterByOrderContext = AlterByOrderContext;

class AlterPartitionSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterPartitionSpecification;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterByImportPartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByImportPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByImportPartition(this);
		}
	}


}

MySqlParser.AlterByImportPartitionContext = AlterByImportPartitionContext;

class AlterByDropPartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDropPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDropPartition(this);
		}
	}


}

MySqlParser.AlterByDropPartitionContext = AlterByDropPartitionContext;

class AlterByDiscardPartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByDiscardPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByDiscardPartition(this);
		}
	}


}

MySqlParser.AlterByDiscardPartitionContext = AlterByDiscardPartitionContext;

class AlterByAddPartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(MySqlParser.ADD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAddPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAddPartition(this);
		}
	}


}

MySqlParser.AlterByAddPartitionContext = AlterByAddPartitionContext;

class AlterByRemovePartitioningContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REMOVE() {
	    return this.getToken(MySqlParser.REMOVE, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRemovePartitioning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRemovePartitioning(this);
		}
	}


}

MySqlParser.AlterByRemovePartitioningContext = AlterByRemovePartitioningContext;

class AlterByOptimizePartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPTIMIZE() {
	    return this.getToken(MySqlParser.OPTIMIZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByOptimizePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByOptimizePartition(this);
		}
	}


}

MySqlParser.AlterByOptimizePartitionContext = AlterByOptimizePartitionContext;

class AlterByCheckPartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByCheckPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByCheckPartition(this);
		}
	}


}

MySqlParser.AlterByCheckPartitionContext = AlterByCheckPartitionContext;

class AlterByCoalescePartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COALESCE() {
	    return this.getToken(MySqlParser.COALESCE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByCoalescePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByCoalescePartition(this);
		}
	}


}

MySqlParser.AlterByCoalescePartitionContext = AlterByCoalescePartitionContext;

class AlterByReorganizePartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REORGANIZE() {
	    return this.getToken(MySqlParser.REORGANIZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByReorganizePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByReorganizePartition(this);
		}
	}


}

MySqlParser.AlterByReorganizePartitionContext = AlterByReorganizePartitionContext;

class AlterByAnalyzePartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANALYZE() {
	    return this.getToken(MySqlParser.ANALYZE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByAnalyzePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByAnalyzePartition(this);
		}
	}


}

MySqlParser.AlterByAnalyzePartitionContext = AlterByAnalyzePartitionContext;

class AlterByRebuildPartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REBUILD() {
	    return this.getToken(MySqlParser.REBUILD, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRebuildPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRebuildPartition(this);
		}
	}


}

MySqlParser.AlterByRebuildPartitionContext = AlterByRebuildPartitionContext;

class AlterByUpgradePartitioningContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByUpgradePartitioning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByUpgradePartitioning(this);
		}
	}


}

MySqlParser.AlterByUpgradePartitioningContext = AlterByUpgradePartitioningContext;

class AlterByTruncatePartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByTruncatePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByTruncatePartition(this);
		}
	}


}

MySqlParser.AlterByTruncatePartitionContext = AlterByTruncatePartitionContext;

class AlterByRepairPartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByRepairPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByRepairPartition(this);
		}
	}


}

MySqlParser.AlterByRepairPartitionContext = AlterByRepairPartitionContext;

class AlterByExchangePartitionContext extends AlterPartitionSpecificationContext {

    constructor(parser, ctx) {
        super(parser);
        this.validationFormat = null;;
        super.copyFrom(ctx);
    }

	EXCHANGE() {
	    return this.getToken(MySqlParser.EXCHANGE, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.WITH);
	    } else {
	        return this.getToken(MySqlParser.WITH, i);
	    }
	};


	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterByExchangePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterByExchangePartition(this);
		}
	}


}

MySqlParser.AlterByExchangePartitionContext = AlterByExchangePartitionContext;

class DropDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropDatabase;
        this.dbFormat = null;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropDatabase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropDatabase(this);
		}
	}


}



class DropEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropEvent;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropEvent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropEvent(this);
		}
	}


}



class DropIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropIndex;
        this.intimeAction = null;
        this.algType = null;
        this.lockType = null;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	ALGORITHM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ALGORITHM);
	    } else {
	        return this.getToken(MySqlParser.ALGORITHM, i);
	    }
	};


	LOCK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOCK);
	    } else {
	        return this.getToken(MySqlParser.LOCK, i);
	    }
	};


	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DEFAULT);
	    } else {
	        return this.getToken(MySqlParser.DEFAULT, i);
	    }
	};


	INPLACE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.INPLACE);
	    } else {
	        return this.getToken(MySqlParser.INPLACE, i);
	    }
	};


	COPY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COPY);
	    } else {
	        return this.getToken(MySqlParser.COPY, i);
	    }
	};


	NONE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NONE);
	    } else {
	        return this.getToken(MySqlParser.NONE, i);
	    }
	};


	SHARED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SHARED);
	    } else {
	        return this.getToken(MySqlParser.SHARED, i);
	    }
	};


	EXCLUSIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EXCLUSIVE);
	    } else {
	        return this.getToken(MySqlParser.EXCLUSIVE, i);
	    }
	};


	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropIndex(this);
		}
	}


}



class DropLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropLogfileGroup;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropLogfileGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropLogfileGroup(this);
		}
	}


}



class DropProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropProcedure;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropProcedure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropProcedure(this);
		}
	}


}



class DropFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropFunction;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropFunction(this);
		}
	}


}



class DropServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropServer;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropServer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropServer(this);
		}
	}


}



class DropTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTable;
        this.dropType = null;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTable(this);
		}
	}


}



class DropTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTablespace;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTablespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTablespace(this);
		}
	}


}



class DropTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropTrigger;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropTrigger(this);
		}
	}


}



class DropViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropView;
        this.dropType = null;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	RESTRICT() {
	    return this.getToken(MySqlParser.RESTRICT, 0);
	};

	CASCADE() {
	    return this.getToken(MySqlParser.CASCADE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropView(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropView(this);
		}
	}


}



class DropRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropRole;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	roleName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoleNameContext);
	    } else {
	        return this.getTypedRuleContext(RoleNameContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropRole(this);
		}
	}


}



class SetRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setRole;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	roleName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoleNameContext);
	    } else {
	        return this.getTypedRuleContext(RoleNameContext,i);
	    }
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	roleOption() {
	    return this.getTypedRuleContext(RoleOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetRole(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetRole(this);
		}
	}


}



class RenameTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameTable;
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	renameTableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RenameTableClauseContext);
	    } else {
	        return this.getTypedRuleContext(RenameTableClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameTable(this);
		}
	}


}



class RenameTableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameTableClause;
    }

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameTableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameTableClause(this);
		}
	}


}



class TruncateTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_truncateTable;
    }

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTruncateTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTruncateTable(this);
		}
	}


}



class CallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_callStatement;
    }

	CALL() {
	    return this.getToken(MySqlParser.CALL, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	constants() {
	    return this.getTypedRuleContext(ConstantsContext,0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCallStatement(this);
		}
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_deleteStatement;
    }

	singleDeleteStatement() {
	    return this.getTypedRuleContext(SingleDeleteStatementContext,0);
	};

	multipleDeleteStatement() {
	    return this.getTypedRuleContext(MultipleDeleteStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeleteStatement(this);
		}
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoStatement(this);
		}
	}


}



class HandlerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerStatement;
    }

	handlerOpenStatement() {
	    return this.getTypedRuleContext(HandlerOpenStatementContext,0);
	};

	handlerReadIndexStatement() {
	    return this.getTypedRuleContext(HandlerReadIndexStatementContext,0);
	};

	handlerReadStatement() {
	    return this.getTypedRuleContext(HandlerReadStatementContext,0);
	};

	handlerCloseStatement() {
	    return this.getTypedRuleContext(HandlerCloseStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerStatement(this);
		}
	}


}



class InsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertStatement;
        this.priority = null;
        this.partitions = null;
        this.columns = null;
        this.setFirst = null;
        this._updatedElement = null;
        this.setElements = [];
        this.duplicatedFirst = null;
        this.duplicatedElements = [];
    }

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	insertStatementValue() {
	    return this.getTypedRuleContext(InsertStatementValueContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	DUPLICATE() {
	    return this.getToken(MySqlParser.DUPLICATE, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DELAYED() {
	    return this.getToken(MySqlParser.DELAYED, 0);
	};

	HIGH_PRIORITY() {
	    return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	fullColumnNameList() {
	    return this.getTypedRuleContext(FullColumnNameListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertStatement(this);
		}
	}


}



class LoadDataStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadDataStatement;
        this.priority = null;
        this.filename = null;
        this.violation = null;
        this.charset = null;
        this.fieldsFormat = null;
        this.linesFormat = null;
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	INFILE() {
	    return this.getToken(MySqlParser.INFILE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	LINES = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LINES);
	    } else {
	        return this.getToken(MySqlParser.LINES, i);
	    }
	};


	IGNORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IGNORE);
	    } else {
	        return this.getToken(MySqlParser.IGNORE, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	selectFieldsInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectFieldsIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectFieldsIntoContext,i);
	    }
	};

	selectLinesInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectLinesIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectLinesIntoContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadDataStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadDataStatement(this);
		}
	}


}



class LoadXmlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadXmlStatement;
        this.priority = null;
        this.filename = null;
        this.violation = null;
        this.charset = null;
        this.tag = null;
        this.linesFormat = null;
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	XML() {
	    return this.getToken(MySqlParser.XML, 0);
	};

	INFILE() {
	    return this.getToken(MySqlParser.INFILE, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SET);
	    } else {
	        return this.getToken(MySqlParser.SET, i);
	    }
	};


	ROWS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ROWS);
	    } else {
	        return this.getToken(MySqlParser.ROWS, i);
	    }
	};


	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	IGNORE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IGNORE);
	    } else {
	        return this.getToken(MySqlParser.IGNORE, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	LINES() {
	    return this.getToken(MySqlParser.LINES, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadXmlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadXmlStatement(this);
		}
	}


}



class ReplaceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replaceStatement;
        this.priority = null;
        this.partitions = null;
        this.columns = null;
        this.setFirst = null;
        this._updatedElement = null;
        this.setElements = [];
    }

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	insertStatementValue() {
	    return this.getTypedRuleContext(InsertStatementValueContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	uidList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidListContext);
	    } else {
	        return this.getTypedRuleContext(UidListContext,i);
	    }
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DELAYED() {
	    return this.getToken(MySqlParser.DELAYED, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReplaceStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReplaceStatement(this);
		}
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnionSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.unionType = null;;
        super.copyFrom(ctx);
    }

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	unionStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionStatementContext);
	    } else {
	        return this.getTypedRuleContext(UnionStatementContext,i);
	    }
	};

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionSelect(this);
		}
	}


}

MySqlParser.UnionSelectContext = UnionSelectContext;

class UnionParenthesisSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.unionType = null;;
        super.copyFrom(ctx);
    }

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	unionParenthesis = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionParenthesisContext);
	    } else {
	        return this.getTypedRuleContext(UnionParenthesisContext,i);
	    }
	};

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionParenthesisSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionParenthesisSelect(this);
		}
	}


}

MySqlParser.UnionParenthesisSelectContext = UnionParenthesisSelectContext;

class SimpleSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleSelect(this);
		}
	}


}

MySqlParser.SimpleSelectContext = SimpleSelectContext;

class ParenthesisSelectContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	lockClause() {
	    return this.getTypedRuleContext(LockClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterParenthesisSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitParenthesisSelect(this);
		}
	}


}

MySqlParser.ParenthesisSelectContext = ParenthesisSelectContext;

class WithLateralStatementContext extends SelectStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	lateralStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateralStatementContext);
	    } else {
	        return this.getTypedRuleContext(LateralStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWithLateralStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWithLateralStatement(this);
		}
	}


}

MySqlParser.WithLateralStatementContext = WithLateralStatementContext;

class UpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updateStatement;
    }

	singleUpdateStatement() {
	    return this.getTypedRuleContext(SingleUpdateStatementContext,0);
	};

	multipleUpdateStatement() {
	    return this.getTypedRuleContext(MultipleUpdateStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdateStatement(this);
		}
	}


}



class ValuesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_valuesStatement;
    }

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	expressionsWithDefaults = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionsWithDefaultsContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionsWithDefaultsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterValuesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitValuesStatement(this);
		}
	}


}



class InsertStatementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_insertStatementValue;
        this.insertFormat = null;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	expressionsWithDefaults = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionsWithDefaultsContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionsWithDefaultsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInsertStatementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInsertStatementValue(this);
		}
	}


}



class UpdatedElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_updatedElement;
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUpdatedElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUpdatedElement(this);
		}
	}


}



class AssignmentFieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_assignmentField;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAssignmentField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAssignmentField(this);
		}
	}


}



class LockClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockClause;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	SHARE() {
	    return this.getToken(MySqlParser.SHARE, 0);
	};

	MODE() {
	    return this.getToken(MySqlParser.MODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockClause(this);
		}
	}


}



class SingleDeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_singleDeleteStatement;
        this.priority = null;
    }

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	limitClauseAtom() {
	    return this.getTypedRuleContext(LimitClauseAtomContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSingleDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSingleDeleteStatement(this);
		}
	}


}



class MultipleDeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_multipleDeleteStatement;
        this.priority = null;
    }

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.DOT);
	    } else {
	        return this.getToken(MySqlParser.DOT, i);
	    }
	};


	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STAR);
	    } else {
	        return this.getToken(MySqlParser.STAR, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMultipleDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMultipleDeleteStatement(this);
		}
	}


}



class HandlerOpenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerOpenStatement;
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerOpenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerOpenStatement(this);
		}
	}


}



class HandlerReadIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerReadIndexStatement;
        this.index = null;
        this.moveOrder = null;
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	constants() {
	    return this.getTypedRuleContext(ConstantsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	limitClauseAtom() {
	    return this.getTypedRuleContext(LimitClauseAtomContext,0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	PREV() {
	    return this.getToken(MySqlParser.PREV, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerReadIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerReadIndexStatement(this);
		}
	}


}



class HandlerReadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerReadStatement;
        this.moveOrder = null;
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	limitClauseAtom() {
	    return this.getTypedRuleContext(LimitClauseAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerReadStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerReadStatement(this);
		}
	}


}



class HandlerCloseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerCloseStatement;
    }

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerCloseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerCloseStatement(this);
		}
	}


}



class SingleUpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_singleUpdateStatement;
        this.priority = null;
    }

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSingleUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSingleUpdateStatement(this);
		}
	}


}



class MultipleUpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_multipleUpdateStatement;
        this.priority = null;
    }

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	updatedElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdatedElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdatedElementContext,i);
	    }
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMultipleUpdateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMultipleUpdateStatement(this);
		}
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_orderByClause;
    }

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	orderByExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderByExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}


}



class OrderByExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_orderByExpression;
        this.order = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOrderByExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOrderByExpression(this);
		}
	}


}



class TableSourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSources;
    }

	tableSource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableSourceContext);
	    } else {
	        return this.getTypedRuleContext(TableSourceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSources(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSources(this);
		}
	}


}



class TableSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSource;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableJsonContext extends TableSourceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	jsonTable() {
	    return this.getTypedRuleContext(JsonTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableJson(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableJson(this);
		}
	}


}

MySqlParser.TableJsonContext = TableJsonContext;

class TableSourceNestedContext extends TableSourceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	joinPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinPartContext);
	    } else {
	        return this.getTypedRuleContext(JoinPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourceNested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourceNested(this);
		}
	}


}

MySqlParser.TableSourceNestedContext = TableSourceNestedContext;

class TableSourceBaseContext extends TableSourceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	joinPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinPartContext);
	    } else {
	        return this.getTypedRuleContext(JoinPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourceBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourceBase(this);
		}
	}


}

MySqlParser.TableSourceBaseContext = TableSourceBaseContext;

class TableSourceItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableSourceItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SubqueryTableItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.parenthesisSubquery = null;;
        this.alias = null;;
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryTableItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryTableItem(this);
		}
	}


}

MySqlParser.SubqueryTableItemContext = SubqueryTableItemContext;

class AtomTableItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        this.alias = null;;
        super.copyFrom(ctx);
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	indexHint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexHintContext);
	    } else {
	        return this.getTypedRuleContext(IndexHintContext,i);
	    }
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAtomTableItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAtomTableItem(this);
		}
	}


}

MySqlParser.AtomTableItemContext = AtomTableItemContext;

class TableSourcesItemContext extends TableSourceItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableSourcesItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableSourcesItem(this);
		}
	}


}

MySqlParser.TableSourcesItemContext = TableSourcesItemContext;

class IndexHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexHint;
        this.indexHintAction = null;
        this.keyFormat = null;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	FORCE() {
	    return this.getToken(MySqlParser.FORCE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	indexHintType() {
	    return this.getTypedRuleContext(IndexHintTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexHint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexHint(this);
		}
	}


}



class IndexHintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexHintType;
    }

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexHintType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexHintType(this);
		}
	}


}



class JoinPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_joinPart;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class InnerJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	LATERAL() {
	    return this.getToken(MySqlParser.LATERAL, 0);
	};

	joinSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinSpecContext);
	    } else {
	        return this.getTypedRuleContext(JoinSpecContext,i);
	    }
	};

	INNER() {
	    return this.getToken(MySqlParser.INNER, 0);
	};

	CROSS() {
	    return this.getToken(MySqlParser.CROSS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInnerJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInnerJoin(this);
		}
	}


}

MySqlParser.InnerJoinContext = InnerJoinContext;

class NaturalJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NATURAL() {
	    return this.getToken(MySqlParser.NATURAL, 0);
	};

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	OUTER() {
	    return this.getToken(MySqlParser.OUTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNaturalJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNaturalJoin(this);
		}
	}


}

MySqlParser.NaturalJoinContext = NaturalJoinContext;

class OuterJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	OUTER() {
	    return this.getToken(MySqlParser.OUTER, 0);
	};

	LATERAL() {
	    return this.getToken(MySqlParser.LATERAL, 0);
	};

	joinSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinSpecContext);
	    } else {
	        return this.getTypedRuleContext(JoinSpecContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOuterJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOuterJoin(this);
		}
	}


}

MySqlParser.OuterJoinContext = OuterJoinContext;

class StraightJoinContext extends JoinPartContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRAIGHT_JOIN() {
	    return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
	};

	tableSourceItem() {
	    return this.getTypedRuleContext(TableSourceItemContext,0);
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStraightJoin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStraightJoin(this);
		}
	}


}

MySqlParser.StraightJoinContext = StraightJoinContext;

class JoinSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_joinSpec;
    }

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJoinSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJoinSpec(this);
		}
	}


}



class QueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_queryExpression;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryExpression(this);
		}
	}


}



class QueryExpressionNointoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_queryExpressionNointo;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQueryExpressionNointo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQueryExpressionNointo(this);
		}
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_querySpecification;
    }

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	selectElements() {
	    return this.getTypedRuleContext(SelectElementsContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	selectSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectSpecContext);
	    } else {
	        return this.getTypedRuleContext(SelectSpecContext,i);
	    }
	};

	selectIntoExpression() {
	    return this.getTypedRuleContext(SelectIntoExpressionContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQuerySpecification(this);
		}
	}


}



class QuerySpecificationNointoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_querySpecificationNointo;
    }

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	selectElements() {
	    return this.getTypedRuleContext(SelectElementsContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	selectSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectSpecContext);
	    } else {
	        return this.getTypedRuleContext(SelectSpecContext,i);
	    }
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterQuerySpecificationNointo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitQuerySpecificationNointo(this);
		}
	}


}



class UnionParenthesisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unionParenthesis;
        this.unionType = null;
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionParenthesis(this);
		}
	}


}



class UnionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unionStatement;
        this.unionType = null;
    }

	UNION() {
	    return this.getToken(MySqlParser.UNION, 0);
	};

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnionStatement(this);
		}
	}


}



class LateralStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lateralStatement;
    }

	LATERAL() {
	    return this.getToken(MySqlParser.LATERAL, 0);
	};

	querySpecificationNointo() {
	    return this.getTypedRuleContext(QuerySpecificationNointoContext,0);
	};

	queryExpressionNointo() {
	    return this.getTypedRuleContext(QueryExpressionNointoContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLateralStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLateralStatement(this);
		}
	}


}



class JsonTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_jsonTable;
    }

	JSON_TABLE() {
	    return this.getToken(MySqlParser.JSON_TABLE, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	jsonColumnList() {
	    return this.getTypedRuleContext(JsonColumnListContext,0);
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonTable(this);
		}
	}


}



class JsonColumnListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_jsonColumnList;
    }

	jsonColumn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JsonColumnContext);
	    } else {
	        return this.getTypedRuleContext(JsonColumnContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonColumnList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonColumnList(this);
		}
	}


}



class JsonColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_jsonColumn;
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	ORDINALITY() {
	    return this.getToken(MySqlParser.ORDINALITY, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	PATH() {
	    return this.getToken(MySqlParser.PATH, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	jsonOnEmpty() {
	    return this.getTypedRuleContext(JsonOnEmptyContext,0);
	};

	jsonOnError() {
	    return this.getTypedRuleContext(JsonOnErrorContext,0);
	};

	NESTED() {
	    return this.getToken(MySqlParser.NESTED, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	jsonColumnList() {
	    return this.getTypedRuleContext(JsonColumnListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonColumn(this);
		}
	}


}



class JsonOnEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_jsonOnEmpty;
    }

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	EMPTY() {
	    return this.getToken(MySqlParser.EMPTY, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	ERROR() {
	    return this.getToken(MySqlParser.ERROR, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonOnEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonOnEmpty(this);
		}
	}


}



class JsonOnErrorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_jsonOnError;
    }

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	ERROR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ERROR);
	    } else {
	        return this.getToken(MySqlParser.ERROR, i);
	    }
	};


	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonOnError(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonOnError(this);
		}
	}


}



class SelectSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectSpec;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	DISTINCTROW() {
	    return this.getToken(MySqlParser.DISTINCTROW, 0);
	};

	HIGH_PRIORITY() {
	    return this.getToken(MySqlParser.HIGH_PRIORITY, 0);
	};

	STRAIGHT_JOIN() {
	    return this.getToken(MySqlParser.STRAIGHT_JOIN, 0);
	};

	SQL_SMALL_RESULT() {
	    return this.getToken(MySqlParser.SQL_SMALL_RESULT, 0);
	};

	SQL_BIG_RESULT() {
	    return this.getToken(MySqlParser.SQL_BIG_RESULT, 0);
	};

	SQL_BUFFER_RESULT() {
	    return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
	};

	SQL_CACHE() {
	    return this.getToken(MySqlParser.SQL_CACHE, 0);
	};

	SQL_NO_CACHE() {
	    return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
	};

	SQL_CALC_FOUND_ROWS() {
	    return this.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectSpec(this);
		}
	}


}



class SelectElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectElements;
        this.star = null;
    }

	selectElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectElementContext);
	    } else {
	        return this.getTypedRuleContext(SelectElementContext,i);
	    }
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectElements(this);
		}
	}


}



class SelectElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectElement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectExpressionElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	VAR_ASSIGN() {
	    return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectExpressionElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectExpressionElement(this);
		}
	}


}

MySqlParser.SelectExpressionElementContext = SelectExpressionElementContext;

class SelectFunctionElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectFunctionElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectFunctionElement(this);
		}
	}


}

MySqlParser.SelectFunctionElementContext = SelectFunctionElementContext;

class SelectStarElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectStarElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectStarElement(this);
		}
	}


}

MySqlParser.SelectStarElementContext = SelectStarElementContext;

class SelectColumnElementContext extends SelectElementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectColumnElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectColumnElement(this);
		}
	}


}

MySqlParser.SelectColumnElementContext = SelectColumnElementContext;

class SelectIntoExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectIntoExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectIntoVariablesContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	assignmentField = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentFieldContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentFieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoVariables(this);
		}
	}


}

MySqlParser.SelectIntoVariablesContext = SelectIntoVariablesContext;

class SelectIntoTextFileContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.filename = null;;
        this.charset = null;;
        this.fieldsFormat = null;;
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	OUTFILE() {
	    return this.getToken(MySqlParser.OUTFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	LINES() {
	    return this.getToken(MySqlParser.LINES, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	selectFieldsInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectFieldsIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectFieldsIntoContext,i);
	    }
	};

	selectLinesInto = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectLinesIntoContext);
	    } else {
	        return this.getTypedRuleContext(SelectLinesIntoContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoTextFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoTextFile(this);
		}
	}


}

MySqlParser.SelectIntoTextFileContext = SelectIntoTextFileContext;

class SelectIntoDumpFileContext extends SelectIntoExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	DUMPFILE() {
	    return this.getToken(MySqlParser.DUMPFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectIntoDumpFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectIntoDumpFile(this);
		}
	}


}

MySqlParser.SelectIntoDumpFileContext = SelectIntoDumpFileContext;

class SelectFieldsIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectFieldsInto;
        this.terminationField = null;
        this.enclosion = null;
        this.escaping = null;
    }

	TERMINATED() {
	    return this.getToken(MySqlParser.TERMINATED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ENCLOSED() {
	    return this.getToken(MySqlParser.ENCLOSED, 0);
	};

	OPTIONALLY() {
	    return this.getToken(MySqlParser.OPTIONALLY, 0);
	};

	ESCAPED() {
	    return this.getToken(MySqlParser.ESCAPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectFieldsInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectFieldsInto(this);
		}
	}


}



class SelectLinesIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_selectLinesInto;
        this.starting = null;
        this.terminationLine = null;
    }

	STARTING() {
	    return this.getToken(MySqlParser.STARTING, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	TERMINATED() {
	    return this.getToken(MySqlParser.TERMINATED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSelectLinesInto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSelectLinesInto(this);
		}
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fromClause;
        this.whereExpr = null;
    }

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	tableSources() {
	    return this.getTypedRuleContext(TableSourcesContext,0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFromClause(this);
		}
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_groupByClause;
    }

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	groupByItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupByItemContext);
	    } else {
	        return this.getTypedRuleContext(GroupByItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	ROLLUP() {
	    return this.getToken(MySqlParser.ROLLUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_havingClause;
        this.havingExpr = null;
    }

	HAVING() {
	    return this.getToken(MySqlParser.HAVING, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHavingClause(this);
		}
	}


}



class WindowClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_windowClause;
    }

	WINDOW() {
	    return this.getToken(MySqlParser.WINDOW, 0);
	};

	windowName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WindowNameContext);
	    } else {
	        return this.getTypedRuleContext(WindowNameContext,i);
	    }
	};

	AS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AS);
	    } else {
	        return this.getToken(MySqlParser.AS, i);
	    }
	};


	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	windowSpec = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WindowSpecContext);
	    } else {
	        return this.getTypedRuleContext(WindowSpecContext,i);
	    }
	};

	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWindowClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWindowClause(this);
		}
	}


}



class GroupByItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_groupByItem;
        this.order = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGroupByItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGroupByItem(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_limitClause;
        this.offset = null;
        this.limit = null;
    }

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	OFFSET() {
	    return this.getToken(MySqlParser.OFFSET, 0);
	};

	limitClauseAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LimitClauseAtomContext);
	    } else {
	        return this.getTypedRuleContext(LimitClauseAtomContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class LimitClauseAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_limitClauseAtom;
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	mysqlVariable() {
	    return this.getTypedRuleContext(MysqlVariableContext,0);
	};

	simpleId() {
	    return this.getTypedRuleContext(SimpleIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLimitClauseAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLimitClauseAtom(this);
		}
	}


}



class StartTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startTransaction;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartTransaction(this);
		}
	}


}



class BeginWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_beginWork;
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBeginWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBeginWork(this);
		}
	}


}



class CommitWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_commitWork;
        this.nochain = null;
        this.norelease = null;
    }

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NO);
	    } else {
	        return this.getToken(MySqlParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCommitWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCommitWork(this);
		}
	}


}



class RollbackWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rollbackWork;
        this.nochain = null;
        this.norelease = null;
    }

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	NO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NO);
	    } else {
	        return this.getToken(MySqlParser.NO, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRollbackWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRollbackWork(this);
		}
	}


}



class SavepointStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_savepointStatement;
    }

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSavepointStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSavepointStatement(this);
		}
	}


}



class RollbackStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_rollbackStatement;
    }

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRollbackStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRollbackStatement(this);
		}
	}


}



class ReleaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_releaseStatement;
    }

	RELEASE() {
	    return this.getToken(MySqlParser.RELEASE, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReleaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReleaseStatement(this);
		}
	}


}



class LockTablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockTables;
    }

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	lockTableElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LockTableElementContext);
	    } else {
	        return this.getTypedRuleContext(LockTableElementContext,i);
	    }
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	waitNowaitClause() {
	    return this.getTypedRuleContext(WaitNowaitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockTables(this);
		}
	}


}



class UnlockTablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unlockTables;
    }

	UNLOCK() {
	    return this.getToken(MySqlParser.UNLOCK, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnlockTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnlockTables(this);
		}
	}


}



class SetAutocommitStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setAutocommitStatement;
        this.autocommitValue = null;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	AUTOCOMMIT() {
	    return this.getToken(MySqlParser.AUTOCOMMIT, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetAutocommitStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetAutocommitStatement(this);
		}
	}


}



class SetTransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setTransactionStatement;
        this.transactionContext = null;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	transactionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionOptionContext);
	    } else {
	        return this.getTypedRuleContext(TransactionOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetTransactionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetTransactionStatement(this);
		}
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionMode;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	CONSISTENT() {
	    return this.getToken(MySqlParser.CONSISTENT, 0);
	};

	SNAPSHOT() {
	    return this.getToken(MySqlParser.SNAPSHOT, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}


}



class LockTableElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockTableElement;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	lockAction() {
	    return this.getTypedRuleContext(LockActionContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockTableElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockTableElement(this);
		}
	}


}



class LockActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lockAction;
    }

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	LOW_PRIORITY() {
	    return this.getToken(MySqlParser.LOW_PRIORITY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLockAction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLockAction(this);
		}
	}


}



class TransactionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionOption;
    }

	ISOLATION() {
	    return this.getToken(MySqlParser.ISOLATION, 0);
	};

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	transactionLevel() {
	    return this.getTypedRuleContext(TransactionLevelContext,0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	WRITE() {
	    return this.getToken(MySqlParser.WRITE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionOption(this);
		}
	}


}



class TransactionLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionLevel;
    }

	REPEATABLE() {
	    return this.getToken(MySqlParser.REPEATABLE, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	COMMITTED() {
	    return this.getToken(MySqlParser.COMMITTED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(MySqlParser.UNCOMMITTED, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(MySqlParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionLevel(this);
		}
	}


}



class ChangeMasterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_changeMaster;
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	masterOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MasterOptionContext);
	    } else {
	        return this.getTypedRuleContext(MasterOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChangeMaster(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChangeMaster(this);
		}
	}


}



class ChangeReplicationFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_changeReplicationFilter;
    }

	CHANGE() {
	    return this.getToken(MySqlParser.CHANGE, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	FILTER() {
	    return this.getToken(MySqlParser.FILTER, 0);
	};

	replicationFilter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReplicationFilterContext);
	    } else {
	        return this.getTypedRuleContext(ReplicationFilterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChangeReplicationFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChangeReplicationFilter(this);
		}
	}


}



class PurgeBinaryLogsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_purgeBinaryLogs;
        this.purgeFormat = null;
        this.fileName = null;
        this.timeValue = null;
    }

	PURGE() {
	    return this.getToken(MySqlParser.PURGE, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	BEFORE() {
	    return this.getToken(MySqlParser.BEFORE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPurgeBinaryLogs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPurgeBinaryLogs(this);
		}
	}


}



class ResetMasterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetMaster;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetMaster(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetMaster(this);
		}
	}


}



class ResetSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetSlave;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetSlave(this);
		}
	}


}



class StartSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startSlave;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	threadType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThreadTypeContext);
	    } else {
	        return this.getTypedRuleContext(ThreadTypeContext,i);
	    }
	};

	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	untilOption() {
	    return this.getTypedRuleContext(UntilOptionContext,0);
	};

	connectionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConnectionOptionContext);
	    } else {
	        return this.getTypedRuleContext(ConnectionOptionContext,i);
	    }
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartSlave(this);
		}
	}


}



class StopSlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stopSlave;
    }

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	threadType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThreadTypeContext);
	    } else {
	        return this.getTypedRuleContext(ThreadTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStopSlave(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStopSlave(this);
		}
	}


}



class StartGroupReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_startGroupReplication;
    }

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStartGroupReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStartGroupReplication(this);
		}
	}


}



class StopGroupReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stopGroupReplication;
    }

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStopGroupReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStopGroupReplication(this);
		}
	}


}



class MasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_masterOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class MasterStringOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	stringMasterOption() {
	    return this.getTypedRuleContext(StringMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterStringOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterStringOption(this);
		}
	}


}

MySqlParser.MasterStringOptionContext = MasterStringOptionContext;

class MasterRealOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MASTER_HEARTBEAT_PERIOD() {
	    return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(MySqlParser.REAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterRealOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterRealOption(this);
		}
	}


}

MySqlParser.MasterRealOptionContext = MasterRealOptionContext;

class MasterBoolOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.boolVal = null;;
        super.copyFrom(ctx);
    }

	boolMasterOption() {
	    return this.getTypedRuleContext(BoolMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterBoolOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterBoolOption(this);
		}
	}


}

MySqlParser.MasterBoolOptionContext = MasterBoolOptionContext;

class MasterUidListOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IGNORE_SERVER_IDS() {
	    return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterUidListOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterUidListOption(this);
		}
	}


}

MySqlParser.MasterUidListOptionContext = MasterUidListOptionContext;

class MasterDecimalOptionContext extends MasterOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	decimalMasterOption() {
	    return this.getTypedRuleContext(DecimalMasterOptionContext,0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterDecimalOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterDecimalOption(this);
		}
	}


}

MySqlParser.MasterDecimalOptionContext = MasterDecimalOptionContext;

class StringMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stringMasterOption;
    }

	MASTER_BIND() {
	    return this.getToken(MySqlParser.MASTER_BIND, 0);
	};

	MASTER_HOST() {
	    return this.getToken(MySqlParser.MASTER_HOST, 0);
	};

	MASTER_USER() {
	    return this.getToken(MySqlParser.MASTER_USER, 0);
	};

	MASTER_PASSWORD() {
	    return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
	};

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	MASTER_SSL_CA() {
	    return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
	};

	MASTER_SSL_CAPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
	};

	MASTER_SSL_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
	};

	MASTER_SSL_CRL() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
	};

	MASTER_SSL_CRLPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
	};

	MASTER_SSL_KEY() {
	    return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
	};

	MASTER_SSL_CIPHER() {
	    return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
	};

	MASTER_TLS_VERSION() {
	    return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringMasterOption(this);
		}
	}


}



class DecimalMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_decimalMasterOption;
    }

	MASTER_PORT() {
	    return this.getToken(MySqlParser.MASTER_PORT, 0);
	};

	MASTER_CONNECT_RETRY() {
	    return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
	};

	MASTER_RETRY_COUNT() {
	    return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
	};

	MASTER_DELAY() {
	    return this.getToken(MySqlParser.MASTER_DELAY, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDecimalMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDecimalMasterOption(this);
		}
	}


}



class BoolMasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_boolMasterOption;
    }

	MASTER_AUTO_POSITION() {
	    return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
	};

	MASTER_SSL() {
	    return this.getToken(MySqlParser.MASTER_SSL, 0);
	};

	MASTER_SSL_VERIFY_SERVER_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBoolMasterOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBoolMasterOption(this);
		}
	}


}



class ChannelOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_channelOption;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChannelOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChannelOption(this);
		}
	}


}



class ReplicationFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_replicationFilter;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class WildIgnoreTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_WILD_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	simpleStrings() {
	    return this.getTypedRuleContext(SimpleStringsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWildIgnoreTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWildIgnoreTableReplication(this);
		}
	}


}

MySqlParser.WildIgnoreTableReplicationContext = WildIgnoreTableReplicationContext;

class DoTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoTableReplication(this);
		}
	}


}

MySqlParser.DoTableReplicationContext = DoTableReplicationContext;

class IgnoreTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIgnoreTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIgnoreTableReplication(this);
		}
	}


}

MySqlParser.IgnoreTableReplicationContext = IgnoreTableReplicationContext;

class RewriteDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_REWRITE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	tablePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablePairContext);
	    } else {
	        return this.getTypedRuleContext(TablePairContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRewriteDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRewriteDbReplication(this);
		}
	}


}

MySqlParser.RewriteDbReplicationContext = RewriteDbReplicationContext;

class DoDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_DO_DB() {
	    return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDoDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDoDbReplication(this);
		}
	}


}

MySqlParser.DoDbReplicationContext = DoDbReplicationContext;

class IgnoreDbReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_IGNORE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIgnoreDbReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIgnoreDbReplication(this);
		}
	}


}

MySqlParser.IgnoreDbReplicationContext = IgnoreDbReplicationContext;

class WildDoTableReplicationContext extends ReplicationFilterContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLICATE_WILD_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	simpleStrings() {
	    return this.getTypedRuleContext(SimpleStringsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWildDoTableReplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWildDoTableReplication(this);
		}
	}


}

MySqlParser.WildDoTableReplicationContext = WildDoTableReplicationContext;

class TablePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tablePair;
        this.firstTable = null;
        this.secondTable = null;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTablePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTablePair(this);
		}
	}


}



class ThreadTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_threadType;
    }

	IO_THREAD() {
	    return this.getToken(MySqlParser.IO_THREAD, 0);
	};

	SQL_THREAD() {
	    return this.getToken(MySqlParser.SQL_THREAD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterThreadType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitThreadType(this);
		}
	}


}



class UntilOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_untilOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GtidsUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.gtids = null;;
        super.copyFrom(ctx);
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	gtuidSet() {
	    return this.getTypedRuleContext(GtuidSetContext,0);
	};

	SQL_BEFORE_GTIDS() {
	    return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
	};

	SQL_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGtidsUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGtidsUntilOption(this);
		}
	}


}

MySqlParser.GtidsUntilOptionContext = GtidsUntilOptionContext;

class SqlGapsUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQL_AFTER_MTS_GAPS() {
	    return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSqlGapsUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSqlGapsUntilOption(this);
		}
	}


}

MySqlParser.SqlGapsUntilOptionContext = SqlGapsUntilOptionContext;

class MasterLogUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMasterLogUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMasterLogUntilOption(this);
		}
	}


}

MySqlParser.MasterLogUntilOptionContext = MasterLogUntilOptionContext;

class RelayLogUntilOptionContext extends UntilOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRelayLogUntilOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRelayLogUntilOption(this);
		}
	}


}

MySqlParser.RelayLogUntilOptionContext = RelayLogUntilOptionContext;

class ConnectionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_connectionOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PluginDirConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptPluginDir = null;;
        super.copyFrom(ctx);
    }

	PLUGIN_DIR() {
	    return this.getToken(MySqlParser.PLUGIN_DIR, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPluginDirConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPluginDirConnectionOption(this);
		}
	}


}

MySqlParser.PluginDirConnectionOptionContext = PluginDirConnectionOptionContext;

class UserConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptUser = null;;
        super.copyFrom(ctx);
    }

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserConnectionOption(this);
		}
	}


}

MySqlParser.UserConnectionOptionContext = UserConnectionOptionContext;

class DefaultAuthConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptDefAuth = null;;
        super.copyFrom(ctx);
    }

	DEFAULT_AUTH() {
	    return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultAuthConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultAuthConnectionOption(this);
		}
	}


}

MySqlParser.DefaultAuthConnectionOptionContext = DefaultAuthConnectionOptionContext;

class PasswordConnectionOptionContext extends ConnectionOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.conOptPassword = null;;
        super.copyFrom(ctx);
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordConnectionOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordConnectionOption(this);
		}
	}


}

MySqlParser.PasswordConnectionOptionContext = PasswordConnectionOptionContext;

class GtuidSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_gtuidSet;
    }

	uuidSet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UuidSetContext);
	    } else {
	        return this.getTypedRuleContext(UuidSetContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGtuidSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGtuidSet(this);
		}
	}


}



class XaStartTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaStartTransaction;
        this.xaStart = null;
        this.xaAction = null;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	JOIN() {
	    return this.getToken(MySqlParser.JOIN, 0);
	};

	RESUME() {
	    return this.getToken(MySqlParser.RESUME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaStartTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaStartTransaction(this);
		}
	}


}



class XaEndTransactionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaEndTransaction;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	SUSPEND() {
	    return this.getToken(MySqlParser.SUSPEND, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	MIGRATE() {
	    return this.getToken(MySqlParser.MIGRATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaEndTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaEndTransaction(this);
		}
	}


}



class XaPrepareStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaPrepareStatement;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaPrepareStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaPrepareStatement(this);
		}
	}


}



class XaCommitWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaCommitWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	ONE() {
	    return this.getToken(MySqlParser.ONE, 0);
	};

	PHASE() {
	    return this.getToken(MySqlParser.PHASE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaCommitWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaCommitWork(this);
		}
	}


}



class XaRollbackWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaRollbackWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaRollbackWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaRollbackWork(this);
		}
	}


}



class XaRecoverWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xaRecoverWork;
    }

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	RECOVER() {
	    return this.getToken(MySqlParser.RECOVER, 0);
	};

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXaRecoverWork(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXaRecoverWork(this);
		}
	}


}



class PrepareStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_prepareStatement;
        this.query = null;
        this.variable = null;
    }

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrepareStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrepareStatement(this);
		}
	}


}



class ExecuteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_executeStatement;
    }

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	userVariables() {
	    return this.getTypedRuleContext(UserVariablesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExecuteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExecuteStatement(this);
		}
	}


}



class DeallocatePrepareContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_deallocatePrepare;
        this.dropFormat = null;
    }

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DEALLOCATE() {
	    return this.getToken(MySqlParser.DEALLOCATE, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeallocatePrepare(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeallocatePrepare(this);
		}
	}


}



class RoutineBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_routineBody;
    }

	blockStatement() {
	    return this.getTypedRuleContext(BlockStatementContext,0);
	};

	sqlStatement() {
	    return this.getTypedRuleContext(SqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoutineBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoutineBody(this);
		}
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_blockStatement;
    }

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	declareVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareVariableContext);
	    } else {
	        return this.getTypedRuleContext(DeclareVariableContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SEMI);
	    } else {
	        return this.getToken(MySqlParser.SEMI, i);
	    }
	};


	declareCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareConditionContext);
	    } else {
	        return this.getTypedRuleContext(DeclareConditionContext,i);
	    }
	};

	declareCursor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareCursorContext);
	    } else {
	        return this.getTypedRuleContext(DeclareCursorContext,i);
	    }
	};

	declareHandler = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeclareHandlerContext);
	    } else {
	        return this.getTypedRuleContext(DeclareHandlerContext,i);
	    }
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBlockStatement(this);
		}
	}


}



class CaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseStatement;
    }

	CASE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.CASE);
	    } else {
	        return this.getToken(MySqlParser.CASE, i);
	    }
	};


	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	caseAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(CaseAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseStatement(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifStatement;
        this._procedureSqlStatement = null;
        this.thenStatements = [];
        this.elseStatements = [];
    }

	IF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IF);
	    } else {
	        return this.getToken(MySqlParser.IF, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	elifAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElifAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(ElifAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class IterateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_iterateStatement;
    }

	ITERATE() {
	    return this.getToken(MySqlParser.ITERATE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIterateStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIterateStatement(this);
		}
	}


}



class LeaveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_leaveStatement;
    }

	LEAVE() {
	    return this.getToken(MySqlParser.LEAVE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLeaveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLeaveStatement(this);
		}
	}


}



class LoopStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loopStatement;
    }

	LOOP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOOP);
	    } else {
	        return this.getToken(MySqlParser.LOOP, i);
	    }
	};


	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoopStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoopStatement(this);
		}
	}


}



class RepeatStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_repeatStatement;
    }

	REPEAT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.REPEAT);
	    } else {
	        return this.getToken(MySqlParser.REPEAT, i);
	    }
	};


	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRepeatStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRepeatStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(MySqlParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_whileStatement;
    }

	WHILE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.WHILE);
	    } else {
	        return this.getToken(MySqlParser.WHILE, i);
	    }
	};


	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COLON_SYMB() {
	    return this.getToken(MySqlParser.COLON_SYMB, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class CursorStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cursorStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CloseCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCloseCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCloseCursor(this);
		}
	}


}

MySqlParser.CloseCursorContext = CloseCursorContext;

class OpenCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOpenCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOpenCursor(this);
		}
	}


}

MySqlParser.OpenCursorContext = OpenCursorContext;

class FetchCursorContext extends CursorStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FETCH() {
	    return this.getToken(MySqlParser.FETCH, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFetchCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFetchCursor(this);
		}
	}


}

MySqlParser.FetchCursorContext = FetchCursorContext;

class DeclareVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareVariable;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareVariable(this);
		}
	}


}



class DeclareConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareCondition;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	CONDITION() {
	    return this.getToken(MySqlParser.CONDITION, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareCondition(this);
		}
	}


}



class DeclareCursorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareCursor;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	CURSOR() {
	    return this.getToken(MySqlParser.CURSOR, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareCursor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareCursor(this);
		}
	}


}



class DeclareHandlerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_declareHandler;
        this.handlerAction = null;
    }

	DECLARE() {
	    return this.getToken(MySqlParser.DECLARE, 0);
	};

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	handlerConditionValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HandlerConditionValueContext);
	    } else {
	        return this.getTypedRuleContext(HandlerConditionValueContext,i);
	    }
	};

	routineBody() {
	    return this.getTypedRuleContext(RoutineBodyContext,0);
	};

	CONTINUE() {
	    return this.getToken(MySqlParser.CONTINUE, 0);
	};

	EXIT() {
	    return this.getToken(MySqlParser.EXIT, 0);
	};

	UNDO() {
	    return this.getToken(MySqlParser.UNDO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDeclareHandler(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDeclareHandler(this);
		}
	}


}



class HandlerConditionValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_handlerConditionValue;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class HandlerConditionWarningContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLWARNING() {
	    return this.getToken(MySqlParser.SQLWARNING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionWarning(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionWarning(this);
		}
	}


}

MySqlParser.HandlerConditionWarningContext = HandlerConditionWarningContext;

class HandlerConditionCodeContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionCode(this);
		}
	}


}

MySqlParser.HandlerConditionCodeContext = HandlerConditionCodeContext;

class HandlerConditionNotfoundContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	FOUND() {
	    return this.getToken(MySqlParser.FOUND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionNotfound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionNotfound(this);
		}
	}


}

MySqlParser.HandlerConditionNotfoundContext = HandlerConditionNotfoundContext;

class HandlerConditionStateContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionState(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionState(this);
		}
	}


}

MySqlParser.HandlerConditionStateContext = HandlerConditionStateContext;

class HandlerConditionExceptionContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SQLEXCEPTION() {
	    return this.getToken(MySqlParser.SQLEXCEPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionException(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionException(this);
		}
	}


}

MySqlParser.HandlerConditionExceptionContext = HandlerConditionExceptionContext;

class HandlerConditionNameContext extends HandlerConditionValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHandlerConditionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHandlerConditionName(this);
		}
	}


}

MySqlParser.HandlerConditionNameContext = HandlerConditionNameContext;

class ProcedureSqlStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_procedureSqlStatement;
    }

	SEMI() {
	    return this.getToken(MySqlParser.SEMI, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	sqlStatement() {
	    return this.getTypedRuleContext(SqlStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterProcedureSqlStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitProcedureSqlStatement(this);
		}
	}


}



class CaseAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseAlternative;
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseAlternative(this);
		}
	}


}



class ElifAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_elifAlternative;
    }

	ELSEIF() {
	    return this.getToken(MySqlParser.ELSEIF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	procedureSqlStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureSqlStatementContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureSqlStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterElifAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitElifAlternative(this);
		}
	}


}



class AlterUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_alterUser;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterUserMysqlV80Context extends AlterUserContext {

    constructor(parser, ctx) {
        super(parser);
        this.tlsNone = null;;
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	userPasswordOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserPasswordOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserPasswordOptionContext,i);
	    }
	};

	userLockOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserLockOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserLockOptionContext,i);
	    }
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(MySqlParser.ATTRIBUTE, 0);
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	roleOption() {
	    return this.getTypedRuleContext(RoleOptionContext,0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUserMysqlV80(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUserMysqlV80(this);
		}
	}


}

MySqlParser.AlterUserMysqlV80Context = AlterUserMysqlV80Context;

class AlterUserMysqlV56Context extends AlterUserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(UserSpecificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAlterUserMysqlV56(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAlterUserMysqlV56(this);
		}
	}


}

MySqlParser.AlterUserMysqlV56Context = AlterUserMysqlV56Context;

class CreateUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createUser;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CreateUserMysqlV56Context extends CreateUserContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUserMysqlV56(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUserMysqlV56(this);
		}
	}


}

MySqlParser.CreateUserMysqlV56Context = CreateUserMysqlV56Context;

class CreateUserMysqlV80Context extends CreateUserContext {

    constructor(parser, ctx) {
        super(parser);
        this.tlsNone = null;;
        super.copyFrom(ctx);
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	roleOption() {
	    return this.getTypedRuleContext(RoleOptionContext,0);
	};

	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	userPasswordOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserPasswordOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserPasswordOptionContext,i);
	    }
	};

	userLockOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserLockOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserLockOptionContext,i);
	    }
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(MySqlParser.ATTRIBUTE, 0);
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUserMysqlV80(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUserMysqlV80(this);
		}
	}


}

MySqlParser.CreateUserMysqlV80Context = CreateUserMysqlV80Context;

class DropUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dropUser;
    }

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDropUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDropUser(this);
		}
	}


}



class GrantStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantStatement;
        this.privilegeObject = null;
        this.tlsNone = null;
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GRANT);
	    } else {
	        return this.getToken(MySqlParser.GRANT, i);
	    }
	};


	privelegeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivelegeClauseContext);
	    } else {
	        return this.getTypedRuleContext(PrivelegeClauseContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	privilegeLevel() {
	    return this.getTypedRuleContext(PrivilegeLevelContext,0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userAuthOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserAuthOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserAuthOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.WITH);
	    } else {
	        return this.getToken(MySqlParser.WITH, i);
	    }
	};


	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	roleOption() {
	    return this.getTypedRuleContext(RoleOptionContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	tlsOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TlsOptionContext);
	    } else {
	        return this.getTypedRuleContext(TlsOptionContext,i);
	    }
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	OPTION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.OPTION);
	    } else {
	        return this.getToken(MySqlParser.OPTION, i);
	    }
	};


	userResourceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserResourceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UserResourceOptionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AND);
	    } else {
	        return this.getToken(MySqlParser.AND, i);
	    }
	};


	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	ADMIN() {
	    return this.getToken(MySqlParser.ADMIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantStatement(this);
		}
	}


}



class RoleOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_roleOption;
    }

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	EXCEPT() {
	    return this.getToken(MySqlParser.EXCEPT, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoleOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoleOption(this);
		}
	}


}



class GrantProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_grantProxy;
        this.fromFirst = null;
        this.toFirst = null;
        this._userName = null;
        this.toOther = [];
    }

	GRANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GRANT);
	    } else {
	        return this.getToken(MySqlParser.GRANT, i);
	    }
	};


	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGrantProxy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGrantProxy(this);
		}
	}


}



class RenameUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameUser;
    }

	RENAME() {
	    return this.getToken(MySqlParser.RENAME, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	renameUserClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RenameUserClauseContext);
	    } else {
	        return this.getTypedRuleContext(RenameUserClauseContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameUser(this);
		}
	}


}



class RevokeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DetailRevokeContext extends RevokeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.privilegeObject = null;;
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	privelegeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrivelegeClauseContext);
	    } else {
	        return this.getTypedRuleContext(PrivelegeClauseContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	privilegeLevel() {
	    return this.getTypedRuleContext(PrivilegeLevelContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDetailRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDetailRevoke(this);
		}
	}


}

MySqlParser.DetailRevokeContext = DetailRevokeContext;

class RoleRevokeContext extends RevokeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoleRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoleRevoke(this);
		}
	}


}

MySqlParser.RoleRevokeContext = RoleRevokeContext;

class ShortRevokeContext extends RevokeStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShortRevoke(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShortRevoke(this);
		}
	}


}

MySqlParser.ShortRevokeContext = ShortRevokeContext;

class RevokeProxyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_revokeProxy;
        this.onUser = null;
        this.fromFirst = null;
        this._userName = null;
        this.fromOther = [];
    }

	REVOKE() {
	    return this.getToken(MySqlParser.REVOKE, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRevokeProxy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRevokeProxy(this);
		}
	}


}



class SetPasswordStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setPasswordStatement;
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	passwordFunctionClause() {
	    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetPasswordStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetPasswordStatement(this);
		}
	}


}



class UserSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userSpecification;
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	userPasswordOption() {
	    return this.getTypedRuleContext(UserPasswordOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserSpecification(this);
		}
	}


}



class UserAuthOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userAuthOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SimpleAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleAuthOption(this);
		}
	}


}

MySqlParser.SimpleAuthOptionContext = SimpleAuthOptionContext;

class ModuleAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	authenticationRule() {
	    return this.getTypedRuleContext(AuthenticationRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterModuleAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitModuleAuthOption(this);
		}
	}


}

MySqlParser.ModuleAuthOptionContext = ModuleAuthOptionContext;

class RandomAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	RANDOM() {
	    return this.getToken(MySqlParser.RANDOM, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	authOptionClause() {
	    return this.getTypedRuleContext(AuthOptionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRandomAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRandomAuthOption(this);
		}
	}


}

MySqlParser.RandomAuthOptionContext = RandomAuthOptionContext;

class StringAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	authOptionClause() {
	    return this.getTypedRuleContext(AuthOptionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringAuthOption(this);
		}
	}


}

MySqlParser.StringAuthOptionContext = StringAuthOptionContext;

class HashAuthOptionContext extends UserAuthOptionContext {

    constructor(parser, ctx) {
        super(parser);
        this.hashed = null;;
        super.copyFrom(ctx);
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHashAuthOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHashAuthOption(this);
		}
	}


}

MySqlParser.HashAuthOptionContext = HashAuthOptionContext;

class AuthOptionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_authOptionClause;
    }

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	RETAIN() {
	    return this.getToken(MySqlParser.RETAIN, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAuthOptionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAuthOptionClause(this);
		}
	}


}



class AuthenticationRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_authenticationRule;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PasswordModuleOptionContext extends AuthenticationRuleContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	authPlugin() {
	    return this.getTypedRuleContext(AuthPluginContext,0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	passwordFunctionClause() {
	    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordModuleOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordModuleOption(this);
		}
	}


}

MySqlParser.PasswordModuleOptionContext = PasswordModuleOptionContext;

class ModuleContext extends AuthenticationRuleContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	authPlugin() {
	    return this.getTypedRuleContext(AuthPluginContext,0);
	};

	authOptionClause() {
	    return this.getTypedRuleContext(AuthOptionClauseContext,0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	RANDOM() {
	    return this.getToken(MySqlParser.RANDOM, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitModule(this);
		}
	}


}

MySqlParser.ModuleContext = ModuleContext;

class TlsOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tlsOption;
    }

	SSL() {
	    return this.getToken(MySqlParser.SSL, 0);
	};

	X509() {
	    return this.getToken(MySqlParser.X509, 0);
	};

	CIPHER() {
	    return this.getToken(MySqlParser.CIPHER, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ISSUER() {
	    return this.getToken(MySqlParser.ISSUER, 0);
	};

	SUBJECT() {
	    return this.getToken(MySqlParser.SUBJECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTlsOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTlsOption(this);
		}
	}


}



class UserResourceOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userResourceOption;
    }

	MAX_QUERIES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	MAX_UPDATES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
	};

	MAX_CONNECTIONS_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
	};

	MAX_USER_CONNECTIONS() {
	    return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserResourceOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserResourceOption(this);
		}
	}


}



class UserPasswordOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userPasswordOption;
        this.expireType = null;
    }

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	EXPIRE() {
	    return this.getToken(MySqlParser.EXPIRE, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	NEVER() {
	    return this.getToken(MySqlParser.NEVER, 0);
	};

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	HISTORY() {
	    return this.getToken(MySqlParser.HISTORY, 0);
	};

	REUSE() {
	    return this.getToken(MySqlParser.REUSE, 0);
	};

	REQUIRE() {
	    return this.getToken(MySqlParser.REQUIRE, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	OPTIONAL() {
	    return this.getToken(MySqlParser.OPTIONAL, 0);
	};

	FAILED_LOGIN_ATTEMPTS() {
	    return this.getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0);
	};

	PASSWORD_LOCK_TIME() {
	    return this.getToken(MySqlParser.PASSWORD_LOCK_TIME, 0);
	};

	UNBOUNDED() {
	    return this.getToken(MySqlParser.UNBOUNDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserPasswordOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserPasswordOption(this);
		}
	}


}



class UserLockOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userLockOption;
        this.lockType = null;
    }

	ACCOUNT() {
	    return this.getToken(MySqlParser.ACCOUNT, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	UNLOCK() {
	    return this.getToken(MySqlParser.UNLOCK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserLockOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserLockOption(this);
		}
	}


}



class PrivelegeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privelegeClause;
    }

	privilege() {
	    return this.getTypedRuleContext(PrivilegeContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivelegeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivelegeClause(this);
		}
	}


}



class PrivilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilege;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	ALTER() {
	    return this.getToken(MySqlParser.ALTER, 0);
	};

	ROUTINE() {
	    return this.getToken(MySqlParser.ROUTINE, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	DELETE() {
	    return this.getToken(MySqlParser.DELETE, 0);
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	FILE() {
	    return this.getToken(MySqlParser.FILE, 0);
	};

	GRANT() {
	    return this.getToken(MySqlParser.GRANT, 0);
	};

	OPTION() {
	    return this.getToken(MySqlParser.OPTION, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	PROCESS() {
	    return this.getToken(MySqlParser.PROCESS, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	REFERENCES() {
	    return this.getToken(MySqlParser.REFERENCES, 0);
	};

	RELOAD() {
	    return this.getToken(MySqlParser.RELOAD, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	CLIENT() {
	    return this.getToken(MySqlParser.CLIENT, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	SELECT() {
	    return this.getToken(MySqlParser.SELECT, 0);
	};

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(MySqlParser.DATABASES, 0);
	};

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	SUPER() {
	    return this.getToken(MySqlParser.SUPER, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	USAGE() {
	    return this.getToken(MySqlParser.USAGE, 0);
	};

	APPLICATION_PASSWORD_ADMIN() {
	    return this.getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0);
	};

	AUDIT_ABORT_EXEMPT() {
	    return this.getToken(MySqlParser.AUDIT_ABORT_EXEMPT, 0);
	};

	AUDIT_ADMIN() {
	    return this.getToken(MySqlParser.AUDIT_ADMIN, 0);
	};

	AUTHENTICATION_POLICY_ADMIN() {
	    return this.getToken(MySqlParser.AUTHENTICATION_POLICY_ADMIN, 0);
	};

	BACKUP_ADMIN() {
	    return this.getToken(MySqlParser.BACKUP_ADMIN, 0);
	};

	BINLOG_ADMIN() {
	    return this.getToken(MySqlParser.BINLOG_ADMIN, 0);
	};

	BINLOG_ENCRYPTION_ADMIN() {
	    return this.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0);
	};

	CLONE_ADMIN() {
	    return this.getToken(MySqlParser.CLONE_ADMIN, 0);
	};

	CONNECTION_ADMIN() {
	    return this.getToken(MySqlParser.CONNECTION_ADMIN, 0);
	};

	ENCRYPTION_KEY_ADMIN() {
	    return this.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0);
	};

	FIREWALL_ADMIN() {
	    return this.getToken(MySqlParser.FIREWALL_ADMIN, 0);
	};

	FIREWALL_EXEMPT() {
	    return this.getToken(MySqlParser.FIREWALL_EXEMPT, 0);
	};

	FIREWALL_USER() {
	    return this.getToken(MySqlParser.FIREWALL_USER, 0);
	};

	FLUSH_OPTIMIZER_COSTS() {
	    return this.getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0);
	};

	FLUSH_STATUS() {
	    return this.getToken(MySqlParser.FLUSH_STATUS, 0);
	};

	FLUSH_TABLES() {
	    return this.getToken(MySqlParser.FLUSH_TABLES, 0);
	};

	FLUSH_USER_RESOURCES() {
	    return this.getToken(MySqlParser.FLUSH_USER_RESOURCES, 0);
	};

	GROUP_REPLICATION_ADMIN() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0);
	};

	INNODB_REDO_LOG_ARCHIVE() {
	    return this.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0);
	};

	INNODB_REDO_LOG_ENABLE() {
	    return this.getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0);
	};

	NDB_STORED_USER() {
	    return this.getToken(MySqlParser.NDB_STORED_USER, 0);
	};

	PASSWORDLESS_USER_ADMIN() {
	    return this.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0);
	};

	PERSIST_RO_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0);
	};

	REPLICATION_APPLIER() {
	    return this.getToken(MySqlParser.REPLICATION_APPLIER, 0);
	};

	REPLICATION_SLAVE_ADMIN() {
	    return this.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0);
	};

	RESOURCE_GROUP_ADMIN() {
	    return this.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0);
	};

	RESOURCE_GROUP_USER() {
	    return this.getToken(MySqlParser.RESOURCE_GROUP_USER, 0);
	};

	ROLE_ADMIN() {
	    return this.getToken(MySqlParser.ROLE_ADMIN, 0);
	};

	SERVICE_CONNECTION_ADMIN() {
	    return this.getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0);
	};

	SESSION_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	};

	SET_USER_ID() {
	    return this.getToken(MySqlParser.SET_USER_ID, 0);
	};

	SKIP_QUERY_REWRITE() {
	    return this.getToken(MySqlParser.SKIP_QUERY_REWRITE, 0);
	};

	SHOW_ROUTINE() {
	    return this.getToken(MySqlParser.SHOW_ROUTINE, 0);
	};

	SYSTEM_USER() {
	    return this.getToken(MySqlParser.SYSTEM_USER, 0);
	};

	SYSTEM_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0);
	};

	TABLE_ENCRYPTION_ADMIN() {
	    return this.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0);
	};

	TP_CONNECTION_ADMIN() {
	    return this.getToken(MySqlParser.TP_CONNECTION_ADMIN, 0);
	};

	VERSION_TOKEN_ADMIN() {
	    return this.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0);
	};

	XA_RECOVER_ADMIN() {
	    return this.getToken(MySqlParser.XA_RECOVER_ADMIN, 0);
	};

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	S3() {
	    return this.getToken(MySqlParser.S3, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	INVOKE() {
	    return this.getToken(MySqlParser.INVOKE, 0);
	};

	LAMBDA() {
	    return this.getToken(MySqlParser.LAMBDA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilege(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilege(this);
		}
	}


}



class PrivilegeLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegeLevel;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DefiniteSchemaPrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteSchemaPrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteSchemaPrivLevel(this);
		}
	}


}

MySqlParser.DefiniteSchemaPrivLevelContext = DefiniteSchemaPrivLevelContext;

class DefiniteFullTablePrivLevel2Context extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId() {
	    return this.getTypedRuleContext(DottedIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteFullTablePrivLevel2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteFullTablePrivLevel2(this);
		}
	}


}

MySqlParser.DefiniteFullTablePrivLevel2Context = DefiniteFullTablePrivLevel2Context;

class DefiniteFullTablePrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteFullTablePrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteFullTablePrivLevel(this);
		}
	}


}

MySqlParser.DefiniteFullTablePrivLevelContext = DefiniteFullTablePrivLevelContext;

class GlobalPrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STAR);
	    } else {
	        return this.getToken(MySqlParser.STAR, i);
	    }
	};


	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGlobalPrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGlobalPrivLevel(this);
		}
	}


}

MySqlParser.GlobalPrivLevelContext = GlobalPrivLevelContext;

class DefiniteTablePrivLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefiniteTablePrivLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefiniteTablePrivLevel(this);
		}
	}


}

MySqlParser.DefiniteTablePrivLevelContext = DefiniteTablePrivLevelContext;

class CurrentSchemaPriviLevelContext extends PrivilegeLevelContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCurrentSchemaPriviLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCurrentSchemaPriviLevel(this);
		}
	}


}

MySqlParser.CurrentSchemaPriviLevelContext = CurrentSchemaPriviLevelContext;

class RenameUserClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_renameUserClause;
        this.fromFirst = null;
        this.toFirst = null;
    }

	TO() {
	    return this.getToken(MySqlParser.TO, 0);
	};

	userName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserNameContext);
	    } else {
	        return this.getTypedRuleContext(UserNameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRenameUserClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRenameUserClause(this);
		}
	}


}



class AnalyzeTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_analyzeTable;
        this.actionOption = null;
    }

	ANALYZE() {
	    return this.getToken(MySqlParser.ANALYZE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	HISTOGRAM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.HISTOGRAM);
	    } else {
	        return this.getToken(MySqlParser.HISTOGRAM, i);
	    }
	};


	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	fullColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(FullColumnNameContext,i);
	    }
	};

	DROP() {
	    return this.getToken(MySqlParser.DROP, 0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	BUCKETS() {
	    return this.getToken(MySqlParser.BUCKETS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAnalyzeTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAnalyzeTable(this);
		}
	}


}



class CheckTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checkTable;
    }

	CHECK() {
	    return this.getToken(MySqlParser.CHECK, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	checkTableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CheckTableOptionContext);
	    } else {
	        return this.getTypedRuleContext(CheckTableOptionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTable(this);
		}
	}


}



class ChecksumTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checksumTable;
        this.actionOption = null;
    }

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChecksumTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChecksumTable(this);
		}
	}


}



class OptimizeTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_optimizeTable;
        this.actionOption = null;
    }

	OPTIMIZE() {
	    return this.getToken(MySqlParser.OPTIMIZE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOptimizeTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOptimizeTable(this);
		}
	}


}



class RepairTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_repairTable;
        this.actionOption = null;
    }

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	USE_FRM() {
	    return this.getToken(MySqlParser.USE_FRM, 0);
	};

	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRepairTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRepairTable(this);
		}
	}


}



class CheckTableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_checkTableOption;
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	FAST() {
	    return this.getToken(MySqlParser.FAST, 0);
	};

	MEDIUM() {
	    return this.getToken(MySqlParser.MEDIUM, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	CHANGED() {
	    return this.getToken(MySqlParser.CHANGED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCheckTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCheckTableOption(this);
		}
	}


}



class CreateUdfunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_createUdfunction;
        this.returnType = null;
    }

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	STRING() {
	    return this.getToken(MySqlParser.STRING, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	REAL() {
	    return this.getToken(MySqlParser.REAL, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	AGGREGATE() {
	    return this.getToken(MySqlParser.AGGREGATE, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCreateUdfunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCreateUdfunction(this);
		}
	}


}



class InstallPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_installPlugin;
    }

	INSTALL() {
	    return this.getToken(MySqlParser.INSTALL, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInstallPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInstallPlugin(this);
		}
	}


}



class UninstallPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uninstallPlugin;
    }

	UNINSTALL() {
	    return this.getToken(MySqlParser.UNINSTALL, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUninstallPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUninstallPlugin(this);
		}
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_setStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SetTransactionContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setTransactionStatement() {
	    return this.getTypedRuleContext(SetTransactionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetTransaction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetTransaction(this);
		}
	}


}

MySqlParser.SetTransactionContext = SetTransactionContext;

class SetCharsetContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	charSet() {
	    return this.getTypedRuleContext(CharSetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetCharset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetCharset(this);
		}
	}


}

MySqlParser.SetCharsetContext = SetCharsetContext;

class SetNamesContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	NAMES() {
	    return this.getToken(MySqlParser.NAMES, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetNames(this);
		}
	}


}

MySqlParser.SetNamesContext = SetNamesContext;

class SetPasswordContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setPasswordStatement() {
	    return this.getTypedRuleContext(SetPasswordStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetPassword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetPassword(this);
		}
	}


}

MySqlParser.SetPasswordContext = SetPasswordContext;

class SetAutocommitContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	setAutocommitStatement() {
	    return this.getTypedRuleContext(SetAutocommitStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetAutocommit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetAutocommit(this);
		}
	}


}

MySqlParser.SetAutocommitContext = SetAutocommitContext;

class SetNewValueInsideTriggerContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	fullId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullIdContext);
	    } else {
	        return this.getTypedRuleContext(FullIdContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	VAR_ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.VAR_ASSIGN);
	    } else {
	        return this.getToken(MySqlParser.VAR_ASSIGN, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetNewValueInsideTrigger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetNewValueInsideTrigger(this);
		}
	}


}

MySqlParser.SetNewValueInsideTriggerContext = SetNewValueInsideTriggerContext;

class SetVariableContext extends SetStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	variableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableClauseContext);
	    } else {
	        return this.getTypedRuleContext(VariableClauseContext,i);
	    }
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	VAR_ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.VAR_ASSIGN);
	    } else {
	        return this.getToken(MySqlParser.VAR_ASSIGN, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	ON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ON);
	    } else {
	        return this.getToken(MySqlParser.ON, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSetVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSetVariable(this);
		}
	}


}

MySqlParser.SetVariableContext = SetVariableContext;

class ShowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShowOpenTablesContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowOpenTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowOpenTables(this);
		}
	}


}

MySqlParser.ShowOpenTablesContext = ShowOpenTablesContext;

class ShowGlobalInfoContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showGlobalInfoClause() {
	    return this.getTypedRuleContext(ShowGlobalInfoClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGlobalInfo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGlobalInfo(this);
		}
	}


}

MySqlParser.ShowGlobalInfoContext = ShowGlobalInfoContext;

class ShowCreateFullIdObjectContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.namedEntity = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TRIGGER() {
	    return this.getToken(MySqlParser.TRIGGER, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateFullIdObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateFullIdObject(this);
		}
	}


}

MySqlParser.ShowCreateFullIdObjectContext = ShowCreateFullIdObjectContext;

class ShowCreateUserContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateUser(this);
		}
	}


}

MySqlParser.ShowCreateUserContext = ShowCreateUserContext;

class ShowErrorsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.errorFormat = null;;
        this.offset = null;;
        this.rowCount = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowErrors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowErrors(this);
		}
	}


}

MySqlParser.ShowErrorsContext = ShowErrorsContext;

class ShowCountErrorsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.errorFormat = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCountErrors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCountErrors(this);
		}
	}


}

MySqlParser.ShowCountErrorsContext = ShowCountErrorsContext;

class ShowObjectFilterContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showCommonEntity() {
	    return this.getTypedRuleContext(ShowCommonEntityContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowObjectFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowObjectFilter(this);
		}
	}


}

MySqlParser.ShowObjectFilterContext = ShowObjectFilterContext;

class ShowCreateDbContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(MySqlParser.CREATE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCreateDb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCreateDb(this);
		}
	}


}

MySqlParser.ShowCreateDbContext = ShowCreateDbContext;

class ShowEngineContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.engineOption = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	engineName() {
	    return this.getTypedRuleContext(EngineNameContext,0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	MUTEX() {
	    return this.getToken(MySqlParser.MUTEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowEngine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowEngine(this);
		}
	}


}

MySqlParser.ShowEngineContext = ShowEngineContext;

class ShowSchemaFilterContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.schemaFormat = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	showSchemaEntity() {
	    return this.getTypedRuleContext(ShowSchemaEntityContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSchemaFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSchemaFilter(this);
		}
	}


}

MySqlParser.ShowSchemaFilterContext = ShowSchemaFilterContext;

class ShowIndexesContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.indexFormat = null;;
        this.tableFormat = null;;
        this.schemaFormat = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INDEXES() {
	    return this.getToken(MySqlParser.INDEXES, 0);
	};

	KEYS() {
	    return this.getToken(MySqlParser.KEYS, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.FROM);
	    } else {
	        return this.getToken(MySqlParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IN);
	    } else {
	        return this.getToken(MySqlParser.IN, i);
	    }
	};


	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowIndexes(this);
		}
	}


}

MySqlParser.ShowIndexesContext = ShowIndexesContext;

class ShowLogEventsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.logFormat = null;;
        this.filename = null;;
        this.fromPosition = null;;
        this.offset = null;;
        this.rowCount = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	RELAYLOG() {
	    return this.getToken(MySqlParser.RELAYLOG, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowLogEvents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowLogEvents(this);
		}
	}


}

MySqlParser.ShowLogEventsContext = ShowLogEventsContext;

class ShowMasterLogsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.logFormat = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowMasterLogs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowMasterLogs(this);
		}
	}


}

MySqlParser.ShowMasterLogsContext = ShowMasterLogsContext;

class ShowGrantsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	GRANTS() {
	    return this.getToken(MySqlParser.GRANTS, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGrants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGrants(this);
		}
	}


}

MySqlParser.ShowGrantsContext = ShowGrantsContext;

class ShowSlaveStatusContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSlaveStatus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSlaveStatus(this);
		}
	}


}

MySqlParser.ShowSlaveStatusContext = ShowSlaveStatusContext;

class ShowRoutineContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.routine = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	CODE() {
	    return this.getToken(MySqlParser.CODE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowRoutine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowRoutine(this);
		}
	}


}

MySqlParser.ShowRoutineContext = ShowRoutineContext;

class ShowProfileContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.queryCount = null;;
        this.offset = null;;
        this.rowCount = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	PROFILE() {
	    return this.getToken(MySqlParser.PROFILE, 0);
	};

	showProfileType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShowProfileTypeContext);
	    } else {
	        return this.getTypedRuleContext(ShowProfileTypeContext,i);
	    }
	};

	LIMIT() {
	    return this.getToken(MySqlParser.LIMIT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowProfile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowProfile(this);
		}
	}


}

MySqlParser.ShowProfileContext = ShowProfileContext;

class ShowColumnsContext extends ShowStatementContext {

    constructor(parser, ctx) {
        super(parser);
        this.columnsFormat = null;;
        this.tableFormat = null;;
        this.schemaFormat = null;;
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(MySqlParser.SHOW, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	FROM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.FROM);
	    } else {
	        return this.getToken(MySqlParser.FROM, i);
	    }
	};


	IN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.IN);
	    } else {
	        return this.getToken(MySqlParser.IN, i);
	    }
	};


	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	showFilter() {
	    return this.getTypedRuleContext(ShowFilterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowColumns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowColumns(this);
		}
	}


}

MySqlParser.ShowColumnsContext = ShowColumnsContext;

class VariableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_variableClause;
    }

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	GLOBAL_ID() {
	    return this.getToken(MySqlParser.GLOBAL_ID, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	AT_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.AT_SIGN);
	    } else {
	        return this.getToken(MySqlParser.AT_SIGN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVariableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVariableClause(this);
		}
	}


}



class ShowCommonEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showCommonEntity;
    }

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	COLLATION() {
	    return this.getToken(MySqlParser.COLLATION, 0);
	};

	DATABASES() {
	    return this.getToken(MySqlParser.DATABASES, 0);
	};

	SCHEMAS() {
	    return this.getToken(MySqlParser.SCHEMAS, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	PROCEDURE() {
	    return this.getToken(MySqlParser.PROCEDURE, 0);
	};

	VARIABLES() {
	    return this.getToken(MySqlParser.VARIABLES, 0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowCommonEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowCommonEntity(this);
		}
	}


}



class ShowFilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showFilter;
    }

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	WHERE() {
	    return this.getToken(MySqlParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowFilter(this);
		}
	}


}



class ShowGlobalInfoClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showGlobalInfoClause;
    }

	ENGINES() {
	    return this.getToken(MySqlParser.ENGINES, 0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	PLUGINS() {
	    return this.getToken(MySqlParser.PLUGINS, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	PROCESSLIST() {
	    return this.getToken(MySqlParser.PROCESSLIST, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	PROFILES() {
	    return this.getToken(MySqlParser.PROFILES, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	AUTHORS() {
	    return this.getToken(MySqlParser.AUTHORS, 0);
	};

	CONTRIBUTORS() {
	    return this.getToken(MySqlParser.CONTRIBUTORS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowGlobalInfoClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowGlobalInfoClause(this);
		}
	}


}



class ShowSchemaEntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showSchemaEntity;
    }

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	TRIGGERS() {
	    return this.getToken(MySqlParser.TRIGGERS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowSchemaEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowSchemaEntity(this);
		}
	}


}



class ShowProfileTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_showProfileType;
    }

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	BLOCK() {
	    return this.getToken(MySqlParser.BLOCK, 0);
	};

	IO() {
	    return this.getToken(MySqlParser.IO, 0);
	};

	CONTEXT() {
	    return this.getToken(MySqlParser.CONTEXT, 0);
	};

	SWITCHES() {
	    return this.getToken(MySqlParser.SWITCHES, 0);
	};

	CPU() {
	    return this.getToken(MySqlParser.CPU, 0);
	};

	IPC() {
	    return this.getToken(MySqlParser.IPC, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	PAGE() {
	    return this.getToken(MySqlParser.PAGE, 0);
	};

	FAULTS() {
	    return this.getToken(MySqlParser.FAULTS, 0);
	};

	SOURCE() {
	    return this.getToken(MySqlParser.SOURCE, 0);
	};

	SWAPS() {
	    return this.getToken(MySqlParser.SWAPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShowProfileType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShowProfileType(this);
		}
	}


}



class BinlogStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_binlogStatement;
    }

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinlogStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinlogStatement(this);
		}
	}


}



class CacheIndexStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_cacheIndexStatement;
        this.schema = null;
    }

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	tableIndexes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableIndexesContext);
	    } else {
	        return this.getTypedRuleContext(TableIndexesContext,i);
	    }
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCacheIndexStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCacheIndexStatement(this);
		}
	}


}



class FlushStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushStatement;
        this.flushFormat = null;
    }

	FLUSH() {
	    return this.getToken(MySqlParser.FLUSH, 0);
	};

	flushOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlushOptionContext);
	    } else {
	        return this.getTypedRuleContext(FlushOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	NO_WRITE_TO_BINLOG() {
	    return this.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFlushStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFlushStatement(this);
		}
	}


}



class KillStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_killStatement;
        this.connectionFormat = null;
    }

	KILL() {
	    return this.getToken(MySqlParser.KILL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKillStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKillStatement(this);
		}
	}


}



class LoadIndexIntoCacheContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadIndexIntoCache;
    }

	LOAD() {
	    return this.getToken(MySqlParser.LOAD, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	INTO() {
	    return this.getToken(MySqlParser.INTO, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	loadedTableIndexes = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LoadedTableIndexesContext);
	    } else {
	        return this.getTypedRuleContext(LoadedTableIndexesContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadIndexIntoCache(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadIndexIntoCache(this);
		}
	}


}



class ResetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resetStatement;
    }

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResetStatement(this);
		}
	}


}



class ShutdownStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_shutdownStatement;
    }

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterShutdownStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitShutdownStatement(this);
		}
	}


}



class TableIndexesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableIndexes;
        this.indexFormat = null;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	uidList() {
	    return this.getTypedRuleContext(UidListContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableIndexes(this);
		}
	}


}



class FlushOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushOption;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	tables() {
	    return this.getTypedRuleContext(TablesContext,0);
	};

	flushTableOption() {
	    return this.getTypedRuleContext(FlushTableOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableFlushOption(this);
		}
	}


}

MySqlParser.TableFlushOptionContext = TableFlushOptionContext;

class ChannelFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	channelOption() {
	    return this.getTypedRuleContext(ChannelOptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterChannelFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitChannelFlushOption(this);
		}
	}


}

MySqlParser.ChannelFlushOptionContext = ChannelFlushOptionContext;

class SimpleFlushOptionContext extends FlushOptionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DES_KEY_FILE() {
	    return this.getToken(MySqlParser.DES_KEY_FILE, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	OPTIMIZER_COSTS() {
	    return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	USER_RESOURCES() {
	    return this.getToken(MySqlParser.USER_RESOURCES, 0);
	};

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	ERROR() {
	    return this.getToken(MySqlParser.ERROR, 0);
	};

	GENERAL() {
	    return this.getToken(MySqlParser.GENERAL, 0);
	};

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	SLOW() {
	    return this.getToken(MySqlParser.SLOW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleFlushOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleFlushOption(this);
		}
	}


}

MySqlParser.SimpleFlushOptionContext = SimpleFlushOptionContext;

class FlushTableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_flushTableOption;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	READ() {
	    return this.getToken(MySqlParser.READ, 0);
	};

	LOCK() {
	    return this.getToken(MySqlParser.LOCK, 0);
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	EXPORT() {
	    return this.getToken(MySqlParser.EXPORT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFlushTableOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFlushTableOption(this);
		}
	}


}



class LoadedTableIndexesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_loadedTableIndexes;
        this.partitionList = null;
        this.indexFormat = null;
        this.indexList = null;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	IGNORE() {
	    return this.getToken(MySqlParser.IGNORE, 0);
	};

	LEAVES() {
	    return this.getToken(MySqlParser.LEAVES, 0);
	};

	uidList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidListContext);
	    } else {
	        return this.getTypedRuleContext(UidListContext,i);
	    }
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	INDEX() {
	    return this.getToken(MySqlParser.INDEX, 0);
	};

	KEY() {
	    return this.getToken(MySqlParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLoadedTableIndexes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLoadedTableIndexes(this);
		}
	}


}



class SimpleDescribeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleDescribeStatement;
        this.command = null;
        this.column = null;
        this.pattern = null;
    }

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	EXPLAIN() {
	    return this.getToken(MySqlParser.EXPLAIN, 0);
	};

	DESCRIBE() {
	    return this.getToken(MySqlParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleDescribeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleDescribeStatement(this);
		}
	}


}



class FullDescribeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullDescribeStatement;
        this.command = null;
        this.formatType = null;
        this.formatValue = null;
    }

	describeObjectClause() {
	    return this.getTypedRuleContext(DescribeObjectClauseContext,0);
	};

	EXPLAIN() {
	    return this.getToken(MySqlParser.EXPLAIN, 0);
	};

	DESCRIBE() {
	    return this.getToken(MySqlParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	TRADITIONAL() {
	    return this.getToken(MySqlParser.TRADITIONAL, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullDescribeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullDescribeStatement(this);
		}
	}


}



class HelpStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_helpStatement;
    }

	HELP() {
	    return this.getToken(MySqlParser.HELP, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHelpStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHelpStatement(this);
		}
	}


}



class UseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_useStatement;
    }

	USE() {
	    return this.getToken(MySqlParser.USE, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUseStatement(this);
		}
	}


}



class SignalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_signalStatement;
    }

	SIGNAL() {
	    return this.getToken(MySqlParser.SIGNAL, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	REVERSE_QUOTE_ID() {
	    return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	signalConditionInformation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SignalConditionInformationContext);
	    } else {
	        return this.getTypedRuleContext(SignalConditionInformationContext,i);
	    }
	};

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSignalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSignalStatement(this);
		}
	}


}



class ResignalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_resignalStatement;
    }

	RESIGNAL() {
	    return this.getToken(MySqlParser.RESIGNAL, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	REVERSE_QUOTE_ID() {
	    return this.getToken(MySqlParser.REVERSE_QUOTE_ID, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	signalConditionInformation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SignalConditionInformationContext);
	    } else {
	        return this.getTypedRuleContext(SignalConditionInformationContext,i);
	    }
	};

	SQLSTATE() {
	    return this.getToken(MySqlParser.SQLSTATE, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterResignalStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitResignalStatement(this);
		}
	}


}



class SignalConditionInformationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_signalConditionInformation;
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	CLASS_ORIGIN() {
	    return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	};

	SUBCLASS_ORIGIN() {
	    return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	};

	MESSAGE_TEXT() {
	    return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	};

	MYSQL_ERRNO() {
	    return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	};

	CONSTRAINT_CATALOG() {
	    return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	};

	CONSTRAINT_SCHEMA() {
	    return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	};

	CONSTRAINT_NAME() {
	    return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	};

	CATALOG_NAME() {
	    return this.getToken(MySqlParser.CATALOG_NAME, 0);
	};

	SCHEMA_NAME() {
	    return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	};

	TABLE_NAME() {
	    return this.getToken(MySqlParser.TABLE_NAME, 0);
	};

	COLUMN_NAME() {
	    return this.getToken(MySqlParser.COLUMN_NAME, 0);
	};

	CURSOR_NAME() {
	    return this.getToken(MySqlParser.CURSOR_NAME, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
	};

	mysqlVariable() {
	    return this.getTypedRuleContext(MysqlVariableContext,0);
	};

	simpleId() {
	    return this.getTypedRuleContext(SimpleIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSignalConditionInformation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSignalConditionInformation(this);
		}
	}


}



class WithStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_withStatement;
    }

	WITH() {
	    return this.getToken(MySqlParser.WITH, 0);
	};

	commonTableExpressions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommonTableExpressionsContext);
	    } else {
	        return this.getTypedRuleContext(CommonTableExpressionsContext,i);
	    }
	};

	RECURSIVE() {
	    return this.getToken(MySqlParser.RECURSIVE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWithStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWithStatement(this);
		}
	}


}



class TableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableStatement;
    }

	TABLE() {
	    return this.getToken(MySqlParser.TABLE, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableStatement(this);
		}
	}


}



class DiagnosticsStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_diagnosticsStatement;
    }

	GET() {
	    return this.getToken(MySqlParser.GET, 0);
	};

	DIAGNOSTICS() {
	    return this.getToken(MySqlParser.DIAGNOSTICS, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	STACKED() {
	    return this.getToken(MySqlParser.STACKED, 0);
	};

	variableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableClauseContext);
	    } else {
	        return this.getTypedRuleContext(VariableClauseContext,i);
	    }
	};

	EQUAL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.EQUAL_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.EQUAL_SYMBOL, i);
	    }
	};


	CONDITION() {
	    return this.getToken(MySqlParser.CONDITION, 0);
	};

	diagnosticsConditionInformationName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DiagnosticsConditionInformationNameContext);
	    } else {
	        return this.getTypedRuleContext(DiagnosticsConditionInformationNameContext,i);
	    }
	};

	NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.NUMBER);
	    } else {
	        return this.getToken(MySqlParser.NUMBER, i);
	    }
	};


	ROW_COUNT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ROW_COUNT);
	    } else {
	        return this.getToken(MySqlParser.ROW_COUNT, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDiagnosticsStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDiagnosticsStatement(this);
		}
	}


}



class DiagnosticsConditionInformationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_diagnosticsConditionInformationName;
    }

	CLASS_ORIGIN() {
	    return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	};

	SUBCLASS_ORIGIN() {
	    return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	};

	RETURNED_SQLSTATE() {
	    return this.getToken(MySqlParser.RETURNED_SQLSTATE, 0);
	};

	MESSAGE_TEXT() {
	    return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	};

	MYSQL_ERRNO() {
	    return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	};

	CONSTRAINT_CATALOG() {
	    return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	};

	CONSTRAINT_SCHEMA() {
	    return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	};

	CONSTRAINT_NAME() {
	    return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	};

	CATALOG_NAME() {
	    return this.getToken(MySqlParser.CATALOG_NAME, 0);
	};

	SCHEMA_NAME() {
	    return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	};

	TABLE_NAME() {
	    return this.getToken(MySqlParser.TABLE_NAME, 0);
	};

	COLUMN_NAME() {
	    return this.getToken(MySqlParser.COLUMN_NAME, 0);
	};

	CURSOR_NAME() {
	    return this.getToken(MySqlParser.CURSOR_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDiagnosticsConditionInformationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDiagnosticsConditionInformationName(this);
		}
	}


}



class DescribeObjectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_describeObjectClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DescribeStatementsContext extends DescribeObjectClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	replaceStatement() {
	    return this.getTypedRuleContext(ReplaceStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeStatements(this);
		}
	}


}

MySqlParser.DescribeStatementsContext = DescribeStatementsContext;

class DescribeConnectionContext extends DescribeObjectClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDescribeConnection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDescribeConnection(this);
		}
	}


}

MySqlParser.DescribeConnectionContext = DescribeConnectionContext;

class FullIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullId;
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	DOT_ID() {
	    return this.getToken(MySqlParser.DOT_ID, 0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullId(this);
		}
	}


}



class TableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tableName;
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTableName(this);
		}
	}


}



class RoleNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_roleName;
    }

	userName() {
	    return this.getTypedRuleContext(UserNameContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRoleName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRoleName(this);
		}
	}


}



class FullColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullColumnName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	dottedId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DottedIdContext);
	    } else {
	        return this.getTypedRuleContext(DottedIdContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullColumnName(this);
		}
	}


}



class IndexColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnName;
        this.sortType = null;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexColumnName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexColumnName(this);
		}
	}


}



class SimpleUserNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleUserName;
    }

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	ADMIN() {
	    return this.getToken(MySqlParser.ADMIN, 0);
	};

	keywordsCanBeId() {
	    return this.getTypedRuleContext(KeywordsCanBeIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleUserName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleUserName(this);
		}
	}


}



class HostNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_hostName;
    }

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	HOST_IP_ADDRESS() {
	    return this.getToken(MySqlParser.HOST_IP_ADDRESS, 0);
	};

	AT_SIGN() {
	    return this.getToken(MySqlParser.AT_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHostName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHostName(this);
		}
	}


}



class UserNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userName;
    }

	simpleUserName() {
	    return this.getTypedRuleContext(SimpleUserNameContext,0);
	};

	hostName() {
	    return this.getTypedRuleContext(HostNameContext,0);
	};

	currentUserExpression() {
	    return this.getTypedRuleContext(CurrentUserExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserName(this);
		}
	}


}



class MysqlVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_mysqlVariable;
    }

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	GLOBAL_ID() {
	    return this.getToken(MySqlParser.GLOBAL_ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMysqlVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMysqlVariable(this);
		}
	}


}



class CharsetNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_charsetName;
    }

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charsetNameBase() {
	    return this.getTypedRuleContext(CharsetNameBaseContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	CHARSET_REVERSE_QOUTE_STRING() {
	    return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharsetName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharsetName(this);
		}
	}


}



class CollationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_collationName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollationName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollationName(this);
		}
	}


}



class EngineNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_engineName;
    }

	engineNameBase() {
	    return this.getTypedRuleContext(EngineNameBaseContext,0);
	};

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEngineName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEngineName(this);
		}
	}


}



class EngineNameBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_engineNameBase;
    }

	ARCHIVE() {
	    return this.getToken(MySqlParser.ARCHIVE, 0);
	};

	BLACKHOLE() {
	    return this.getToken(MySqlParser.BLACKHOLE, 0);
	};

	CONNECT() {
	    return this.getToken(MySqlParser.CONNECT, 0);
	};

	CSV() {
	    return this.getToken(MySqlParser.CSV, 0);
	};

	FEDERATED() {
	    return this.getToken(MySqlParser.FEDERATED, 0);
	};

	INNODB() {
	    return this.getToken(MySqlParser.INNODB, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	MRG_MYISAM() {
	    return this.getToken(MySqlParser.MRG_MYISAM, 0);
	};

	MYISAM() {
	    return this.getToken(MySqlParser.MYISAM, 0);
	};

	NDB() {
	    return this.getToken(MySqlParser.NDB, 0);
	};

	NDBCLUSTER() {
	    return this.getToken(MySqlParser.NDBCLUSTER, 0);
	};

	PERFORMANCE_SCHEMA() {
	    return this.getToken(MySqlParser.PERFORMANCE_SCHEMA, 0);
	};

	TOKUDB() {
	    return this.getToken(MySqlParser.TOKUDB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterEngineNameBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitEngineNameBase(this);
		}
	}


}



class UuidSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uuidSet;
    }

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.MINUS);
	    } else {
	        return this.getToken(MySqlParser.MINUS, i);
	    }
	};


	COLON_SYMB = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COLON_SYMB);
	    } else {
	        return this.getToken(MySqlParser.COLON_SYMB, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUuidSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUuidSet(this);
		}
	}


}



class XidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xid;
        this.globalTableUid = null;
        this.qualifier = null;
        this.idFormat = null;
    }

	xuidStringId = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(XuidStringIdContext);
	    } else {
	        return this.getTypedRuleContext(XuidStringIdContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXid(this);
		}
	}


}



class XuidStringIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_xuidStringId;
    }

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	BIT_STRING() {
	    return this.getToken(MySqlParser.BIT_STRING, 0);
	};

	HEXADECIMAL_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.HEXADECIMAL_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterXuidStringId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitXuidStringId(this);
		}
	}


}



class AuthPluginContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_authPlugin;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAuthPlugin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAuthPlugin(this);
		}
	}


}



class UidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uid;
    }

	simpleId() {
	    return this.getTypedRuleContext(SimpleIdContext,0);
	};

	CHARSET_REVERSE_QOUTE_STRING() {
	    return this.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUid(this);
		}
	}


}



class SimpleIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleId;
    }

	ID() {
	    return this.getToken(MySqlParser.ID, 0);
	};

	charsetNameBase() {
	    return this.getTypedRuleContext(CharsetNameBaseContext,0);
	};

	transactionLevelBase() {
	    return this.getTypedRuleContext(TransactionLevelBaseContext,0);
	};

	engineNameBase() {
	    return this.getTypedRuleContext(EngineNameBaseContext,0);
	};

	privilegesBase() {
	    return this.getTypedRuleContext(PrivilegesBaseContext,0);
	};

	intervalTypeBase() {
	    return this.getTypedRuleContext(IntervalTypeBaseContext,0);
	};

	dataTypeBase() {
	    return this.getTypedRuleContext(DataTypeBaseContext,0);
	};

	keywordsCanBeId() {
	    return this.getTypedRuleContext(KeywordsCanBeIdContext,0);
	};

	scalarFunctionName() {
	    return this.getTypedRuleContext(ScalarFunctionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleId(this);
		}
	}


}



class DottedIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dottedId;
    }

	DOT_ID() {
	    return this.getToken(MySqlParser.DOT_ID, 0);
	};

	DOT() {
	    return this.getToken(MySqlParser.DOT, 0);
	};

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDottedId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDottedId(this);
		}
	}


}



class DecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_decimalLiteral;
    }

	DECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.DECIMAL_LITERAL, 0);
	};

	ZERO_DECIMAL() {
	    return this.getToken(MySqlParser.ZERO_DECIMAL, 0);
	};

	ONE_DECIMAL() {
	    return this.getToken(MySqlParser.ONE_DECIMAL, 0);
	};

	TWO_DECIMAL() {
	    return this.getToken(MySqlParser.TWO_DECIMAL, 0);
	};

	REAL_LITERAL() {
	    return this.getToken(MySqlParser.REAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDecimalLiteral(this);
		}
	}


}



class FileSizeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fileSizeLiteral;
    }

	FILESIZE_LITERAL() {
	    return this.getToken(MySqlParser.FILESIZE_LITERAL, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFileSizeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFileSizeLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_stringLiteral;
    }

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	START_NATIONAL_STRING_LITERAL() {
	    return this.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0);
	};

	STRING_CHARSET_NAME() {
	    return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(MySqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(MySqlParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class HexadecimalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_hexadecimalLiteral;
    }

	HEXADECIMAL_LITERAL() {
	    return this.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0);
	};

	STRING_CHARSET_NAME() {
	    return this.getToken(MySqlParser.STRING_CHARSET_NAME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterHexadecimalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitHexadecimalLiteral(this);
		}
	}


}



class NullNotnullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_nullNotnull;
    }

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NULL_SPEC_LITERAL() {
	    return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNullNotnull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNullNotnull(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_constant;
        this.nullLiteral = null;
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	hexadecimalLiteral() {
	    return this.getTypedRuleContext(HexadecimalLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	REAL_LITERAL() {
	    return this.getToken(MySqlParser.REAL_LITERAL, 0);
	};

	BIT_STRING() {
	    return this.getToken(MySqlParser.BIT_STRING, 0);
	};

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	NULL_SPEC_LITERAL() {
	    return this.getToken(MySqlParser.NULL_SPEC_LITERAL, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstant(this);
		}
	}


}



class DataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dataType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SpatialDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null;;
        super.copyFrom(ctx);
    }

	GEOMETRYCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
	};

	GEOMCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMCOLLECTION, 0);
	};

	LINESTRING() {
	    return this.getToken(MySqlParser.LINESTRING, 0);
	};

	MULTILINESTRING() {
	    return this.getToken(MySqlParser.MULTILINESTRING, 0);
	};

	MULTIPOINT() {
	    return this.getToken(MySqlParser.MULTIPOINT, 0);
	};

	MULTIPOLYGON() {
	    return this.getToken(MySqlParser.MULTIPOLYGON, 0);
	};

	POINT() {
	    return this.getToken(MySqlParser.POINT, 0);
	};

	POLYGON() {
	    return this.getToken(MySqlParser.POLYGON, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	GEOMETRY() {
	    return this.getToken(MySqlParser.GEOMETRY, 0);
	};

	SRID() {
	    return this.getToken(MySqlParser.SRID, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpatialDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpatialDataType(this);
		}
	}


}

MySqlParser.SpatialDataTypeContext = SpatialDataTypeContext;

class LongVarbinaryDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LONG() {
	    return this.getToken(MySqlParser.LONG, 0);
	};

	VARBINARY() {
	    return this.getToken(MySqlParser.VARBINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLongVarbinaryDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLongVarbinaryDataType(this);
		}
	}


}

MySqlParser.LongVarbinaryDataTypeContext = LongVarbinaryDataTypeContext;

class CollectionDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null;;
        super.copyFrom(ctx);
    }

	collectionOptions() {
	    return this.getTypedRuleContext(CollectionOptionsContext,0);
	};

	ENUM() {
	    return this.getToken(MySqlParser.ENUM, 0);
	};

	SET() {
	    return this.getToken(MySqlParser.SET, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charSet() {
	    return this.getTypedRuleContext(CharSetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollectionDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollectionDataType(this);
		}
	}


}

MySqlParser.CollectionDataTypeContext = CollectionDataTypeContext;

class NationalVaryingStringDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null;;
        super.copyFrom(ctx);
    }

	NATIONAL() {
	    return this.getToken(MySqlParser.NATIONAL, 0);
	};

	VARYING() {
	    return this.getToken(MySqlParser.VARYING, 0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNationalVaryingStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNationalVaryingStringDataType(this);
		}
	}


}

MySqlParser.NationalVaryingStringDataTypeContext = NationalVaryingStringDataTypeContext;

class DimensionDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null;;
        super.copyFrom(ctx);
    }

	TINYINT() {
	    return this.getToken(MySqlParser.TINYINT, 0);
	};

	SMALLINT() {
	    return this.getToken(MySqlParser.SMALLINT, 0);
	};

	MEDIUMINT() {
	    return this.getToken(MySqlParser.MEDIUMINT, 0);
	};

	INT() {
	    return this.getToken(MySqlParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	BIGINT() {
	    return this.getToken(MySqlParser.BIGINT, 0);
	};

	MIDDLEINT() {
	    return this.getToken(MySqlParser.MIDDLEINT, 0);
	};

	INT1() {
	    return this.getToken(MySqlParser.INT1, 0);
	};

	INT2() {
	    return this.getToken(MySqlParser.INT2, 0);
	};

	INT3() {
	    return this.getToken(MySqlParser.INT3, 0);
	};

	INT4() {
	    return this.getToken(MySqlParser.INT4, 0);
	};

	INT8() {
	    return this.getToken(MySqlParser.INT8, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	SIGNED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.SIGNED);
	    } else {
	        return this.getToken(MySqlParser.SIGNED, i);
	    }
	};


	UNSIGNED = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.UNSIGNED);
	    } else {
	        return this.getToken(MySqlParser.UNSIGNED, i);
	    }
	};


	ZEROFILL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.ZEROFILL);
	    } else {
	        return this.getToken(MySqlParser.ZEROFILL, i);
	    }
	};


	REAL() {
	    return this.getToken(MySqlParser.REAL, 0);
	};

	lengthTwoDimension() {
	    return this.getTypedRuleContext(LengthTwoDimensionContext,0);
	};

	DOUBLE() {
	    return this.getToken(MySqlParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(MySqlParser.PRECISION, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(MySqlParser.DEC, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	NUMERIC() {
	    return this.getToken(MySqlParser.NUMERIC, 0);
	};

	FLOAT() {
	    return this.getToken(MySqlParser.FLOAT, 0);
	};

	FLOAT4() {
	    return this.getToken(MySqlParser.FLOAT4, 0);
	};

	FLOAT8() {
	    return this.getToken(MySqlParser.FLOAT8, 0);
	};

	lengthTwoOptionalDimension() {
	    return this.getTypedRuleContext(LengthTwoOptionalDimensionContext,0);
	};

	BIT() {
	    return this.getToken(MySqlParser.BIT, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	VARBINARY() {
	    return this.getToken(MySqlParser.VARBINARY, 0);
	};

	BLOB() {
	    return this.getToken(MySqlParser.BLOB, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDimensionDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDimensionDataType(this);
		}
	}


}

MySqlParser.DimensionDataTypeContext = DimensionDataTypeContext;

class StringDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null;;
        super.copyFrom(ctx);
    }

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	TINYTEXT() {
	    return this.getToken(MySqlParser.TINYTEXT, 0);
	};

	TEXT() {
	    return this.getToken(MySqlParser.TEXT, 0);
	};

	MEDIUMTEXT() {
	    return this.getToken(MySqlParser.MEDIUMTEXT, 0);
	};

	LONGTEXT() {
	    return this.getToken(MySqlParser.LONGTEXT, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	NVARCHAR() {
	    return this.getToken(MySqlParser.NVARCHAR, 0);
	};

	LONG() {
	    return this.getToken(MySqlParser.LONG, 0);
	};

	VARYING() {
	    return this.getToken(MySqlParser.VARYING, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BINARY);
	    } else {
	        return this.getToken(MySqlParser.BINARY, i);
	    }
	};


	charSet() {
	    return this.getTypedRuleContext(CharSetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitStringDataType(this);
		}
	}


}

MySqlParser.StringDataTypeContext = StringDataTypeContext;

class LongVarcharDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null;;
        super.copyFrom(ctx);
    }

	LONG() {
	    return this.getToken(MySqlParser.LONG, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	charSet() {
	    return this.getTypedRuleContext(CharSetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLongVarcharDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLongVarcharDataType(this);
		}
	}


}

MySqlParser.LongVarcharDataTypeContext = LongVarcharDataTypeContext;

class NationalStringDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null;;
        super.copyFrom(ctx);
    }

	NATIONAL() {
	    return this.getToken(MySqlParser.NATIONAL, 0);
	};

	VARCHAR() {
	    return this.getToken(MySqlParser.VARCHAR, 0);
	};

	CHARACTER() {
	    return this.getToken(MySqlParser.CHARACTER, 0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNationalStringDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNationalStringDataType(this);
		}
	}


}

MySqlParser.NationalStringDataTypeContext = NationalStringDataTypeContext;

class SimpleDataTypeContext extends DataTypeContext {

    constructor(parser, ctx) {
        super(parser);
        this.typeName = null;;
        super.copyFrom(ctx);
    }

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TINYBLOB() {
	    return this.getToken(MySqlParser.TINYBLOB, 0);
	};

	MEDIUMBLOB() {
	    return this.getToken(MySqlParser.MEDIUMBLOB, 0);
	};

	LONGBLOB() {
	    return this.getToken(MySqlParser.LONGBLOB, 0);
	};

	BOOL() {
	    return this.getToken(MySqlParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(MySqlParser.BOOLEAN, 0);
	};

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleDataType(this);
		}
	}


}

MySqlParser.SimpleDataTypeContext = SimpleDataTypeContext;

class CollectionOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_collectionOptions;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollectionOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollectionOptions(this);
		}
	}


}



class ConvertedDataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_convertedDataType;
        this.typeName = null;
    }

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	SIGNED() {
	    return this.getToken(MySqlParser.SIGNED, 0);
	};

	UNSIGNED() {
	    return this.getToken(MySqlParser.UNSIGNED, 0);
	};

	ARRAY() {
	    return this.getToken(MySqlParser.ARRAY, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	INT() {
	    return this.getToken(MySqlParser.INT, 0);
	};

	INTEGER() {
	    return this.getToken(MySqlParser.INTEGER, 0);
	};

	DECIMAL() {
	    return this.getToken(MySqlParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(MySqlParser.DEC, 0);
	};

	lengthOneDimension() {
	    return this.getTypedRuleContext(LengthOneDimensionContext,0);
	};

	charSet() {
	    return this.getTypedRuleContext(CharSetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	lengthTwoOptionalDimension() {
	    return this.getTypedRuleContext(LengthTwoOptionalDimensionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConvertedDataType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConvertedDataType(this);
		}
	}


}



class LengthOneDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthOneDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthOneDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthOneDimension(this);
		}
	}


}



class LengthTwoDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthTwoDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthTwoDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthTwoDimension(this);
		}
	}


}



class LengthTwoOptionalDimensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_lengthTwoOptionalDimension;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLengthTwoOptionalDimension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLengthTwoOptionalDimension(this);
		}
	}


}



class UidListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_uidList;
    }

	uid = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UidContext);
	    } else {
	        return this.getTypedRuleContext(UidContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUidList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUidList(this);
		}
	}


}



class FullColumnNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_fullColumnNameList;
    }

	fullColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(FullColumnNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullColumnNameList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullColumnNameList(this);
		}
	}


}



class TablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_tables;
    }

	tableName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableNameContext);
	    } else {
	        return this.getTypedRuleContext(TableNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTables(this);
		}
	}


}



class IndexColumnNamesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_indexColumnNames;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	indexColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(IndexColumnNameContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIndexColumnNames(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIndexColumnNames(this);
		}
	}


}



class ExpressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressions;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressions(this);
		}
	}


}



class ExpressionsWithDefaultsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionsWithDefaults;
    }

	expressionOrDefault = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionOrDefaultContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionOrDefaultContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionsWithDefaults(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionsWithDefaults(this);
		}
	}


}



class ConstantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_constants;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstants(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstants(this);
		}
	}


}



class SimpleStringsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_simpleStrings;
    }

	STRING_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.STRING_LITERAL);
	    } else {
	        return this.getToken(MySqlParser.STRING_LITERAL, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleStrings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleStrings(this);
		}
	}


}



class UserVariablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_userVariables;
    }

	LOCAL_ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LOCAL_ID);
	    } else {
	        return this.getToken(MySqlParser.LOCAL_ID, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUserVariables(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUserVariables(this);
		}
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_defaultValue;
    }

	NULL_LITERAL() {
	    return this.getToken(MySqlParser.NULL_LITERAL, 0);
	};

	CAST() {
	    return this.getToken(MySqlParser.CAST, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	convertedDataType() {
	    return this.getTypedRuleContext(ConvertedDataTypeContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	currentTimestamp = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CurrentTimestampContext);
	    } else {
	        return this.getTypedRuleContext(CurrentTimestampContext,i);
	    }
	};

	ON() {
	    return this.getToken(MySqlParser.ON, 0);
	};

	UPDATE() {
	    return this.getToken(MySqlParser.UPDATE, 0);
	};

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDefaultValue(this);
		}
	}


}



class CurrentTimestampContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_currentTimestamp;
    }

	NOW() {
	    return this.getToken(MySqlParser.NOW, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCurrentTimestamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCurrentTimestamp(this);
		}
	}


}



class ExpressionOrDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionOrDefault;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionOrDefault(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionOrDefault(this);
		}
	}


}



class IfExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifExists;
    }

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfExists(this);
		}
	}


}



class IfNotExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_ifNotExists;
    }

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIfNotExists(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIfNotExists(this);
		}
	}


}



class OrReplaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_orReplace;
    }

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOrReplace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOrReplace(this);
		}
	}


}



class WaitNowaitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_waitNowaitClause;
    }

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	NOWAIT() {
	    return this.getToken(MySqlParser.NOWAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWaitNowaitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWaitNowaitClause(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionCall;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SpecificFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	specificFunction() {
	    return this.getTypedRuleContext(SpecificFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSpecificFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSpecificFunctionCall(this);
		}
	}


}

MySqlParser.SpecificFunctionCallContext = SpecificFunctionCallContext;

class PasswordFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	passwordFunctionClause() {
	    return this.getTypedRuleContext(PasswordFunctionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordFunctionCall(this);
		}
	}


}

MySqlParser.PasswordFunctionCallContext = PasswordFunctionCallContext;

class UdfFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullId() {
	    return this.getTypedRuleContext(FullIdContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUdfFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUdfFunctionCall(this);
		}
	}


}

MySqlParser.UdfFunctionCallContext = UdfFunctionCallContext;

class NonAggregateFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	nonAggregateWindowedFunction() {
	    return this.getTypedRuleContext(NonAggregateWindowedFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNonAggregateFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNonAggregateFunctionCall(this);
		}
	}


}

MySqlParser.NonAggregateFunctionCallContext = NonAggregateFunctionCallContext;

class AggregateFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aggregateWindowedFunction() {
	    return this.getTypedRuleContext(AggregateWindowedFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAggregateFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAggregateFunctionCall(this);
		}
	}


}

MySqlParser.AggregateFunctionCallContext = AggregateFunctionCallContext;

class ScalarFunctionCallContext extends FunctionCallContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	scalarFunctionName() {
	    return this.getTypedRuleContext(ScalarFunctionNameContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterScalarFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitScalarFunctionCall(this);
		}
	}


}

MySqlParser.ScalarFunctionCallContext = ScalarFunctionCallContext;

class SpecificFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_specificFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PositionFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.positionString = null;;
        this.positionExpression = null;;
        this.inString = null;;
        this.inExpression = null;;
        super.copyFrom(ctx);
    }

	POSITION() {
	    return this.getToken(MySqlParser.POSITION, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPositionFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPositionFunctionCall(this);
		}
	}


}

MySqlParser.PositionFunctionCallContext = PositionFunctionCallContext;

class TrimFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.positioinForm = null;;
        this.sourceString = null;;
        this.sourceExpression = null;;
        this.fromString = null;;
        this.fromExpression = null;;
        super.copyFrom(ctx);
    }

	TRIM() {
	    return this.getToken(MySqlParser.TRIM, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	BOTH() {
	    return this.getToken(MySqlParser.BOTH, 0);
	};

	LEADING() {
	    return this.getToken(MySqlParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(MySqlParser.TRAILING, 0);
	};

	stringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(StringLiteralContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTrimFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTrimFunctionCall(this);
		}
	}


}

MySqlParser.TrimFunctionCallContext = TrimFunctionCallContext;

class JsonValueFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	JSON_VALUE() {
	    return this.getToken(MySqlParser.JSON_VALUE, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	RETURNING() {
	    return this.getToken(MySqlParser.RETURNING, 0);
	};

	convertedDataType() {
	    return this.getTypedRuleContext(ConvertedDataTypeContext,0);
	};

	jsonOnEmpty() {
	    return this.getTypedRuleContext(JsonOnEmptyContext,0);
	};

	jsonOnError() {
	    return this.getTypedRuleContext(JsonOnErrorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonValueFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonValueFunctionCall(this);
		}
	}


}

MySqlParser.JsonValueFunctionCallContext = JsonValueFunctionCallContext;

class CaseFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseArg = null;;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(MySqlParser.CASE, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	caseFuncAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseFuncAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(CaseFuncAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseFunctionCall(this);
		}
	}


}

MySqlParser.CaseFunctionCallContext = CaseFunctionCallContext;

class ExtractFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.sourceString = null;;
        this.sourceExpression = null;;
        super.copyFrom(ctx);
    }

	EXTRACT() {
	    return this.getToken(MySqlParser.EXTRACT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExtractFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExtractFunctionCall(this);
		}
	}


}

MySqlParser.ExtractFunctionCallContext = ExtractFunctionCallContext;

class DataTypeFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.separator = null;;
        super.copyFrom(ctx);
    }

	CONVERT() {
	    return this.getToken(MySqlParser.CONVERT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	convertedDataType() {
	    return this.getTypedRuleContext(ConvertedDataTypeContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CAST() {
	    return this.getToken(MySqlParser.CAST, 0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDataTypeFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDataTypeFunctionCall(this);
		}
	}


}

MySqlParser.DataTypeFunctionCallContext = DataTypeFunctionCallContext;

class ValuesFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES() {
	    return this.getToken(MySqlParser.VALUES, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterValuesFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitValuesFunctionCall(this);
		}
	}


}

MySqlParser.ValuesFunctionCallContext = ValuesFunctionCallContext;

class CaseExpressionFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.elseArg = null;;
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(MySqlParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	caseFuncAlternative = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseFuncAlternativeContext);
	    } else {
	        return this.getTypedRuleContext(CaseFuncAlternativeContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(MySqlParser.ELSE, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseExpressionFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseExpressionFunctionCall(this);
		}
	}


}

MySqlParser.CaseExpressionFunctionCallContext = CaseExpressionFunctionCallContext;

class CurrentUserContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	currentUserExpression() {
	    return this.getTypedRuleContext(CurrentUserExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCurrentUser(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCurrentUser(this);
		}
	}


}

MySqlParser.CurrentUserContext = CurrentUserContext;

class SimpleFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CURRENT_DATE() {
	    return this.getToken(MySqlParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(MySqlParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	UTC_TIMESTAMP() {
	    return this.getToken(MySqlParser.UTC_TIMESTAMP, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSimpleFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSimpleFunctionCall(this);
		}
	}


}

MySqlParser.SimpleFunctionCallContext = SimpleFunctionCallContext;

class CharFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	USING() {
	    return this.getToken(MySqlParser.USING, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharFunctionCall(this);
		}
	}


}

MySqlParser.CharFunctionCallContext = CharFunctionCallContext;

class WeightFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.stringFormat = null;;
        super.copyFrom(ctx);
    }

	WEIGHT_STRING() {
	    return this.getToken(MySqlParser.WEIGHT_STRING, 0);
	};

	LR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.LR_BRACKET, i);
	    }
	};


	RR_BRACKET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.RR_BRACKET);
	    } else {
	        return this.getToken(MySqlParser.RR_BRACKET, i);
	    }
	};


	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(MySqlParser.AS, 0);
	};

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	levelsInWeightString() {
	    return this.getTypedRuleContext(LevelsInWeightStringContext,0);
	};

	CHAR() {
	    return this.getToken(MySqlParser.CHAR, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWeightFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWeightFunctionCall(this);
		}
	}


}

MySqlParser.WeightFunctionCallContext = WeightFunctionCallContext;

class GetFormatFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.datetimeFormat = null;;
        super.copyFrom(ctx);
    }

	GET_FORMAT() {
	    return this.getToken(MySqlParser.GET_FORMAT, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MySqlParser.COMMA, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterGetFormatFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitGetFormatFunctionCall(this);
		}
	}


}

MySqlParser.GetFormatFunctionCallContext = GetFormatFunctionCallContext;

class SubstrFunctionCallContext extends SpecificFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.sourceString = null;;
        this.sourceExpression = null;;
        this.fromDecimal = null;;
        this.fromExpression = null;;
        this.forDecimal = null;;
        this.forExpression = null;;
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	FROM() {
	    return this.getToken(MySqlParser.FROM, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	SUBSTR() {
	    return this.getToken(MySqlParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(MySqlParser.SUBSTRING, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	FOR() {
	    return this.getToken(MySqlParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubstrFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubstrFunctionCall(this);
		}
	}


}

MySqlParser.SubstrFunctionCallContext = SubstrFunctionCallContext;

class CaseFuncAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_caseFuncAlternative;
        this.condition = null;
        this.consequent = null;
    }

	WHEN() {
	    return this.getToken(MySqlParser.WHEN, 0);
	};

	THEN() {
	    return this.getToken(MySqlParser.THEN, 0);
	};

	functionArg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionArgContext);
	    } else {
	        return this.getTypedRuleContext(FunctionArgContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCaseFuncAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCaseFuncAlternative(this);
		}
	}


}



class LevelsInWeightStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_levelsInWeightString;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class LevelWeightRangeContext extends LevelsInWeightStringContext {

    constructor(parser, ctx) {
        super(parser);
        this.firstLevel = null;;
        this.lastLevel = null;;
        super.copyFrom(ctx);
    }

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelWeightRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelWeightRange(this);
		}
	}


}

MySqlParser.LevelWeightRangeContext = LevelWeightRangeContext;

class LevelWeightListContext extends LevelsInWeightStringContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	levelInWeightListElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LevelInWeightListElementContext);
	    } else {
	        return this.getTypedRuleContext(LevelInWeightListElementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelWeightList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelWeightList(this);
		}
	}


}

MySqlParser.LevelWeightListContext = LevelWeightListContext;

class LevelInWeightListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_levelInWeightListElement;
        this.orderType = null;
    }

	decimalLiteral() {
	    return this.getTypedRuleContext(DecimalLiteralContext,0);
	};

	ASC() {
	    return this.getToken(MySqlParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(MySqlParser.DESC, 0);
	};

	REVERSE() {
	    return this.getToken(MySqlParser.REVERSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLevelInWeightListElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLevelInWeightListElement(this);
		}
	}


}



class AggregateWindowedFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_aggregateWindowedFunction;
        this.aggregator = null;
        this.starArg = null;
        this.separator = null;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	AVG() {
	    return this.getToken(MySqlParser.AVG, 0);
	};

	MAX() {
	    return this.getToken(MySqlParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(MySqlParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(MySqlParser.SUM, 0);
	};

	overClause() {
	    return this.getTypedRuleContext(OverClauseContext,0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	DISTINCT() {
	    return this.getToken(MySqlParser.DISTINCT, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	functionArgs() {
	    return this.getTypedRuleContext(FunctionArgsContext,0);
	};

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	BIT_AND() {
	    return this.getToken(MySqlParser.BIT_AND, 0);
	};

	BIT_OR() {
	    return this.getToken(MySqlParser.BIT_OR, 0);
	};

	BIT_XOR() {
	    return this.getToken(MySqlParser.BIT_XOR, 0);
	};

	STD() {
	    return this.getToken(MySqlParser.STD, 0);
	};

	STDDEV() {
	    return this.getToken(MySqlParser.STDDEV, 0);
	};

	STDDEV_POP() {
	    return this.getToken(MySqlParser.STDDEV_POP, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(MySqlParser.STDDEV_SAMP, 0);
	};

	VAR_POP() {
	    return this.getToken(MySqlParser.VAR_POP, 0);
	};

	VAR_SAMP() {
	    return this.getToken(MySqlParser.VAR_SAMP, 0);
	};

	VARIANCE() {
	    return this.getToken(MySqlParser.VARIANCE, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(MySqlParser.GROUP_CONCAT, 0);
	};

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	orderByExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderByExpressionContext,i);
	    }
	};

	SEPARATOR() {
	    return this.getToken(MySqlParser.SEPARATOR, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAggregateWindowedFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAggregateWindowedFunction(this);
		}
	}


}



class NonAggregateWindowedFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_nonAggregateWindowedFunction;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	overClause() {
	    return this.getTypedRuleContext(OverClauseContext,0);
	};

	LAG() {
	    return this.getToken(MySqlParser.LAG, 0);
	};

	LEAD() {
	    return this.getToken(MySqlParser.LEAD, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	decimalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecimalLiteralContext);
	    } else {
	        return this.getTypedRuleContext(DecimalLiteralContext,i);
	    }
	};

	FIRST_VALUE() {
	    return this.getToken(MySqlParser.FIRST_VALUE, 0);
	};

	LAST_VALUE() {
	    return this.getToken(MySqlParser.LAST_VALUE, 0);
	};

	CUME_DIST() {
	    return this.getToken(MySqlParser.CUME_DIST, 0);
	};

	DENSE_RANK() {
	    return this.getToken(MySqlParser.DENSE_RANK, 0);
	};

	PERCENT_RANK() {
	    return this.getToken(MySqlParser.PERCENT_RANK, 0);
	};

	RANK() {
	    return this.getToken(MySqlParser.RANK, 0);
	};

	ROW_NUMBER() {
	    return this.getToken(MySqlParser.ROW_NUMBER, 0);
	};

	NTH_VALUE() {
	    return this.getToken(MySqlParser.NTH_VALUE, 0);
	};

	NTILE() {
	    return this.getToken(MySqlParser.NTILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNonAggregateWindowedFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNonAggregateWindowedFunction(this);
		}
	}


}



class OverClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_overClause;
    }

	OVER() {
	    return this.getToken(MySqlParser.OVER, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	windowSpec() {
	    return this.getTypedRuleContext(WindowSpecContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	windowName() {
	    return this.getTypedRuleContext(WindowNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterOverClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitOverClause(this);
		}
	}


}



class WindowSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_windowSpec;
    }

	windowName() {
	    return this.getTypedRuleContext(WindowNameContext,0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	frameClause() {
	    return this.getTypedRuleContext(FrameClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWindowSpec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWindowSpec(this);
		}
	}


}



class WindowNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_windowName;
    }

	uid() {
	    return this.getTypedRuleContext(UidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterWindowName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitWindowName(this);
		}
	}


}



class FrameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_frameClause;
    }

	frameUnits() {
	    return this.getTypedRuleContext(FrameUnitsContext,0);
	};

	frameExtent() {
	    return this.getTypedRuleContext(FrameExtentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFrameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFrameClause(this);
		}
	}


}



class FrameUnitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_frameUnits;
    }

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	RANGE() {
	    return this.getToken(MySqlParser.RANGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFrameUnits(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFrameUnits(this);
		}
	}


}



class FrameExtentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_frameExtent;
    }

	frameRange() {
	    return this.getTypedRuleContext(FrameRangeContext,0);
	};

	frameBetween() {
	    return this.getTypedRuleContext(FrameBetweenContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFrameExtent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFrameExtent(this);
		}
	}


}



class FrameBetweenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_frameBetween;
    }

	BETWEEN() {
	    return this.getToken(MySqlParser.BETWEEN, 0);
	};

	frameRange = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FrameRangeContext);
	    } else {
	        return this.getTypedRuleContext(FrameRangeContext,i);
	    }
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFrameBetween(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFrameBetween(this);
		}
	}


}



class FrameRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_frameRange;
    }

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	UNBOUNDED() {
	    return this.getToken(MySqlParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(MySqlParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(MySqlParser.FOLLOWING, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFrameRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFrameRange(this);
		}
	}


}



class PartitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_partitionClause;
    }

	PARTITION() {
	    return this.getToken(MySqlParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(MySqlParser.BY, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPartitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPartitionClause(this);
		}
	}


}



class ScalarFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_scalarFunctionName;
    }

	functionNameBase() {
	    return this.getTypedRuleContext(FunctionNameBaseContext,0);
	};

	ASCII() {
	    return this.getToken(MySqlParser.ASCII, 0);
	};

	CURDATE() {
	    return this.getToken(MySqlParser.CURDATE, 0);
	};

	CURRENT_DATE() {
	    return this.getToken(MySqlParser.CURRENT_DATE, 0);
	};

	CURRENT_TIME() {
	    return this.getToken(MySqlParser.CURRENT_TIME, 0);
	};

	CURRENT_TIMESTAMP() {
	    return this.getToken(MySqlParser.CURRENT_TIMESTAMP, 0);
	};

	CURTIME() {
	    return this.getToken(MySqlParser.CURTIME, 0);
	};

	DATE_ADD() {
	    return this.getToken(MySqlParser.DATE_ADD, 0);
	};

	DATE_SUB() {
	    return this.getToken(MySqlParser.DATE_SUB, 0);
	};

	IF() {
	    return this.getToken(MySqlParser.IF, 0);
	};

	INSERT() {
	    return this.getToken(MySqlParser.INSERT, 0);
	};

	LOCALTIME() {
	    return this.getToken(MySqlParser.LOCALTIME, 0);
	};

	LOCALTIMESTAMP() {
	    return this.getToken(MySqlParser.LOCALTIMESTAMP, 0);
	};

	MID() {
	    return this.getToken(MySqlParser.MID, 0);
	};

	NOW() {
	    return this.getToken(MySqlParser.NOW, 0);
	};

	REPEAT() {
	    return this.getToken(MySqlParser.REPEAT, 0);
	};

	REPLACE() {
	    return this.getToken(MySqlParser.REPLACE, 0);
	};

	SUBSTR() {
	    return this.getToken(MySqlParser.SUBSTR, 0);
	};

	SUBSTRING() {
	    return this.getToken(MySqlParser.SUBSTRING, 0);
	};

	SYSDATE() {
	    return this.getToken(MySqlParser.SYSDATE, 0);
	};

	TRIM() {
	    return this.getToken(MySqlParser.TRIM, 0);
	};

	UTC_DATE() {
	    return this.getToken(MySqlParser.UTC_DATE, 0);
	};

	UTC_TIME() {
	    return this.getToken(MySqlParser.UTC_TIME, 0);
	};

	UTC_TIMESTAMP() {
	    return this.getToken(MySqlParser.UTC_TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterScalarFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitScalarFunctionName(this);
		}
	}


}



class PasswordFunctionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_passwordFunctionClause;
        this.functionName = null;
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	functionArg() {
	    return this.getTypedRuleContext(FunctionArgContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	OLD_PASSWORD() {
	    return this.getToken(MySqlParser.OLD_PASSWORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPasswordFunctionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPasswordFunctionClause(this);
		}
	}


}



class FunctionArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionArgs;
    }

	constant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantContext);
	    } else {
	        return this.getTypedRuleContext(ConstantContext,i);
	    }
	};

	fullColumnName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FullColumnNameContext);
	    } else {
	        return this.getTypedRuleContext(FullColumnNameContext,i);
	    }
	};

	functionCall = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionCallContext);
	    } else {
	        return this.getTypedRuleContext(FunctionCallContext,i);
	    }
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionArgs(this);
		}
	}


}



class FunctionArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionArg;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionArg(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class IsExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.testValue = null;;
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	TRUE() {
	    return this.getToken(MySqlParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(MySqlParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(MySqlParser.UNKNOWN, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIsExpression(this);
		}
	}


}

MySqlParser.IsExpressionContext = IsExpressionContext;

class NotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.notOperator = null;;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNotExpression(this);
		}
	}


}

MySqlParser.NotExpressionContext = NotExpressionContext;

class LogicalExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	logicalOperator() {
	    return this.getTypedRuleContext(LogicalOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLogicalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLogicalExpression(this);
		}
	}


}

MySqlParser.LogicalExpressionContext = LogicalExpressionContext;

class PredicateExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPredicateExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPredicateExpression(this);
		}
	}


}

MySqlParser.PredicateExpressionContext = PredicateExpressionContext;

class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_predicate;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SoundsLikePredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	SOUNDS() {
	    return this.getToken(MySqlParser.SOUNDS, 0);
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSoundsLikePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSoundsLikePredicate(this);
		}
	}


}

MySqlParser.SoundsLikePredicateContext = SoundsLikePredicateContext;

class ExpressionAtomPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExpressionAtomPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExpressionAtomPredicate(this);
		}
	}


}

MySqlParser.ExpressionAtomPredicateContext = ExpressionAtomPredicateContext;

class SubqueryComparisonPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.quantifier = null;;
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	ALL() {
	    return this.getToken(MySqlParser.ALL, 0);
	};

	ANY() {
	    return this.getToken(MySqlParser.ANY, 0);
	};

	SOME() {
	    return this.getToken(MySqlParser.SOME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryComparisonPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryComparisonPredicate(this);
		}
	}


}

MySqlParser.SubqueryComparisonPredicateContext = SubqueryComparisonPredicateContext;

class JsonMemberOfPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	MEMBER() {
	    return this.getToken(MySqlParser.MEMBER, 0);
	};

	OF() {
	    return this.getToken(MySqlParser.OF, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonMemberOfPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonMemberOfPredicate(this);
		}
	}


}

MySqlParser.JsonMemberOfPredicateContext = JsonMemberOfPredicateContext;

class BinaryComparisonPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	comparisonOperator() {
	    return this.getTypedRuleContext(ComparisonOperatorContext,0);
	};

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinaryComparisonPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinaryComparisonPredicate(this);
		}
	}


}

MySqlParser.BinaryComparisonPredicateContext = BinaryComparisonPredicateContext;

class InPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IN() {
	    return this.getToken(MySqlParser.IN, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	expressions() {
	    return this.getTypedRuleContext(ExpressionsContext,0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterInPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitInPredicate(this);
		}
	}


}

MySqlParser.InPredicateContext = InPredicateContext;

class BetweenPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	BETWEEN() {
	    return this.getToken(MySqlParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBetweenPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBetweenPredicate(this);
		}
	}


}

MySqlParser.BetweenPredicateContext = BetweenPredicateContext;

class IsNullPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	IS() {
	    return this.getToken(MySqlParser.IS, 0);
	};

	nullNotnull() {
	    return this.getTypedRuleContext(NullNotnullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIsNullPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIsNullPredicate(this);
		}
	}


}

MySqlParser.IsNullPredicateContext = IsNullPredicateContext;

class LikePredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	LIKE() {
	    return this.getToken(MySqlParser.LIKE, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	ESCAPE() {
	    return this.getToken(MySqlParser.ESCAPE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(MySqlParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLikePredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLikePredicate(this);
		}
	}


}

MySqlParser.LikePredicateContext = LikePredicateContext;

class RegexpPredicateContext extends PredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.regex = null;;
        super.copyFrom(ctx);
    }

	predicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PredicateContext);
	    } else {
	        return this.getTypedRuleContext(PredicateContext,i);
	    }
	};

	REGEXP() {
	    return this.getToken(MySqlParser.REGEXP, 0);
	};

	RLIKE() {
	    return this.getToken(MySqlParser.RLIKE, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterRegexpPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitRegexpPredicate(this);
		}
	}


}

MySqlParser.RegexpPredicateContext = RegexpPredicateContext;

class ExpressionAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_expressionAtom;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UnaryExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnaryExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnaryExpressionAtom(this);
		}
	}


}

MySqlParser.UnaryExpressionAtomContext = UnaryExpressionAtomContext;

class CollateExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	COLLATE() {
	    return this.getToken(MySqlParser.COLLATE, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCollateExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCollateExpressionAtom(this);
		}
	}


}

MySqlParser.CollateExpressionAtomContext = CollateExpressionAtomContext;

class VariableAssignExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LOCAL_ID() {
	    return this.getToken(MySqlParser.LOCAL_ID, 0);
	};

	VAR_ASSIGN() {
	    return this.getToken(MySqlParser.VAR_ASSIGN, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterVariableAssignExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitVariableAssignExpressionAtom(this);
		}
	}


}

MySqlParser.VariableAssignExpressionAtomContext = VariableAssignExpressionAtomContext;

class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	mysqlVariable() {
	    return this.getTypedRuleContext(MysqlVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMysqlVariableExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMysqlVariableExpressionAtom(this);
		}
	}


}

MySqlParser.MysqlVariableExpressionAtomContext = MysqlVariableExpressionAtomContext;

class NestedExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNestedExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNestedExpressionAtom(this);
		}
	}


}

MySqlParser.NestedExpressionAtomContext = NestedExpressionAtomContext;

class NestedRowExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.COMMA);
	    } else {
	        return this.getToken(MySqlParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterNestedRowExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitNestedRowExpressionAtom(this);
		}
	}


}

MySqlParser.NestedRowExpressionAtomContext = NestedRowExpressionAtomContext;

class MathExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	multOperator() {
	    return this.getTypedRuleContext(MultOperatorContext,0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	addOperator() {
	    return this.getTypedRuleContext(AddOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMathExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMathExpressionAtom(this);
		}
	}


}

MySqlParser.MathExpressionAtomContext = MathExpressionAtomContext;

class ExistsExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(MySqlParser.EXISTS, 0);
	};

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterExistsExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitExistsExpressionAtom(this);
		}
	}


}

MySqlParser.ExistsExpressionAtomContext = ExistsExpressionAtomContext;

class IntervalExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTERVAL() {
	    return this.getToken(MySqlParser.INTERVAL, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	intervalType() {
	    return this.getTypedRuleContext(IntervalTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalExpressionAtom(this);
		}
	}


}

MySqlParser.IntervalExpressionAtomContext = IntervalExpressionAtomContext;

class JsonExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	jsonOperator() {
	    return this.getTypedRuleContext(JsonOperatorContext,0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonExpressionAtom(this);
		}
	}


}

MySqlParser.JsonExpressionAtomContext = JsonExpressionAtomContext;

class SubqueryExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LR_BRACKET() {
	    return this.getToken(MySqlParser.LR_BRACKET, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	RR_BRACKET() {
	    return this.getToken(MySqlParser.RR_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterSubqueryExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitSubqueryExpressionAtom(this);
		}
	}


}

MySqlParser.SubqueryExpressionAtomContext = SubqueryExpressionAtomContext;

class ConstantExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterConstantExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitConstantExpressionAtom(this);
		}
	}


}

MySqlParser.ConstantExpressionAtomContext = ConstantExpressionAtomContext;

class FunctionCallExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionCallExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionCallExpressionAtom(this);
		}
	}


}

MySqlParser.FunctionCallExpressionAtomContext = FunctionCallExpressionAtomContext;

class BinaryExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBinaryExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBinaryExpressionAtom(this);
		}
	}


}

MySqlParser.BinaryExpressionAtomContext = BinaryExpressionAtomContext;

class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fullColumnName() {
	    return this.getTypedRuleContext(FullColumnNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFullColumnNameExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFullColumnNameExpressionAtom(this);
		}
	}


}

MySqlParser.FullColumnNameExpressionAtomContext = FullColumnNameExpressionAtomContext;

class BitExpressionAtomContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	bitOperator() {
	    return this.getTypedRuleContext(BitOperatorContext,0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBitExpressionAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBitExpressionAtom(this);
		}
	}


}

MySqlParser.BitExpressionAtomContext = BitExpressionAtomContext;

class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_unaryOperator;
    }

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	BIT_NOT_OP() {
	    return this.getToken(MySqlParser.BIT_NOT_OP, 0);
	};

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	NOT() {
	    return this.getToken(MySqlParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitUnaryOperator(this);
		}
	}


}



class ComparisonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_comparisonOperator;
    }

	EQUAL_SYMBOL() {
	    return this.getToken(MySqlParser.EQUAL_SYMBOL, 0);
	};

	GREATER_SYMBOL() {
	    return this.getToken(MySqlParser.GREATER_SYMBOL, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySqlParser.LESS_SYMBOL, 0);
	};

	EXCLAMATION_SYMBOL() {
	    return this.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterComparisonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitComparisonOperator(this);
		}
	}


}



class LogicalOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_logicalOperator;
    }

	AND() {
	    return this.getToken(MySqlParser.AND, 0);
	};

	BIT_AND_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BIT_AND_OP);
	    } else {
	        return this.getToken(MySqlParser.BIT_AND_OP, i);
	    }
	};


	XOR() {
	    return this.getToken(MySqlParser.XOR, 0);
	};

	OR() {
	    return this.getToken(MySqlParser.OR, 0);
	};

	BIT_OR_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.BIT_OR_OP);
	    } else {
	        return this.getToken(MySqlParser.BIT_OR_OP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterLogicalOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitLogicalOperator(this);
		}
	}


}



class BitOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_bitOperator;
    }

	LESS_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.LESS_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.LESS_SYMBOL, i);
	    }
	};


	GREATER_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GREATER_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.GREATER_SYMBOL, i);
	    }
	};


	BIT_AND_OP() {
	    return this.getToken(MySqlParser.BIT_AND_OP, 0);
	};

	BIT_XOR_OP() {
	    return this.getToken(MySqlParser.BIT_XOR_OP, 0);
	};

	BIT_OR_OP() {
	    return this.getToken(MySqlParser.BIT_OR_OP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterBitOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitBitOperator(this);
		}
	}


}



class MultOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_multOperator;
    }

	STAR() {
	    return this.getToken(MySqlParser.STAR, 0);
	};

	DIVIDE() {
	    return this.getToken(MySqlParser.DIVIDE, 0);
	};

	MODULE() {
	    return this.getToken(MySqlParser.MODULE, 0);
	};

	DIV() {
	    return this.getToken(MySqlParser.DIV, 0);
	};

	MOD() {
	    return this.getToken(MySqlParser.MOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterMultOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitMultOperator(this);
		}
	}


}



class AddOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_addOperator;
    }

	PLUS() {
	    return this.getToken(MySqlParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterAddOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitAddOperator(this);
		}
	}


}



class JsonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_jsonOperator;
    }

	MINUS() {
	    return this.getToken(MySqlParser.MINUS, 0);
	};

	GREATER_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySqlParser.GREATER_SYMBOL);
	    } else {
	        return this.getToken(MySqlParser.GREATER_SYMBOL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterJsonOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitJsonOperator(this);
		}
	}


}



class CharsetNameBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_charsetNameBase;
    }

	ARMSCII8() {
	    return this.getToken(MySqlParser.ARMSCII8, 0);
	};

	ASCII() {
	    return this.getToken(MySqlParser.ASCII, 0);
	};

	BIG5() {
	    return this.getToken(MySqlParser.BIG5, 0);
	};

	BINARY() {
	    return this.getToken(MySqlParser.BINARY, 0);
	};

	CP1250() {
	    return this.getToken(MySqlParser.CP1250, 0);
	};

	CP1251() {
	    return this.getToken(MySqlParser.CP1251, 0);
	};

	CP1256() {
	    return this.getToken(MySqlParser.CP1256, 0);
	};

	CP1257() {
	    return this.getToken(MySqlParser.CP1257, 0);
	};

	CP850() {
	    return this.getToken(MySqlParser.CP850, 0);
	};

	CP852() {
	    return this.getToken(MySqlParser.CP852, 0);
	};

	CP866() {
	    return this.getToken(MySqlParser.CP866, 0);
	};

	CP932() {
	    return this.getToken(MySqlParser.CP932, 0);
	};

	DEC8() {
	    return this.getToken(MySqlParser.DEC8, 0);
	};

	EUCJPMS() {
	    return this.getToken(MySqlParser.EUCJPMS, 0);
	};

	EUCKR() {
	    return this.getToken(MySqlParser.EUCKR, 0);
	};

	GB18030() {
	    return this.getToken(MySqlParser.GB18030, 0);
	};

	GB2312() {
	    return this.getToken(MySqlParser.GB2312, 0);
	};

	GBK() {
	    return this.getToken(MySqlParser.GBK, 0);
	};

	GEOSTD8() {
	    return this.getToken(MySqlParser.GEOSTD8, 0);
	};

	GREEK() {
	    return this.getToken(MySqlParser.GREEK, 0);
	};

	HEBREW() {
	    return this.getToken(MySqlParser.HEBREW, 0);
	};

	HP8() {
	    return this.getToken(MySqlParser.HP8, 0);
	};

	KEYBCS2() {
	    return this.getToken(MySqlParser.KEYBCS2, 0);
	};

	KOI8R() {
	    return this.getToken(MySqlParser.KOI8R, 0);
	};

	KOI8U() {
	    return this.getToken(MySqlParser.KOI8U, 0);
	};

	LATIN1() {
	    return this.getToken(MySqlParser.LATIN1, 0);
	};

	LATIN2() {
	    return this.getToken(MySqlParser.LATIN2, 0);
	};

	LATIN5() {
	    return this.getToken(MySqlParser.LATIN5, 0);
	};

	LATIN7() {
	    return this.getToken(MySqlParser.LATIN7, 0);
	};

	MACCE() {
	    return this.getToken(MySqlParser.MACCE, 0);
	};

	MACROMAN() {
	    return this.getToken(MySqlParser.MACROMAN, 0);
	};

	SJIS() {
	    return this.getToken(MySqlParser.SJIS, 0);
	};

	SWE7() {
	    return this.getToken(MySqlParser.SWE7, 0);
	};

	TIS620() {
	    return this.getToken(MySqlParser.TIS620, 0);
	};

	UCS2() {
	    return this.getToken(MySqlParser.UCS2, 0);
	};

	UJIS() {
	    return this.getToken(MySqlParser.UJIS, 0);
	};

	UTF16() {
	    return this.getToken(MySqlParser.UTF16, 0);
	};

	UTF16LE() {
	    return this.getToken(MySqlParser.UTF16LE, 0);
	};

	UTF32() {
	    return this.getToken(MySqlParser.UTF32, 0);
	};

	UTF8() {
	    return this.getToken(MySqlParser.UTF8, 0);
	};

	UTF8MB3() {
	    return this.getToken(MySqlParser.UTF8MB3, 0);
	};

	UTF8MB4() {
	    return this.getToken(MySqlParser.UTF8MB4, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterCharsetNameBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitCharsetNameBase(this);
		}
	}


}



class TransactionLevelBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_transactionLevelBase;
    }

	REPEATABLE() {
	    return this.getToken(MySqlParser.REPEATABLE, 0);
	};

	COMMITTED() {
	    return this.getToken(MySqlParser.COMMITTED, 0);
	};

	UNCOMMITTED() {
	    return this.getToken(MySqlParser.UNCOMMITTED, 0);
	};

	SERIALIZABLE() {
	    return this.getToken(MySqlParser.SERIALIZABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterTransactionLevelBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitTransactionLevelBase(this);
		}
	}


}



class PrivilegesBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_privilegesBase;
    }

	TABLES() {
	    return this.getToken(MySqlParser.TABLES, 0);
	};

	ROUTINE() {
	    return this.getToken(MySqlParser.ROUTINE, 0);
	};

	EXECUTE() {
	    return this.getToken(MySqlParser.EXECUTE, 0);
	};

	FILE() {
	    return this.getToken(MySqlParser.FILE, 0);
	};

	PROCESS() {
	    return this.getToken(MySqlParser.PROCESS, 0);
	};

	RELOAD() {
	    return this.getToken(MySqlParser.RELOAD, 0);
	};

	SHUTDOWN() {
	    return this.getToken(MySqlParser.SHUTDOWN, 0);
	};

	SUPER() {
	    return this.getToken(MySqlParser.SUPER, 0);
	};

	PRIVILEGES() {
	    return this.getToken(MySqlParser.PRIVILEGES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterPrivilegesBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitPrivilegesBase(this);
		}
	}


}



class IntervalTypeBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_intervalTypeBase;
    }

	QUARTER() {
	    return this.getToken(MySqlParser.QUARTER, 0);
	};

	MONTH() {
	    return this.getToken(MySqlParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	HOUR() {
	    return this.getToken(MySqlParser.HOUR, 0);
	};

	MINUTE() {
	    return this.getToken(MySqlParser.MINUTE, 0);
	};

	WEEK() {
	    return this.getToken(MySqlParser.WEEK, 0);
	};

	SECOND() {
	    return this.getToken(MySqlParser.SECOND, 0);
	};

	MICROSECOND() {
	    return this.getToken(MySqlParser.MICROSECOND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterIntervalTypeBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitIntervalTypeBase(this);
		}
	}


}



class DataTypeBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_dataTypeBase;
    }

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(MySqlParser.DATETIME, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	ENUM() {
	    return this.getToken(MySqlParser.ENUM, 0);
	};

	TEXT() {
	    return this.getToken(MySqlParser.TEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterDataTypeBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitDataTypeBase(this);
		}
	}


}



class KeywordsCanBeIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_keywordsCanBeId;
    }

	ACCOUNT() {
	    return this.getToken(MySqlParser.ACCOUNT, 0);
	};

	ACTION() {
	    return this.getToken(MySqlParser.ACTION, 0);
	};

	ADMIN() {
	    return this.getToken(MySqlParser.ADMIN, 0);
	};

	AFTER() {
	    return this.getToken(MySqlParser.AFTER, 0);
	};

	AGGREGATE() {
	    return this.getToken(MySqlParser.AGGREGATE, 0);
	};

	ALGORITHM() {
	    return this.getToken(MySqlParser.ALGORITHM, 0);
	};

	ANY() {
	    return this.getToken(MySqlParser.ANY, 0);
	};

	ARRAY() {
	    return this.getToken(MySqlParser.ARRAY, 0);
	};

	AT() {
	    return this.getToken(MySqlParser.AT, 0);
	};

	AUDIT_ADMIN() {
	    return this.getToken(MySqlParser.AUDIT_ADMIN, 0);
	};

	AUDIT_ABORT_EXEMPT() {
	    return this.getToken(MySqlParser.AUDIT_ABORT_EXEMPT, 0);
	};

	AUTHORS() {
	    return this.getToken(MySqlParser.AUTHORS, 0);
	};

	AUTOCOMMIT() {
	    return this.getToken(MySqlParser.AUTOCOMMIT, 0);
	};

	AUTOEXTEND_SIZE() {
	    return this.getToken(MySqlParser.AUTOEXTEND_SIZE, 0);
	};

	AUTO_INCREMENT() {
	    return this.getToken(MySqlParser.AUTO_INCREMENT, 0);
	};

	AUTHENTICATION_POLICY_ADMIN() {
	    return this.getToken(MySqlParser.AUTHENTICATION_POLICY_ADMIN, 0);
	};

	AVG() {
	    return this.getToken(MySqlParser.AVG, 0);
	};

	AVG_ROW_LENGTH() {
	    return this.getToken(MySqlParser.AVG_ROW_LENGTH, 0);
	};

	ATTRIBUTE() {
	    return this.getToken(MySqlParser.ATTRIBUTE, 0);
	};

	BACKUP_ADMIN() {
	    return this.getToken(MySqlParser.BACKUP_ADMIN, 0);
	};

	BEGIN() {
	    return this.getToken(MySqlParser.BEGIN, 0);
	};

	BINLOG() {
	    return this.getToken(MySqlParser.BINLOG, 0);
	};

	BINLOG_ADMIN() {
	    return this.getToken(MySqlParser.BINLOG_ADMIN, 0);
	};

	BINLOG_ENCRYPTION_ADMIN() {
	    return this.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0);
	};

	BIT() {
	    return this.getToken(MySqlParser.BIT, 0);
	};

	BIT_AND() {
	    return this.getToken(MySqlParser.BIT_AND, 0);
	};

	BIT_OR() {
	    return this.getToken(MySqlParser.BIT_OR, 0);
	};

	BIT_XOR() {
	    return this.getToken(MySqlParser.BIT_XOR, 0);
	};

	BLOCK() {
	    return this.getToken(MySqlParser.BLOCK, 0);
	};

	BOOL() {
	    return this.getToken(MySqlParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(MySqlParser.BOOLEAN, 0);
	};

	BTREE() {
	    return this.getToken(MySqlParser.BTREE, 0);
	};

	BUCKETS() {
	    return this.getToken(MySqlParser.BUCKETS, 0);
	};

	CACHE() {
	    return this.getToken(MySqlParser.CACHE, 0);
	};

	CASCADED() {
	    return this.getToken(MySqlParser.CASCADED, 0);
	};

	CHAIN() {
	    return this.getToken(MySqlParser.CHAIN, 0);
	};

	CHANGED() {
	    return this.getToken(MySqlParser.CHANGED, 0);
	};

	CHANNEL() {
	    return this.getToken(MySqlParser.CHANNEL, 0);
	};

	CHECKSUM() {
	    return this.getToken(MySqlParser.CHECKSUM, 0);
	};

	PAGE_CHECKSUM() {
	    return this.getToken(MySqlParser.PAGE_CHECKSUM, 0);
	};

	CATALOG_NAME() {
	    return this.getToken(MySqlParser.CATALOG_NAME, 0);
	};

	CIPHER() {
	    return this.getToken(MySqlParser.CIPHER, 0);
	};

	CLASS_ORIGIN() {
	    return this.getToken(MySqlParser.CLASS_ORIGIN, 0);
	};

	CLIENT() {
	    return this.getToken(MySqlParser.CLIENT, 0);
	};

	CLONE_ADMIN() {
	    return this.getToken(MySqlParser.CLONE_ADMIN, 0);
	};

	CLOSE() {
	    return this.getToken(MySqlParser.CLOSE, 0);
	};

	CLUSTERING() {
	    return this.getToken(MySqlParser.CLUSTERING, 0);
	};

	COALESCE() {
	    return this.getToken(MySqlParser.COALESCE, 0);
	};

	CODE() {
	    return this.getToken(MySqlParser.CODE, 0);
	};

	COLUMNS() {
	    return this.getToken(MySqlParser.COLUMNS, 0);
	};

	COLUMN_FORMAT() {
	    return this.getToken(MySqlParser.COLUMN_FORMAT, 0);
	};

	COLUMN_NAME() {
	    return this.getToken(MySqlParser.COLUMN_NAME, 0);
	};

	COMMENT() {
	    return this.getToken(MySqlParser.COMMENT, 0);
	};

	COMMIT() {
	    return this.getToken(MySqlParser.COMMIT, 0);
	};

	COMPACT() {
	    return this.getToken(MySqlParser.COMPACT, 0);
	};

	COMPLETION() {
	    return this.getToken(MySqlParser.COMPLETION, 0);
	};

	COMPRESSED() {
	    return this.getToken(MySqlParser.COMPRESSED, 0);
	};

	COMPRESSION() {
	    return this.getToken(MySqlParser.COMPRESSION, 0);
	};

	CONCURRENT() {
	    return this.getToken(MySqlParser.CONCURRENT, 0);
	};

	CONDITION() {
	    return this.getToken(MySqlParser.CONDITION, 0);
	};

	CONNECT() {
	    return this.getToken(MySqlParser.CONNECT, 0);
	};

	CONNECTION() {
	    return this.getToken(MySqlParser.CONNECTION, 0);
	};

	CONNECTION_ADMIN() {
	    return this.getToken(MySqlParser.CONNECTION_ADMIN, 0);
	};

	CONSISTENT() {
	    return this.getToken(MySqlParser.CONSISTENT, 0);
	};

	CONSTRAINT_CATALOG() {
	    return this.getToken(MySqlParser.CONSTRAINT_CATALOG, 0);
	};

	CONSTRAINT_NAME() {
	    return this.getToken(MySqlParser.CONSTRAINT_NAME, 0);
	};

	CONSTRAINT_SCHEMA() {
	    return this.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0);
	};

	CONTAINS() {
	    return this.getToken(MySqlParser.CONTAINS, 0);
	};

	CONTEXT() {
	    return this.getToken(MySqlParser.CONTEXT, 0);
	};

	CONTRIBUTORS() {
	    return this.getToken(MySqlParser.CONTRIBUTORS, 0);
	};

	COPY() {
	    return this.getToken(MySqlParser.COPY, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	CPU() {
	    return this.getToken(MySqlParser.CPU, 0);
	};

	CURRENT() {
	    return this.getToken(MySqlParser.CURRENT, 0);
	};

	CURRENT_USER() {
	    return this.getToken(MySqlParser.CURRENT_USER, 0);
	};

	CURSOR_NAME() {
	    return this.getToken(MySqlParser.CURSOR_NAME, 0);
	};

	DATA() {
	    return this.getToken(MySqlParser.DATA, 0);
	};

	DATAFILE() {
	    return this.getToken(MySqlParser.DATAFILE, 0);
	};

	DEALLOCATE() {
	    return this.getToken(MySqlParser.DEALLOCATE, 0);
	};

	DEFAULT() {
	    return this.getToken(MySqlParser.DEFAULT, 0);
	};

	DEFAULT_AUTH() {
	    return this.getToken(MySqlParser.DEFAULT_AUTH, 0);
	};

	DEFINER() {
	    return this.getToken(MySqlParser.DEFINER, 0);
	};

	DELAY_KEY_WRITE() {
	    return this.getToken(MySqlParser.DELAY_KEY_WRITE, 0);
	};

	DES_KEY_FILE() {
	    return this.getToken(MySqlParser.DES_KEY_FILE, 0);
	};

	DIAGNOSTICS() {
	    return this.getToken(MySqlParser.DIAGNOSTICS, 0);
	};

	DIRECTORY() {
	    return this.getToken(MySqlParser.DIRECTORY, 0);
	};

	DISABLE() {
	    return this.getToken(MySqlParser.DISABLE, 0);
	};

	DISCARD() {
	    return this.getToken(MySqlParser.DISCARD, 0);
	};

	DISK() {
	    return this.getToken(MySqlParser.DISK, 0);
	};

	DO() {
	    return this.getToken(MySqlParser.DO, 0);
	};

	DUMPFILE() {
	    return this.getToken(MySqlParser.DUMPFILE, 0);
	};

	DUPLICATE() {
	    return this.getToken(MySqlParser.DUPLICATE, 0);
	};

	DYNAMIC() {
	    return this.getToken(MySqlParser.DYNAMIC, 0);
	};

	EMPTY() {
	    return this.getToken(MySqlParser.EMPTY, 0);
	};

	ENABLE() {
	    return this.getToken(MySqlParser.ENABLE, 0);
	};

	ENCRYPTION() {
	    return this.getToken(MySqlParser.ENCRYPTION, 0);
	};

	ENCRYPTION_KEY_ADMIN() {
	    return this.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0);
	};

	END() {
	    return this.getToken(MySqlParser.END, 0);
	};

	ENDS() {
	    return this.getToken(MySqlParser.ENDS, 0);
	};

	ENGINE() {
	    return this.getToken(MySqlParser.ENGINE, 0);
	};

	ENGINE_ATTRIBUTE() {
	    return this.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0);
	};

	ENGINES() {
	    return this.getToken(MySqlParser.ENGINES, 0);
	};

	ENFORCED() {
	    return this.getToken(MySqlParser.ENFORCED, 0);
	};

	ERROR() {
	    return this.getToken(MySqlParser.ERROR, 0);
	};

	ERRORS() {
	    return this.getToken(MySqlParser.ERRORS, 0);
	};

	ESCAPE() {
	    return this.getToken(MySqlParser.ESCAPE, 0);
	};

	EUR() {
	    return this.getToken(MySqlParser.EUR, 0);
	};

	EVEN() {
	    return this.getToken(MySqlParser.EVEN, 0);
	};

	EVENT() {
	    return this.getToken(MySqlParser.EVENT, 0);
	};

	EVENTS() {
	    return this.getToken(MySqlParser.EVENTS, 0);
	};

	EVERY() {
	    return this.getToken(MySqlParser.EVERY, 0);
	};

	EXCEPT() {
	    return this.getToken(MySqlParser.EXCEPT, 0);
	};

	EXCHANGE() {
	    return this.getToken(MySqlParser.EXCHANGE, 0);
	};

	EXCLUSIVE() {
	    return this.getToken(MySqlParser.EXCLUSIVE, 0);
	};

	EXPIRE() {
	    return this.getToken(MySqlParser.EXPIRE, 0);
	};

	EXPORT() {
	    return this.getToken(MySqlParser.EXPORT, 0);
	};

	EXTENDED() {
	    return this.getToken(MySqlParser.EXTENDED, 0);
	};

	EXTENT_SIZE() {
	    return this.getToken(MySqlParser.EXTENT_SIZE, 0);
	};

	FAILED_LOGIN_ATTEMPTS() {
	    return this.getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0);
	};

	FAST() {
	    return this.getToken(MySqlParser.FAST, 0);
	};

	FAULTS() {
	    return this.getToken(MySqlParser.FAULTS, 0);
	};

	FIELDS() {
	    return this.getToken(MySqlParser.FIELDS, 0);
	};

	FILE_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.FILE_BLOCK_SIZE, 0);
	};

	FILTER() {
	    return this.getToken(MySqlParser.FILTER, 0);
	};

	FIREWALL_ADMIN() {
	    return this.getToken(MySqlParser.FIREWALL_ADMIN, 0);
	};

	FIREWALL_EXEMPT() {
	    return this.getToken(MySqlParser.FIREWALL_EXEMPT, 0);
	};

	FIREWALL_USER() {
	    return this.getToken(MySqlParser.FIREWALL_USER, 0);
	};

	FIRST() {
	    return this.getToken(MySqlParser.FIRST, 0);
	};

	FIXED() {
	    return this.getToken(MySqlParser.FIXED, 0);
	};

	FLUSH() {
	    return this.getToken(MySqlParser.FLUSH, 0);
	};

	FOLLOWS() {
	    return this.getToken(MySqlParser.FOLLOWS, 0);
	};

	FOUND() {
	    return this.getToken(MySqlParser.FOUND, 0);
	};

	FULL() {
	    return this.getToken(MySqlParser.FULL, 0);
	};

	FUNCTION() {
	    return this.getToken(MySqlParser.FUNCTION, 0);
	};

	GENERAL() {
	    return this.getToken(MySqlParser.GENERAL, 0);
	};

	GLOBAL() {
	    return this.getToken(MySqlParser.GLOBAL, 0);
	};

	GRANTS() {
	    return this.getToken(MySqlParser.GRANTS, 0);
	};

	GROUP() {
	    return this.getToken(MySqlParser.GROUP, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(MySqlParser.GROUP_CONCAT, 0);
	};

	GROUP_REPLICATION() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION, 0);
	};

	GROUP_REPLICATION_ADMIN() {
	    return this.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0);
	};

	HANDLER() {
	    return this.getToken(MySqlParser.HANDLER, 0);
	};

	HASH() {
	    return this.getToken(MySqlParser.HASH, 0);
	};

	HELP() {
	    return this.getToken(MySqlParser.HELP, 0);
	};

	HISTORY() {
	    return this.getToken(MySqlParser.HISTORY, 0);
	};

	HOST() {
	    return this.getToken(MySqlParser.HOST, 0);
	};

	HOSTS() {
	    return this.getToken(MySqlParser.HOSTS, 0);
	};

	IDENTIFIED() {
	    return this.getToken(MySqlParser.IDENTIFIED, 0);
	};

	IGNORED() {
	    return this.getToken(MySqlParser.IGNORED, 0);
	};

	IGNORE_SERVER_IDS() {
	    return this.getToken(MySqlParser.IGNORE_SERVER_IDS, 0);
	};

	IMPORT() {
	    return this.getToken(MySqlParser.IMPORT, 0);
	};

	INDEXES() {
	    return this.getToken(MySqlParser.INDEXES, 0);
	};

	INITIAL_SIZE() {
	    return this.getToken(MySqlParser.INITIAL_SIZE, 0);
	};

	INNODB_REDO_LOG_ARCHIVE() {
	    return this.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0);
	};

	INPLACE() {
	    return this.getToken(MySqlParser.INPLACE, 0);
	};

	INSERT_METHOD() {
	    return this.getToken(MySqlParser.INSERT_METHOD, 0);
	};

	INSTALL() {
	    return this.getToken(MySqlParser.INSTALL, 0);
	};

	INSTANCE() {
	    return this.getToken(MySqlParser.INSTANCE, 0);
	};

	INSTANT() {
	    return this.getToken(MySqlParser.INSTANT, 0);
	};

	INTERNAL() {
	    return this.getToken(MySqlParser.INTERNAL, 0);
	};

	INVOKE() {
	    return this.getToken(MySqlParser.INVOKE, 0);
	};

	INVOKER() {
	    return this.getToken(MySqlParser.INVOKER, 0);
	};

	IO() {
	    return this.getToken(MySqlParser.IO, 0);
	};

	IO_THREAD() {
	    return this.getToken(MySqlParser.IO_THREAD, 0);
	};

	IPC() {
	    return this.getToken(MySqlParser.IPC, 0);
	};

	ISO() {
	    return this.getToken(MySqlParser.ISO, 0);
	};

	ISOLATION() {
	    return this.getToken(MySqlParser.ISOLATION, 0);
	};

	ISSUER() {
	    return this.getToken(MySqlParser.ISSUER, 0);
	};

	JIS() {
	    return this.getToken(MySqlParser.JIS, 0);
	};

	JSON() {
	    return this.getToken(MySqlParser.JSON, 0);
	};

	KEY_BLOCK_SIZE() {
	    return this.getToken(MySqlParser.KEY_BLOCK_SIZE, 0);
	};

	LAMBDA() {
	    return this.getToken(MySqlParser.LAMBDA, 0);
	};

	LANGUAGE() {
	    return this.getToken(MySqlParser.LANGUAGE, 0);
	};

	LAST() {
	    return this.getToken(MySqlParser.LAST, 0);
	};

	LATERAL() {
	    return this.getToken(MySqlParser.LATERAL, 0);
	};

	LEAVES() {
	    return this.getToken(MySqlParser.LEAVES, 0);
	};

	LESS() {
	    return this.getToken(MySqlParser.LESS, 0);
	};

	LEVEL() {
	    return this.getToken(MySqlParser.LEVEL, 0);
	};

	LIST() {
	    return this.getToken(MySqlParser.LIST, 0);
	};

	LOCAL() {
	    return this.getToken(MySqlParser.LOCAL, 0);
	};

	LOGFILE() {
	    return this.getToken(MySqlParser.LOGFILE, 0);
	};

	LOGS() {
	    return this.getToken(MySqlParser.LOGS, 0);
	};

	MASTER() {
	    return this.getToken(MySqlParser.MASTER, 0);
	};

	MASTER_AUTO_POSITION() {
	    return this.getToken(MySqlParser.MASTER_AUTO_POSITION, 0);
	};

	MASTER_CONNECT_RETRY() {
	    return this.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0);
	};

	MASTER_DELAY() {
	    return this.getToken(MySqlParser.MASTER_DELAY, 0);
	};

	MASTER_HEARTBEAT_PERIOD() {
	    return this.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0);
	};

	MASTER_HOST() {
	    return this.getToken(MySqlParser.MASTER_HOST, 0);
	};

	MASTER_LOG_FILE() {
	    return this.getToken(MySqlParser.MASTER_LOG_FILE, 0);
	};

	MASTER_LOG_POS() {
	    return this.getToken(MySqlParser.MASTER_LOG_POS, 0);
	};

	MASTER_PASSWORD() {
	    return this.getToken(MySqlParser.MASTER_PASSWORD, 0);
	};

	MASTER_PORT() {
	    return this.getToken(MySqlParser.MASTER_PORT, 0);
	};

	MASTER_RETRY_COUNT() {
	    return this.getToken(MySqlParser.MASTER_RETRY_COUNT, 0);
	};

	MASTER_SSL() {
	    return this.getToken(MySqlParser.MASTER_SSL, 0);
	};

	MASTER_SSL_CA() {
	    return this.getToken(MySqlParser.MASTER_SSL_CA, 0);
	};

	MASTER_SSL_CAPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CAPATH, 0);
	};

	MASTER_SSL_CERT() {
	    return this.getToken(MySqlParser.MASTER_SSL_CERT, 0);
	};

	MASTER_SSL_CIPHER() {
	    return this.getToken(MySqlParser.MASTER_SSL_CIPHER, 0);
	};

	MASTER_SSL_CRL() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRL, 0);
	};

	MASTER_SSL_CRLPATH() {
	    return this.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0);
	};

	MASTER_SSL_KEY() {
	    return this.getToken(MySqlParser.MASTER_SSL_KEY, 0);
	};

	MASTER_TLS_VERSION() {
	    return this.getToken(MySqlParser.MASTER_TLS_VERSION, 0);
	};

	MASTER_USER() {
	    return this.getToken(MySqlParser.MASTER_USER, 0);
	};

	MAX_CONNECTIONS_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0);
	};

	MAX_QUERIES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0);
	};

	MAX() {
	    return this.getToken(MySqlParser.MAX, 0);
	};

	MAX_ROWS() {
	    return this.getToken(MySqlParser.MAX_ROWS, 0);
	};

	MAX_SIZE() {
	    return this.getToken(MySqlParser.MAX_SIZE, 0);
	};

	MAX_UPDATES_PER_HOUR() {
	    return this.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0);
	};

	MAX_USER_CONNECTIONS() {
	    return this.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0);
	};

	MEDIUM() {
	    return this.getToken(MySqlParser.MEDIUM, 0);
	};

	MEMBER() {
	    return this.getToken(MySqlParser.MEMBER, 0);
	};

	MEMORY() {
	    return this.getToken(MySqlParser.MEMORY, 0);
	};

	MERGE() {
	    return this.getToken(MySqlParser.MERGE, 0);
	};

	MESSAGE_TEXT() {
	    return this.getToken(MySqlParser.MESSAGE_TEXT, 0);
	};

	MID() {
	    return this.getToken(MySqlParser.MID, 0);
	};

	MIGRATE() {
	    return this.getToken(MySqlParser.MIGRATE, 0);
	};

	MIN() {
	    return this.getToken(MySqlParser.MIN, 0);
	};

	MIN_ROWS() {
	    return this.getToken(MySqlParser.MIN_ROWS, 0);
	};

	MODE() {
	    return this.getToken(MySqlParser.MODE, 0);
	};

	MODIFY() {
	    return this.getToken(MySqlParser.MODIFY, 0);
	};

	MUTEX() {
	    return this.getToken(MySqlParser.MUTEX, 0);
	};

	MYSQL() {
	    return this.getToken(MySqlParser.MYSQL, 0);
	};

	MYSQL_ERRNO() {
	    return this.getToken(MySqlParser.MYSQL_ERRNO, 0);
	};

	NAME() {
	    return this.getToken(MySqlParser.NAME, 0);
	};

	NAMES() {
	    return this.getToken(MySqlParser.NAMES, 0);
	};

	NCHAR() {
	    return this.getToken(MySqlParser.NCHAR, 0);
	};

	NDB_STORED_USER() {
	    return this.getToken(MySqlParser.NDB_STORED_USER, 0);
	};

	NESTED() {
	    return this.getToken(MySqlParser.NESTED, 0);
	};

	NEVER() {
	    return this.getToken(MySqlParser.NEVER, 0);
	};

	NEXT() {
	    return this.getToken(MySqlParser.NEXT, 0);
	};

	NO() {
	    return this.getToken(MySqlParser.NO, 0);
	};

	NOCOPY() {
	    return this.getToken(MySqlParser.NOCOPY, 0);
	};

	NODEGROUP() {
	    return this.getToken(MySqlParser.NODEGROUP, 0);
	};

	NONE() {
	    return this.getToken(MySqlParser.NONE, 0);
	};

	NOWAIT() {
	    return this.getToken(MySqlParser.NOWAIT, 0);
	};

	NUMBER() {
	    return this.getToken(MySqlParser.NUMBER, 0);
	};

	ODBC() {
	    return this.getToken(MySqlParser.ODBC, 0);
	};

	OFFLINE() {
	    return this.getToken(MySqlParser.OFFLINE, 0);
	};

	OFFSET() {
	    return this.getToken(MySqlParser.OFFSET, 0);
	};

	OF() {
	    return this.getToken(MySqlParser.OF, 0);
	};

	OJ() {
	    return this.getToken(MySqlParser.OJ, 0);
	};

	OLD_PASSWORD() {
	    return this.getToken(MySqlParser.OLD_PASSWORD, 0);
	};

	ONE() {
	    return this.getToken(MySqlParser.ONE, 0);
	};

	ONLINE() {
	    return this.getToken(MySqlParser.ONLINE, 0);
	};

	ONLY() {
	    return this.getToken(MySqlParser.ONLY, 0);
	};

	OPEN() {
	    return this.getToken(MySqlParser.OPEN, 0);
	};

	OPTIMIZER_COSTS() {
	    return this.getToken(MySqlParser.OPTIMIZER_COSTS, 0);
	};

	OPTIONAL() {
	    return this.getToken(MySqlParser.OPTIONAL, 0);
	};

	OPTIONS() {
	    return this.getToken(MySqlParser.OPTIONS, 0);
	};

	ORDER() {
	    return this.getToken(MySqlParser.ORDER, 0);
	};

	ORDINALITY() {
	    return this.getToken(MySqlParser.ORDINALITY, 0);
	};

	OWNER() {
	    return this.getToken(MySqlParser.OWNER, 0);
	};

	PACK_KEYS() {
	    return this.getToken(MySqlParser.PACK_KEYS, 0);
	};

	PAGE() {
	    return this.getToken(MySqlParser.PAGE, 0);
	};

	PARSER() {
	    return this.getToken(MySqlParser.PARSER, 0);
	};

	PARTIAL() {
	    return this.getToken(MySqlParser.PARTIAL, 0);
	};

	PARTITIONING() {
	    return this.getToken(MySqlParser.PARTITIONING, 0);
	};

	PARTITIONS() {
	    return this.getToken(MySqlParser.PARTITIONS, 0);
	};

	PASSWORD() {
	    return this.getToken(MySqlParser.PASSWORD, 0);
	};

	PASSWORDLESS_USER_ADMIN() {
	    return this.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0);
	};

	PASSWORD_LOCK_TIME() {
	    return this.getToken(MySqlParser.PASSWORD_LOCK_TIME, 0);
	};

	PATH() {
	    return this.getToken(MySqlParser.PATH, 0);
	};

	PERSIST_RO_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0);
	};

	PHASE() {
	    return this.getToken(MySqlParser.PHASE, 0);
	};

	PLUGINS() {
	    return this.getToken(MySqlParser.PLUGINS, 0);
	};

	PLUGIN_DIR() {
	    return this.getToken(MySqlParser.PLUGIN_DIR, 0);
	};

	PLUGIN() {
	    return this.getToken(MySqlParser.PLUGIN, 0);
	};

	PORT() {
	    return this.getToken(MySqlParser.PORT, 0);
	};

	PRECEDES() {
	    return this.getToken(MySqlParser.PRECEDES, 0);
	};

	PREPARE() {
	    return this.getToken(MySqlParser.PREPARE, 0);
	};

	PRESERVE() {
	    return this.getToken(MySqlParser.PRESERVE, 0);
	};

	PREV() {
	    return this.getToken(MySqlParser.PREV, 0);
	};

	PRIMARY() {
	    return this.getToken(MySqlParser.PRIMARY, 0);
	};

	PROCESSLIST() {
	    return this.getToken(MySqlParser.PROCESSLIST, 0);
	};

	PROFILE() {
	    return this.getToken(MySqlParser.PROFILE, 0);
	};

	PROFILES() {
	    return this.getToken(MySqlParser.PROFILES, 0);
	};

	PROXY() {
	    return this.getToken(MySqlParser.PROXY, 0);
	};

	QUERY() {
	    return this.getToken(MySqlParser.QUERY, 0);
	};

	QUICK() {
	    return this.getToken(MySqlParser.QUICK, 0);
	};

	REBUILD() {
	    return this.getToken(MySqlParser.REBUILD, 0);
	};

	RECOVER() {
	    return this.getToken(MySqlParser.RECOVER, 0);
	};

	RECURSIVE() {
	    return this.getToken(MySqlParser.RECURSIVE, 0);
	};

	REDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.REDO_BUFFER_SIZE, 0);
	};

	REDUNDANT() {
	    return this.getToken(MySqlParser.REDUNDANT, 0);
	};

	RELAY() {
	    return this.getToken(MySqlParser.RELAY, 0);
	};

	RELAYLOG() {
	    return this.getToken(MySqlParser.RELAYLOG, 0);
	};

	RELAY_LOG_FILE() {
	    return this.getToken(MySqlParser.RELAY_LOG_FILE, 0);
	};

	RELAY_LOG_POS() {
	    return this.getToken(MySqlParser.RELAY_LOG_POS, 0);
	};

	REMOVE() {
	    return this.getToken(MySqlParser.REMOVE, 0);
	};

	REORGANIZE() {
	    return this.getToken(MySqlParser.REORGANIZE, 0);
	};

	REPAIR() {
	    return this.getToken(MySqlParser.REPAIR, 0);
	};

	REPLICATE_DO_DB() {
	    return this.getToken(MySqlParser.REPLICATE_DO_DB, 0);
	};

	REPLICATE_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_DO_TABLE, 0);
	};

	REPLICATE_IGNORE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0);
	};

	REPLICATE_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0);
	};

	REPLICATE_REWRITE_DB() {
	    return this.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0);
	};

	REPLICATE_WILD_DO_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0);
	};

	REPLICATE_WILD_IGNORE_TABLE() {
	    return this.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0);
	};

	REPLICATION() {
	    return this.getToken(MySqlParser.REPLICATION, 0);
	};

	REPLICATION_APPLIER() {
	    return this.getToken(MySqlParser.REPLICATION_APPLIER, 0);
	};

	REPLICATION_SLAVE_ADMIN() {
	    return this.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0);
	};

	RESET() {
	    return this.getToken(MySqlParser.RESET, 0);
	};

	RESOURCE_GROUP_ADMIN() {
	    return this.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0);
	};

	RESOURCE_GROUP_USER() {
	    return this.getToken(MySqlParser.RESOURCE_GROUP_USER, 0);
	};

	RESUME() {
	    return this.getToken(MySqlParser.RESUME, 0);
	};

	RETURNED_SQLSTATE() {
	    return this.getToken(MySqlParser.RETURNED_SQLSTATE, 0);
	};

	RETURNS() {
	    return this.getToken(MySqlParser.RETURNS, 0);
	};

	REUSE() {
	    return this.getToken(MySqlParser.REUSE, 0);
	};

	ROLE() {
	    return this.getToken(MySqlParser.ROLE, 0);
	};

	ROLE_ADMIN() {
	    return this.getToken(MySqlParser.ROLE_ADMIN, 0);
	};

	ROLLBACK() {
	    return this.getToken(MySqlParser.ROLLBACK, 0);
	};

	ROLLUP() {
	    return this.getToken(MySqlParser.ROLLUP, 0);
	};

	ROTATE() {
	    return this.getToken(MySqlParser.ROTATE, 0);
	};

	ROW() {
	    return this.getToken(MySqlParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(MySqlParser.ROWS, 0);
	};

	ROW_FORMAT() {
	    return this.getToken(MySqlParser.ROW_FORMAT, 0);
	};

	RTREE() {
	    return this.getToken(MySqlParser.RTREE, 0);
	};

	S3() {
	    return this.getToken(MySqlParser.S3, 0);
	};

	SAVEPOINT() {
	    return this.getToken(MySqlParser.SAVEPOINT, 0);
	};

	SCHEDULE() {
	    return this.getToken(MySqlParser.SCHEDULE, 0);
	};

	SCHEMA_NAME() {
	    return this.getToken(MySqlParser.SCHEMA_NAME, 0);
	};

	SECURITY() {
	    return this.getToken(MySqlParser.SECURITY, 0);
	};

	SECONDARY_ENGINE_ATTRIBUTE() {
	    return this.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0);
	};

	SERIAL() {
	    return this.getToken(MySqlParser.SERIAL, 0);
	};

	SERVER() {
	    return this.getToken(MySqlParser.SERVER, 0);
	};

	SESSION() {
	    return this.getToken(MySqlParser.SESSION, 0);
	};

	SESSION_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	};

	SET_USER_ID() {
	    return this.getToken(MySqlParser.SET_USER_ID, 0);
	};

	SHARE() {
	    return this.getToken(MySqlParser.SHARE, 0);
	};

	SHARED() {
	    return this.getToken(MySqlParser.SHARED, 0);
	};

	SHOW_ROUTINE() {
	    return this.getToken(MySqlParser.SHOW_ROUTINE, 0);
	};

	SIGNED() {
	    return this.getToken(MySqlParser.SIGNED, 0);
	};

	SIMPLE() {
	    return this.getToken(MySqlParser.SIMPLE, 0);
	};

	SLAVE() {
	    return this.getToken(MySqlParser.SLAVE, 0);
	};

	SLOW() {
	    return this.getToken(MySqlParser.SLOW, 0);
	};

	SKIP_QUERY_REWRITE() {
	    return this.getToken(MySqlParser.SKIP_QUERY_REWRITE, 0);
	};

	SNAPSHOT() {
	    return this.getToken(MySqlParser.SNAPSHOT, 0);
	};

	SOCKET() {
	    return this.getToken(MySqlParser.SOCKET, 0);
	};

	SOME() {
	    return this.getToken(MySqlParser.SOME, 0);
	};

	SONAME() {
	    return this.getToken(MySqlParser.SONAME, 0);
	};

	SOUNDS() {
	    return this.getToken(MySqlParser.SOUNDS, 0);
	};

	SOURCE() {
	    return this.getToken(MySqlParser.SOURCE, 0);
	};

	SQL_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.SQL_AFTER_GTIDS, 0);
	};

	SQL_AFTER_MTS_GAPS() {
	    return this.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0);
	};

	SQL_BEFORE_GTIDS() {
	    return this.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0);
	};

	SQL_BUFFER_RESULT() {
	    return this.getToken(MySqlParser.SQL_BUFFER_RESULT, 0);
	};

	SQL_CACHE() {
	    return this.getToken(MySqlParser.SQL_CACHE, 0);
	};

	SQL_NO_CACHE() {
	    return this.getToken(MySqlParser.SQL_NO_CACHE, 0);
	};

	SQL_THREAD() {
	    return this.getToken(MySqlParser.SQL_THREAD, 0);
	};

	STACKED() {
	    return this.getToken(MySqlParser.STACKED, 0);
	};

	START() {
	    return this.getToken(MySqlParser.START, 0);
	};

	STARTS() {
	    return this.getToken(MySqlParser.STARTS, 0);
	};

	STATS_AUTO_RECALC() {
	    return this.getToken(MySqlParser.STATS_AUTO_RECALC, 0);
	};

	STATS_PERSISTENT() {
	    return this.getToken(MySqlParser.STATS_PERSISTENT, 0);
	};

	STATS_SAMPLE_PAGES() {
	    return this.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0);
	};

	STATUS() {
	    return this.getToken(MySqlParser.STATUS, 0);
	};

	STD() {
	    return this.getToken(MySqlParser.STD, 0);
	};

	STDDEV() {
	    return this.getToken(MySqlParser.STDDEV, 0);
	};

	STDDEV_POP() {
	    return this.getToken(MySqlParser.STDDEV_POP, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(MySqlParser.STDDEV_SAMP, 0);
	};

	STOP() {
	    return this.getToken(MySqlParser.STOP, 0);
	};

	STORAGE() {
	    return this.getToken(MySqlParser.STORAGE, 0);
	};

	STRING() {
	    return this.getToken(MySqlParser.STRING, 0);
	};

	SUBCLASS_ORIGIN() {
	    return this.getToken(MySqlParser.SUBCLASS_ORIGIN, 0);
	};

	SUBJECT() {
	    return this.getToken(MySqlParser.SUBJECT, 0);
	};

	SUBPARTITION() {
	    return this.getToken(MySqlParser.SUBPARTITION, 0);
	};

	SUBPARTITIONS() {
	    return this.getToken(MySqlParser.SUBPARTITIONS, 0);
	};

	SUM() {
	    return this.getToken(MySqlParser.SUM, 0);
	};

	SUSPEND() {
	    return this.getToken(MySqlParser.SUSPEND, 0);
	};

	SWAPS() {
	    return this.getToken(MySqlParser.SWAPS, 0);
	};

	SWITCHES() {
	    return this.getToken(MySqlParser.SWITCHES, 0);
	};

	SYSTEM_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0);
	};

	TABLE_NAME() {
	    return this.getToken(MySqlParser.TABLE_NAME, 0);
	};

	TABLESPACE() {
	    return this.getToken(MySqlParser.TABLESPACE, 0);
	};

	TABLE_ENCRYPTION_ADMIN() {
	    return this.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0);
	};

	TABLE_TYPE() {
	    return this.getToken(MySqlParser.TABLE_TYPE, 0);
	};

	TEMPORARY() {
	    return this.getToken(MySqlParser.TEMPORARY, 0);
	};

	TEMPTABLE() {
	    return this.getToken(MySqlParser.TEMPTABLE, 0);
	};

	THAN() {
	    return this.getToken(MySqlParser.THAN, 0);
	};

	TP_CONNECTION_ADMIN() {
	    return this.getToken(MySqlParser.TP_CONNECTION_ADMIN, 0);
	};

	TRADITIONAL() {
	    return this.getToken(MySqlParser.TRADITIONAL, 0);
	};

	TRANSACTION() {
	    return this.getToken(MySqlParser.TRANSACTION, 0);
	};

	TRANSACTIONAL() {
	    return this.getToken(MySqlParser.TRANSACTIONAL, 0);
	};

	TRIGGERS() {
	    return this.getToken(MySqlParser.TRIGGERS, 0);
	};

	TRUNCATE() {
	    return this.getToken(MySqlParser.TRUNCATE, 0);
	};

	UNBOUNDED() {
	    return this.getToken(MySqlParser.UNBOUNDED, 0);
	};

	UNDEFINED() {
	    return this.getToken(MySqlParser.UNDEFINED, 0);
	};

	UNDOFILE() {
	    return this.getToken(MySqlParser.UNDOFILE, 0);
	};

	UNDO_BUFFER_SIZE() {
	    return this.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0);
	};

	UNINSTALL() {
	    return this.getToken(MySqlParser.UNINSTALL, 0);
	};

	UNKNOWN() {
	    return this.getToken(MySqlParser.UNKNOWN, 0);
	};

	UNTIL() {
	    return this.getToken(MySqlParser.UNTIL, 0);
	};

	UPGRADE() {
	    return this.getToken(MySqlParser.UPGRADE, 0);
	};

	USA() {
	    return this.getToken(MySqlParser.USA, 0);
	};

	USER() {
	    return this.getToken(MySqlParser.USER, 0);
	};

	USE_FRM() {
	    return this.getToken(MySqlParser.USE_FRM, 0);
	};

	USER_RESOURCES() {
	    return this.getToken(MySqlParser.USER_RESOURCES, 0);
	};

	VALIDATION() {
	    return this.getToken(MySqlParser.VALIDATION, 0);
	};

	VALUE() {
	    return this.getToken(MySqlParser.VALUE, 0);
	};

	VAR_POP() {
	    return this.getToken(MySqlParser.VAR_POP, 0);
	};

	VAR_SAMP() {
	    return this.getToken(MySqlParser.VAR_SAMP, 0);
	};

	VARIABLES() {
	    return this.getToken(MySqlParser.VARIABLES, 0);
	};

	VARIANCE() {
	    return this.getToken(MySqlParser.VARIANCE, 0);
	};

	VERSION_TOKEN_ADMIN() {
	    return this.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0);
	};

	VIEW() {
	    return this.getToken(MySqlParser.VIEW, 0);
	};

	VIRTUAL() {
	    return this.getToken(MySqlParser.VIRTUAL, 0);
	};

	WAIT() {
	    return this.getToken(MySqlParser.WAIT, 0);
	};

	WARNINGS() {
	    return this.getToken(MySqlParser.WARNINGS, 0);
	};

	WITHOUT() {
	    return this.getToken(MySqlParser.WITHOUT, 0);
	};

	WORK() {
	    return this.getToken(MySqlParser.WORK, 0);
	};

	WRAPPER() {
	    return this.getToken(MySqlParser.WRAPPER, 0);
	};

	X509() {
	    return this.getToken(MySqlParser.X509, 0);
	};

	XA() {
	    return this.getToken(MySqlParser.XA, 0);
	};

	XA_RECOVER_ADMIN() {
	    return this.getToken(MySqlParser.XA_RECOVER_ADMIN, 0);
	};

	XML() {
	    return this.getToken(MySqlParser.XML, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterKeywordsCanBeId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitKeywordsCanBeId(this);
		}
	}


}



class FunctionNameBaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySqlParser.RULE_functionNameBase;
    }

	ABS() {
	    return this.getToken(MySqlParser.ABS, 0);
	};

	ACOS() {
	    return this.getToken(MySqlParser.ACOS, 0);
	};

	ADDDATE() {
	    return this.getToken(MySqlParser.ADDDATE, 0);
	};

	ADDTIME() {
	    return this.getToken(MySqlParser.ADDTIME, 0);
	};

	AES_DECRYPT() {
	    return this.getToken(MySqlParser.AES_DECRYPT, 0);
	};

	AES_ENCRYPT() {
	    return this.getToken(MySqlParser.AES_ENCRYPT, 0);
	};

	AREA() {
	    return this.getToken(MySqlParser.AREA, 0);
	};

	ASBINARY() {
	    return this.getToken(MySqlParser.ASBINARY, 0);
	};

	ASIN() {
	    return this.getToken(MySqlParser.ASIN, 0);
	};

	ASTEXT() {
	    return this.getToken(MySqlParser.ASTEXT, 0);
	};

	ASWKB() {
	    return this.getToken(MySqlParser.ASWKB, 0);
	};

	ASWKT() {
	    return this.getToken(MySqlParser.ASWKT, 0);
	};

	ASYMMETRIC_DECRYPT() {
	    return this.getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0);
	};

	ASYMMETRIC_DERIVE() {
	    return this.getToken(MySqlParser.ASYMMETRIC_DERIVE, 0);
	};

	ASYMMETRIC_ENCRYPT() {
	    return this.getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0);
	};

	ASYMMETRIC_SIGN() {
	    return this.getToken(MySqlParser.ASYMMETRIC_SIGN, 0);
	};

	ASYMMETRIC_VERIFY() {
	    return this.getToken(MySqlParser.ASYMMETRIC_VERIFY, 0);
	};

	ATAN() {
	    return this.getToken(MySqlParser.ATAN, 0);
	};

	ATAN2() {
	    return this.getToken(MySqlParser.ATAN2, 0);
	};

	BENCHMARK() {
	    return this.getToken(MySqlParser.BENCHMARK, 0);
	};

	BIN() {
	    return this.getToken(MySqlParser.BIN, 0);
	};

	BIT_COUNT() {
	    return this.getToken(MySqlParser.BIT_COUNT, 0);
	};

	BIT_LENGTH() {
	    return this.getToken(MySqlParser.BIT_LENGTH, 0);
	};

	BUFFER() {
	    return this.getToken(MySqlParser.BUFFER, 0);
	};

	CEIL() {
	    return this.getToken(MySqlParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(MySqlParser.CEILING, 0);
	};

	CENTROID() {
	    return this.getToken(MySqlParser.CENTROID, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(MySqlParser.CHARACTER_LENGTH, 0);
	};

	CHARSET() {
	    return this.getToken(MySqlParser.CHARSET, 0);
	};

	CHAR_LENGTH() {
	    return this.getToken(MySqlParser.CHAR_LENGTH, 0);
	};

	COERCIBILITY() {
	    return this.getToken(MySqlParser.COERCIBILITY, 0);
	};

	COLLATION() {
	    return this.getToken(MySqlParser.COLLATION, 0);
	};

	COMPRESS() {
	    return this.getToken(MySqlParser.COMPRESS, 0);
	};

	CONCAT() {
	    return this.getToken(MySqlParser.CONCAT, 0);
	};

	CONCAT_WS() {
	    return this.getToken(MySqlParser.CONCAT_WS, 0);
	};

	CONNECTION_ID() {
	    return this.getToken(MySqlParser.CONNECTION_ID, 0);
	};

	CONV() {
	    return this.getToken(MySqlParser.CONV, 0);
	};

	CONVERT_TZ() {
	    return this.getToken(MySqlParser.CONVERT_TZ, 0);
	};

	COS() {
	    return this.getToken(MySqlParser.COS, 0);
	};

	COT() {
	    return this.getToken(MySqlParser.COT, 0);
	};

	COUNT() {
	    return this.getToken(MySqlParser.COUNT, 0);
	};

	CRC32() {
	    return this.getToken(MySqlParser.CRC32, 0);
	};

	CREATE_ASYMMETRIC_PRIV_KEY() {
	    return this.getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0);
	};

	CREATE_ASYMMETRIC_PUB_KEY() {
	    return this.getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0);
	};

	CREATE_DH_PARAMETERS() {
	    return this.getToken(MySqlParser.CREATE_DH_PARAMETERS, 0);
	};

	CREATE_DIGEST() {
	    return this.getToken(MySqlParser.CREATE_DIGEST, 0);
	};

	CROSSES() {
	    return this.getToken(MySqlParser.CROSSES, 0);
	};

	CUME_DIST() {
	    return this.getToken(MySqlParser.CUME_DIST, 0);
	};

	DATABASE() {
	    return this.getToken(MySqlParser.DATABASE, 0);
	};

	DATE() {
	    return this.getToken(MySqlParser.DATE, 0);
	};

	DATEDIFF() {
	    return this.getToken(MySqlParser.DATEDIFF, 0);
	};

	DATE_FORMAT() {
	    return this.getToken(MySqlParser.DATE_FORMAT, 0);
	};

	DAY() {
	    return this.getToken(MySqlParser.DAY, 0);
	};

	DAYNAME() {
	    return this.getToken(MySqlParser.DAYNAME, 0);
	};

	DAYOFMONTH() {
	    return this.getToken(MySqlParser.DAYOFMONTH, 0);
	};

	DAYOFWEEK() {
	    return this.getToken(MySqlParser.DAYOFWEEK, 0);
	};

	DAYOFYEAR() {
	    return this.getToken(MySqlParser.DAYOFYEAR, 0);
	};

	DECODE() {
	    return this.getToken(MySqlParser.DECODE, 0);
	};

	DEGREES() {
	    return this.getToken(MySqlParser.DEGREES, 0);
	};

	DENSE_RANK() {
	    return this.getToken(MySqlParser.DENSE_RANK, 0);
	};

	DES_DECRYPT() {
	    return this.getToken(MySqlParser.DES_DECRYPT, 0);
	};

	DES_ENCRYPT() {
	    return this.getToken(MySqlParser.DES_ENCRYPT, 0);
	};

	DIMENSION() {
	    return this.getToken(MySqlParser.DIMENSION, 0);
	};

	DISJOINT() {
	    return this.getToken(MySqlParser.DISJOINT, 0);
	};

	ELT() {
	    return this.getToken(MySqlParser.ELT, 0);
	};

	ENCODE() {
	    return this.getToken(MySqlParser.ENCODE, 0);
	};

	ENCRYPT() {
	    return this.getToken(MySqlParser.ENCRYPT, 0);
	};

	ENDPOINT() {
	    return this.getToken(MySqlParser.ENDPOINT, 0);
	};

	ENVELOPE() {
	    return this.getToken(MySqlParser.ENVELOPE, 0);
	};

	EQUALS() {
	    return this.getToken(MySqlParser.EQUALS, 0);
	};

	EXP() {
	    return this.getToken(MySqlParser.EXP, 0);
	};

	EXPORT_SET() {
	    return this.getToken(MySqlParser.EXPORT_SET, 0);
	};

	EXTERIORRING() {
	    return this.getToken(MySqlParser.EXTERIORRING, 0);
	};

	EXTRACTVALUE() {
	    return this.getToken(MySqlParser.EXTRACTVALUE, 0);
	};

	FIELD() {
	    return this.getToken(MySqlParser.FIELD, 0);
	};

	FIND_IN_SET() {
	    return this.getToken(MySqlParser.FIND_IN_SET, 0);
	};

	FIRST_VALUE() {
	    return this.getToken(MySqlParser.FIRST_VALUE, 0);
	};

	FLOOR() {
	    return this.getToken(MySqlParser.FLOOR, 0);
	};

	FORMAT() {
	    return this.getToken(MySqlParser.FORMAT, 0);
	};

	FOUND_ROWS() {
	    return this.getToken(MySqlParser.FOUND_ROWS, 0);
	};

	FROM_BASE64() {
	    return this.getToken(MySqlParser.FROM_BASE64, 0);
	};

	FROM_DAYS() {
	    return this.getToken(MySqlParser.FROM_DAYS, 0);
	};

	FROM_UNIXTIME() {
	    return this.getToken(MySqlParser.FROM_UNIXTIME, 0);
	};

	GEOMCOLLFROMTEXT() {
	    return this.getToken(MySqlParser.GEOMCOLLFROMTEXT, 0);
	};

	GEOMCOLLFROMWKB() {
	    return this.getToken(MySqlParser.GEOMCOLLFROMWKB, 0);
	};

	GEOMETRYCOLLECTION() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTION, 0);
	};

	GEOMETRYCOLLECTIONFROMTEXT() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0);
	};

	GEOMETRYCOLLECTIONFROMWKB() {
	    return this.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0);
	};

	GEOMETRYFROMTEXT() {
	    return this.getToken(MySqlParser.GEOMETRYFROMTEXT, 0);
	};

	GEOMETRYFROMWKB() {
	    return this.getToken(MySqlParser.GEOMETRYFROMWKB, 0);
	};

	GEOMETRYN() {
	    return this.getToken(MySqlParser.GEOMETRYN, 0);
	};

	GEOMETRYTYPE() {
	    return this.getToken(MySqlParser.GEOMETRYTYPE, 0);
	};

	GEOMFROMTEXT() {
	    return this.getToken(MySqlParser.GEOMFROMTEXT, 0);
	};

	GEOMFROMWKB() {
	    return this.getToken(MySqlParser.GEOMFROMWKB, 0);
	};

	GET_FORMAT() {
	    return this.getToken(MySqlParser.GET_FORMAT, 0);
	};

	GET_LOCK() {
	    return this.getToken(MySqlParser.GET_LOCK, 0);
	};

	GLENGTH() {
	    return this.getToken(MySqlParser.GLENGTH, 0);
	};

	GREATEST() {
	    return this.getToken(MySqlParser.GREATEST, 0);
	};

	GTID_SUBSET() {
	    return this.getToken(MySqlParser.GTID_SUBSET, 0);
	};

	GTID_SUBTRACT() {
	    return this.getToken(MySqlParser.GTID_SUBTRACT, 0);
	};

	HEX() {
	    return this.getToken(MySqlParser.HEX, 0);
	};

	HOUR() {
	    return this.getToken(MySqlParser.HOUR, 0);
	};

	IFNULL() {
	    return this.getToken(MySqlParser.IFNULL, 0);
	};

	INET6_ATON() {
	    return this.getToken(MySqlParser.INET6_ATON, 0);
	};

	INET6_NTOA() {
	    return this.getToken(MySqlParser.INET6_NTOA, 0);
	};

	INET_ATON() {
	    return this.getToken(MySqlParser.INET_ATON, 0);
	};

	INET_NTOA() {
	    return this.getToken(MySqlParser.INET_NTOA, 0);
	};

	INSTR() {
	    return this.getToken(MySqlParser.INSTR, 0);
	};

	INTERIORRINGN() {
	    return this.getToken(MySqlParser.INTERIORRINGN, 0);
	};

	INTERSECTS() {
	    return this.getToken(MySqlParser.INTERSECTS, 0);
	};

	INVISIBLE() {
	    return this.getToken(MySqlParser.INVISIBLE, 0);
	};

	ISCLOSED() {
	    return this.getToken(MySqlParser.ISCLOSED, 0);
	};

	ISEMPTY() {
	    return this.getToken(MySqlParser.ISEMPTY, 0);
	};

	ISNULL() {
	    return this.getToken(MySqlParser.ISNULL, 0);
	};

	ISSIMPLE() {
	    return this.getToken(MySqlParser.ISSIMPLE, 0);
	};

	IS_FREE_LOCK() {
	    return this.getToken(MySqlParser.IS_FREE_LOCK, 0);
	};

	IS_IPV4() {
	    return this.getToken(MySqlParser.IS_IPV4, 0);
	};

	IS_IPV4_COMPAT() {
	    return this.getToken(MySqlParser.IS_IPV4_COMPAT, 0);
	};

	IS_IPV4_MAPPED() {
	    return this.getToken(MySqlParser.IS_IPV4_MAPPED, 0);
	};

	IS_IPV6() {
	    return this.getToken(MySqlParser.IS_IPV6, 0);
	};

	IS_USED_LOCK() {
	    return this.getToken(MySqlParser.IS_USED_LOCK, 0);
	};

	LAG() {
	    return this.getToken(MySqlParser.LAG, 0);
	};

	LAST_INSERT_ID() {
	    return this.getToken(MySqlParser.LAST_INSERT_ID, 0);
	};

	LAST_VALUE() {
	    return this.getToken(MySqlParser.LAST_VALUE, 0);
	};

	LCASE() {
	    return this.getToken(MySqlParser.LCASE, 0);
	};

	LEAD() {
	    return this.getToken(MySqlParser.LEAD, 0);
	};

	LEAST() {
	    return this.getToken(MySqlParser.LEAST, 0);
	};

	LEFT() {
	    return this.getToken(MySqlParser.LEFT, 0);
	};

	LENGTH() {
	    return this.getToken(MySqlParser.LENGTH, 0);
	};

	LINEFROMTEXT() {
	    return this.getToken(MySqlParser.LINEFROMTEXT, 0);
	};

	LINEFROMWKB() {
	    return this.getToken(MySqlParser.LINEFROMWKB, 0);
	};

	LINESTRING() {
	    return this.getToken(MySqlParser.LINESTRING, 0);
	};

	LINESTRINGFROMTEXT() {
	    return this.getToken(MySqlParser.LINESTRINGFROMTEXT, 0);
	};

	LINESTRINGFROMWKB() {
	    return this.getToken(MySqlParser.LINESTRINGFROMWKB, 0);
	};

	LN() {
	    return this.getToken(MySqlParser.LN, 0);
	};

	LOAD_FILE() {
	    return this.getToken(MySqlParser.LOAD_FILE, 0);
	};

	LOCATE() {
	    return this.getToken(MySqlParser.LOCATE, 0);
	};

	LOG() {
	    return this.getToken(MySqlParser.LOG, 0);
	};

	LOG10() {
	    return this.getToken(MySqlParser.LOG10, 0);
	};

	LOG2() {
	    return this.getToken(MySqlParser.LOG2, 0);
	};

	LOWER() {
	    return this.getToken(MySqlParser.LOWER, 0);
	};

	LPAD() {
	    return this.getToken(MySqlParser.LPAD, 0);
	};

	LTRIM() {
	    return this.getToken(MySqlParser.LTRIM, 0);
	};

	MAKEDATE() {
	    return this.getToken(MySqlParser.MAKEDATE, 0);
	};

	MAKETIME() {
	    return this.getToken(MySqlParser.MAKETIME, 0);
	};

	MAKE_SET() {
	    return this.getToken(MySqlParser.MAKE_SET, 0);
	};

	MASTER_POS_WAIT() {
	    return this.getToken(MySqlParser.MASTER_POS_WAIT, 0);
	};

	MBRCONTAINS() {
	    return this.getToken(MySqlParser.MBRCONTAINS, 0);
	};

	MBRDISJOINT() {
	    return this.getToken(MySqlParser.MBRDISJOINT, 0);
	};

	MBREQUAL() {
	    return this.getToken(MySqlParser.MBREQUAL, 0);
	};

	MBRINTERSECTS() {
	    return this.getToken(MySqlParser.MBRINTERSECTS, 0);
	};

	MBROVERLAPS() {
	    return this.getToken(MySqlParser.MBROVERLAPS, 0);
	};

	MBRTOUCHES() {
	    return this.getToken(MySqlParser.MBRTOUCHES, 0);
	};

	MBRWITHIN() {
	    return this.getToken(MySqlParser.MBRWITHIN, 0);
	};

	MD5() {
	    return this.getToken(MySqlParser.MD5, 0);
	};

	MICROSECOND() {
	    return this.getToken(MySqlParser.MICROSECOND, 0);
	};

	MINUTE() {
	    return this.getToken(MySqlParser.MINUTE, 0);
	};

	MLINEFROMTEXT() {
	    return this.getToken(MySqlParser.MLINEFROMTEXT, 0);
	};

	MLINEFROMWKB() {
	    return this.getToken(MySqlParser.MLINEFROMWKB, 0);
	};

	MOD() {
	    return this.getToken(MySqlParser.MOD, 0);
	};

	MONTH() {
	    return this.getToken(MySqlParser.MONTH, 0);
	};

	MONTHNAME() {
	    return this.getToken(MySqlParser.MONTHNAME, 0);
	};

	MPOINTFROMTEXT() {
	    return this.getToken(MySqlParser.MPOINTFROMTEXT, 0);
	};

	MPOINTFROMWKB() {
	    return this.getToken(MySqlParser.MPOINTFROMWKB, 0);
	};

	MPOLYFROMTEXT() {
	    return this.getToken(MySqlParser.MPOLYFROMTEXT, 0);
	};

	MPOLYFROMWKB() {
	    return this.getToken(MySqlParser.MPOLYFROMWKB, 0);
	};

	MULTILINESTRING() {
	    return this.getToken(MySqlParser.MULTILINESTRING, 0);
	};

	MULTILINESTRINGFROMTEXT() {
	    return this.getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0);
	};

	MULTILINESTRINGFROMWKB() {
	    return this.getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0);
	};

	MULTIPOINT() {
	    return this.getToken(MySqlParser.MULTIPOINT, 0);
	};

	MULTIPOINTFROMTEXT() {
	    return this.getToken(MySqlParser.MULTIPOINTFROMTEXT, 0);
	};

	MULTIPOINTFROMWKB() {
	    return this.getToken(MySqlParser.MULTIPOINTFROMWKB, 0);
	};

	MULTIPOLYGON() {
	    return this.getToken(MySqlParser.MULTIPOLYGON, 0);
	};

	MULTIPOLYGONFROMTEXT() {
	    return this.getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0);
	};

	MULTIPOLYGONFROMWKB() {
	    return this.getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0);
	};

	NAME_CONST() {
	    return this.getToken(MySqlParser.NAME_CONST, 0);
	};

	NTH_VALUE() {
	    return this.getToken(MySqlParser.NTH_VALUE, 0);
	};

	NTILE() {
	    return this.getToken(MySqlParser.NTILE, 0);
	};

	NULLIF() {
	    return this.getToken(MySqlParser.NULLIF, 0);
	};

	NUMGEOMETRIES() {
	    return this.getToken(MySqlParser.NUMGEOMETRIES, 0);
	};

	NUMINTERIORRINGS() {
	    return this.getToken(MySqlParser.NUMINTERIORRINGS, 0);
	};

	NUMPOINTS() {
	    return this.getToken(MySqlParser.NUMPOINTS, 0);
	};

	OCT() {
	    return this.getToken(MySqlParser.OCT, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(MySqlParser.OCTET_LENGTH, 0);
	};

	ORD() {
	    return this.getToken(MySqlParser.ORD, 0);
	};

	OVERLAPS() {
	    return this.getToken(MySqlParser.OVERLAPS, 0);
	};

	PERCENT_RANK() {
	    return this.getToken(MySqlParser.PERCENT_RANK, 0);
	};

	PERIOD_ADD() {
	    return this.getToken(MySqlParser.PERIOD_ADD, 0);
	};

	PERIOD_DIFF() {
	    return this.getToken(MySqlParser.PERIOD_DIFF, 0);
	};

	PI() {
	    return this.getToken(MySqlParser.PI, 0);
	};

	POINT() {
	    return this.getToken(MySqlParser.POINT, 0);
	};

	POINTFROMTEXT() {
	    return this.getToken(MySqlParser.POINTFROMTEXT, 0);
	};

	POINTFROMWKB() {
	    return this.getToken(MySqlParser.POINTFROMWKB, 0);
	};

	POINTN() {
	    return this.getToken(MySqlParser.POINTN, 0);
	};

	POLYFROMTEXT() {
	    return this.getToken(MySqlParser.POLYFROMTEXT, 0);
	};

	POLYFROMWKB() {
	    return this.getToken(MySqlParser.POLYFROMWKB, 0);
	};

	POLYGON() {
	    return this.getToken(MySqlParser.POLYGON, 0);
	};

	POLYGONFROMTEXT() {
	    return this.getToken(MySqlParser.POLYGONFROMTEXT, 0);
	};

	POLYGONFROMWKB() {
	    return this.getToken(MySqlParser.POLYGONFROMWKB, 0);
	};

	POSITION() {
	    return this.getToken(MySqlParser.POSITION, 0);
	};

	POW() {
	    return this.getToken(MySqlParser.POW, 0);
	};

	POWER() {
	    return this.getToken(MySqlParser.POWER, 0);
	};

	QUARTER() {
	    return this.getToken(MySqlParser.QUARTER, 0);
	};

	QUOTE() {
	    return this.getToken(MySqlParser.QUOTE, 0);
	};

	RADIANS() {
	    return this.getToken(MySqlParser.RADIANS, 0);
	};

	RAND() {
	    return this.getToken(MySqlParser.RAND, 0);
	};

	RANDOM() {
	    return this.getToken(MySqlParser.RANDOM, 0);
	};

	RANK() {
	    return this.getToken(MySqlParser.RANK, 0);
	};

	RANDOM_BYTES() {
	    return this.getToken(MySqlParser.RANDOM_BYTES, 0);
	};

	RELEASE_LOCK() {
	    return this.getToken(MySqlParser.RELEASE_LOCK, 0);
	};

	REVERSE() {
	    return this.getToken(MySqlParser.REVERSE, 0);
	};

	RIGHT() {
	    return this.getToken(MySqlParser.RIGHT, 0);
	};

	ROUND() {
	    return this.getToken(MySqlParser.ROUND, 0);
	};

	ROW_COUNT() {
	    return this.getToken(MySqlParser.ROW_COUNT, 0);
	};

	ROW_NUMBER() {
	    return this.getToken(MySqlParser.ROW_NUMBER, 0);
	};

	RPAD() {
	    return this.getToken(MySqlParser.RPAD, 0);
	};

	RTRIM() {
	    return this.getToken(MySqlParser.RTRIM, 0);
	};

	SCHEMA() {
	    return this.getToken(MySqlParser.SCHEMA, 0);
	};

	SECOND() {
	    return this.getToken(MySqlParser.SECOND, 0);
	};

	SEC_TO_TIME() {
	    return this.getToken(MySqlParser.SEC_TO_TIME, 0);
	};

	SESSION_USER() {
	    return this.getToken(MySqlParser.SESSION_USER, 0);
	};

	SESSION_VARIABLES_ADMIN() {
	    return this.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0);
	};

	SHA() {
	    return this.getToken(MySqlParser.SHA, 0);
	};

	SHA1() {
	    return this.getToken(MySqlParser.SHA1, 0);
	};

	SHA2() {
	    return this.getToken(MySqlParser.SHA2, 0);
	};

	SIGN() {
	    return this.getToken(MySqlParser.SIGN, 0);
	};

	SIN() {
	    return this.getToken(MySqlParser.SIN, 0);
	};

	SLEEP() {
	    return this.getToken(MySqlParser.SLEEP, 0);
	};

	SOUNDEX() {
	    return this.getToken(MySqlParser.SOUNDEX, 0);
	};

	SQL_THREAD_WAIT_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0);
	};

	SQRT() {
	    return this.getToken(MySqlParser.SQRT, 0);
	};

	SRID() {
	    return this.getToken(MySqlParser.SRID, 0);
	};

	STARTPOINT() {
	    return this.getToken(MySqlParser.STARTPOINT, 0);
	};

	STRCMP() {
	    return this.getToken(MySqlParser.STRCMP, 0);
	};

	STR_TO_DATE() {
	    return this.getToken(MySqlParser.STR_TO_DATE, 0);
	};

	ST_AREA() {
	    return this.getToken(MySqlParser.ST_AREA, 0);
	};

	ST_ASBINARY() {
	    return this.getToken(MySqlParser.ST_ASBINARY, 0);
	};

	ST_ASTEXT() {
	    return this.getToken(MySqlParser.ST_ASTEXT, 0);
	};

	ST_ASWKB() {
	    return this.getToken(MySqlParser.ST_ASWKB, 0);
	};

	ST_ASWKT() {
	    return this.getToken(MySqlParser.ST_ASWKT, 0);
	};

	ST_BUFFER() {
	    return this.getToken(MySqlParser.ST_BUFFER, 0);
	};

	ST_CENTROID() {
	    return this.getToken(MySqlParser.ST_CENTROID, 0);
	};

	ST_CONTAINS() {
	    return this.getToken(MySqlParser.ST_CONTAINS, 0);
	};

	ST_CROSSES() {
	    return this.getToken(MySqlParser.ST_CROSSES, 0);
	};

	ST_DIFFERENCE() {
	    return this.getToken(MySqlParser.ST_DIFFERENCE, 0);
	};

	ST_DIMENSION() {
	    return this.getToken(MySqlParser.ST_DIMENSION, 0);
	};

	ST_DISJOINT() {
	    return this.getToken(MySqlParser.ST_DISJOINT, 0);
	};

	ST_DISTANCE() {
	    return this.getToken(MySqlParser.ST_DISTANCE, 0);
	};

	ST_ENDPOINT() {
	    return this.getToken(MySqlParser.ST_ENDPOINT, 0);
	};

	ST_ENVELOPE() {
	    return this.getToken(MySqlParser.ST_ENVELOPE, 0);
	};

	ST_EQUALS() {
	    return this.getToken(MySqlParser.ST_EQUALS, 0);
	};

	ST_EXTERIORRING() {
	    return this.getToken(MySqlParser.ST_EXTERIORRING, 0);
	};

	ST_GEOMCOLLFROMTEXT() {
	    return this.getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0);
	};

	ST_GEOMCOLLFROMTXT() {
	    return this.getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0);
	};

	ST_GEOMCOLLFROMWKB() {
	    return this.getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0);
	};

	ST_GEOMETRYCOLLECTIONFROMTEXT() {
	    return this.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0);
	};

	ST_GEOMETRYCOLLECTIONFROMWKB() {
	    return this.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0);
	};

	ST_GEOMETRYFROMTEXT() {
	    return this.getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0);
	};

	ST_GEOMETRYFROMWKB() {
	    return this.getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0);
	};

	ST_GEOMETRYN() {
	    return this.getToken(MySqlParser.ST_GEOMETRYN, 0);
	};

	ST_GEOMETRYTYPE() {
	    return this.getToken(MySqlParser.ST_GEOMETRYTYPE, 0);
	};

	ST_GEOMFROMTEXT() {
	    return this.getToken(MySqlParser.ST_GEOMFROMTEXT, 0);
	};

	ST_GEOMFROMWKB() {
	    return this.getToken(MySqlParser.ST_GEOMFROMWKB, 0);
	};

	ST_INTERIORRINGN() {
	    return this.getToken(MySqlParser.ST_INTERIORRINGN, 0);
	};

	ST_INTERSECTION() {
	    return this.getToken(MySqlParser.ST_INTERSECTION, 0);
	};

	ST_INTERSECTS() {
	    return this.getToken(MySqlParser.ST_INTERSECTS, 0);
	};

	ST_ISCLOSED() {
	    return this.getToken(MySqlParser.ST_ISCLOSED, 0);
	};

	ST_ISEMPTY() {
	    return this.getToken(MySqlParser.ST_ISEMPTY, 0);
	};

	ST_ISSIMPLE() {
	    return this.getToken(MySqlParser.ST_ISSIMPLE, 0);
	};

	ST_LINEFROMTEXT() {
	    return this.getToken(MySqlParser.ST_LINEFROMTEXT, 0);
	};

	ST_LINEFROMWKB() {
	    return this.getToken(MySqlParser.ST_LINEFROMWKB, 0);
	};

	ST_LINESTRINGFROMTEXT() {
	    return this.getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0);
	};

	ST_LINESTRINGFROMWKB() {
	    return this.getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0);
	};

	ST_NUMGEOMETRIES() {
	    return this.getToken(MySqlParser.ST_NUMGEOMETRIES, 0);
	};

	ST_NUMINTERIORRING() {
	    return this.getToken(MySqlParser.ST_NUMINTERIORRING, 0);
	};

	ST_NUMINTERIORRINGS() {
	    return this.getToken(MySqlParser.ST_NUMINTERIORRINGS, 0);
	};

	ST_NUMPOINTS() {
	    return this.getToken(MySqlParser.ST_NUMPOINTS, 0);
	};

	ST_OVERLAPS() {
	    return this.getToken(MySqlParser.ST_OVERLAPS, 0);
	};

	ST_POINTFROMTEXT() {
	    return this.getToken(MySqlParser.ST_POINTFROMTEXT, 0);
	};

	ST_POINTFROMWKB() {
	    return this.getToken(MySqlParser.ST_POINTFROMWKB, 0);
	};

	ST_POINTN() {
	    return this.getToken(MySqlParser.ST_POINTN, 0);
	};

	ST_POLYFROMTEXT() {
	    return this.getToken(MySqlParser.ST_POLYFROMTEXT, 0);
	};

	ST_POLYFROMWKB() {
	    return this.getToken(MySqlParser.ST_POLYFROMWKB, 0);
	};

	ST_POLYGONFROMTEXT() {
	    return this.getToken(MySqlParser.ST_POLYGONFROMTEXT, 0);
	};

	ST_POLYGONFROMWKB() {
	    return this.getToken(MySqlParser.ST_POLYGONFROMWKB, 0);
	};

	ST_SRID() {
	    return this.getToken(MySqlParser.ST_SRID, 0);
	};

	ST_STARTPOINT() {
	    return this.getToken(MySqlParser.ST_STARTPOINT, 0);
	};

	ST_SYMDIFFERENCE() {
	    return this.getToken(MySqlParser.ST_SYMDIFFERENCE, 0);
	};

	ST_TOUCHES() {
	    return this.getToken(MySqlParser.ST_TOUCHES, 0);
	};

	ST_UNION() {
	    return this.getToken(MySqlParser.ST_UNION, 0);
	};

	ST_WITHIN() {
	    return this.getToken(MySqlParser.ST_WITHIN, 0);
	};

	ST_X() {
	    return this.getToken(MySqlParser.ST_X, 0);
	};

	ST_Y() {
	    return this.getToken(MySqlParser.ST_Y, 0);
	};

	SUBDATE() {
	    return this.getToken(MySqlParser.SUBDATE, 0);
	};

	SUBSTRING_INDEX() {
	    return this.getToken(MySqlParser.SUBSTRING_INDEX, 0);
	};

	SUBTIME() {
	    return this.getToken(MySqlParser.SUBTIME, 0);
	};

	SYSTEM_USER() {
	    return this.getToken(MySqlParser.SYSTEM_USER, 0);
	};

	TAN() {
	    return this.getToken(MySqlParser.TAN, 0);
	};

	TIME() {
	    return this.getToken(MySqlParser.TIME, 0);
	};

	TIMEDIFF() {
	    return this.getToken(MySqlParser.TIMEDIFF, 0);
	};

	TIMESTAMP() {
	    return this.getToken(MySqlParser.TIMESTAMP, 0);
	};

	TIMESTAMPADD() {
	    return this.getToken(MySqlParser.TIMESTAMPADD, 0);
	};

	TIMESTAMPDIFF() {
	    return this.getToken(MySqlParser.TIMESTAMPDIFF, 0);
	};

	TIME_FORMAT() {
	    return this.getToken(MySqlParser.TIME_FORMAT, 0);
	};

	TIME_TO_SEC() {
	    return this.getToken(MySqlParser.TIME_TO_SEC, 0);
	};

	TOUCHES() {
	    return this.getToken(MySqlParser.TOUCHES, 0);
	};

	TO_BASE64() {
	    return this.getToken(MySqlParser.TO_BASE64, 0);
	};

	TO_DAYS() {
	    return this.getToken(MySqlParser.TO_DAYS, 0);
	};

	TO_SECONDS() {
	    return this.getToken(MySqlParser.TO_SECONDS, 0);
	};

	UCASE() {
	    return this.getToken(MySqlParser.UCASE, 0);
	};

	UNCOMPRESS() {
	    return this.getToken(MySqlParser.UNCOMPRESS, 0);
	};

	UNCOMPRESSED_LENGTH() {
	    return this.getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0);
	};

	UNHEX() {
	    return this.getToken(MySqlParser.UNHEX, 0);
	};

	UNIX_TIMESTAMP() {
	    return this.getToken(MySqlParser.UNIX_TIMESTAMP, 0);
	};

	UPDATEXML() {
	    return this.getToken(MySqlParser.UPDATEXML, 0);
	};

	UPPER() {
	    return this.getToken(MySqlParser.UPPER, 0);
	};

	UUID() {
	    return this.getToken(MySqlParser.UUID, 0);
	};

	UUID_SHORT() {
	    return this.getToken(MySqlParser.UUID_SHORT, 0);
	};

	VALIDATE_PASSWORD_STRENGTH() {
	    return this.getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0);
	};

	VERSION() {
	    return this.getToken(MySqlParser.VERSION, 0);
	};

	VISIBLE() {
	    return this.getToken(MySqlParser.VISIBLE, 0);
	};

	WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() {
	    return this.getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0);
	};

	WEEK() {
	    return this.getToken(MySqlParser.WEEK, 0);
	};

	WEEKDAY() {
	    return this.getToken(MySqlParser.WEEKDAY, 0);
	};

	WEEKOFYEAR() {
	    return this.getToken(MySqlParser.WEEKOFYEAR, 0);
	};

	WEIGHT_STRING() {
	    return this.getToken(MySqlParser.WEIGHT_STRING, 0);
	};

	WITHIN() {
	    return this.getToken(MySqlParser.WITHIN, 0);
	};

	YEAR() {
	    return this.getToken(MySqlParser.YEAR, 0);
	};

	YEARWEEK() {
	    return this.getToken(MySqlParser.YEARWEEK, 0);
	};

	Y_FUNCTION() {
	    return this.getToken(MySqlParser.Y_FUNCTION, 0);
	};

	X_FUNCTION() {
	    return this.getToken(MySqlParser.X_FUNCTION, 0);
	};

	JSON_ARRAY() {
	    return this.getToken(MySqlParser.JSON_ARRAY, 0);
	};

	JSON_OBJECT() {
	    return this.getToken(MySqlParser.JSON_OBJECT, 0);
	};

	JSON_QUOTE() {
	    return this.getToken(MySqlParser.JSON_QUOTE, 0);
	};

	JSON_CONTAINS() {
	    return this.getToken(MySqlParser.JSON_CONTAINS, 0);
	};

	JSON_CONTAINS_PATH() {
	    return this.getToken(MySqlParser.JSON_CONTAINS_PATH, 0);
	};

	JSON_EXTRACT() {
	    return this.getToken(MySqlParser.JSON_EXTRACT, 0);
	};

	JSON_KEYS() {
	    return this.getToken(MySqlParser.JSON_KEYS, 0);
	};

	JSON_OVERLAPS() {
	    return this.getToken(MySqlParser.JSON_OVERLAPS, 0);
	};

	JSON_SEARCH() {
	    return this.getToken(MySqlParser.JSON_SEARCH, 0);
	};

	JSON_VALUE() {
	    return this.getToken(MySqlParser.JSON_VALUE, 0);
	};

	JSON_ARRAY_APPEND() {
	    return this.getToken(MySqlParser.JSON_ARRAY_APPEND, 0);
	};

	JSON_ARRAY_INSERT() {
	    return this.getToken(MySqlParser.JSON_ARRAY_INSERT, 0);
	};

	JSON_INSERT() {
	    return this.getToken(MySqlParser.JSON_INSERT, 0);
	};

	JSON_MERGE() {
	    return this.getToken(MySqlParser.JSON_MERGE, 0);
	};

	JSON_MERGE_PATCH() {
	    return this.getToken(MySqlParser.JSON_MERGE_PATCH, 0);
	};

	JSON_MERGE_PRESERVE() {
	    return this.getToken(MySqlParser.JSON_MERGE_PRESERVE, 0);
	};

	JSON_REMOVE() {
	    return this.getToken(MySqlParser.JSON_REMOVE, 0);
	};

	JSON_REPLACE() {
	    return this.getToken(MySqlParser.JSON_REPLACE, 0);
	};

	JSON_SET() {
	    return this.getToken(MySqlParser.JSON_SET, 0);
	};

	JSON_UNQUOTE() {
	    return this.getToken(MySqlParser.JSON_UNQUOTE, 0);
	};

	JSON_DEPTH() {
	    return this.getToken(MySqlParser.JSON_DEPTH, 0);
	};

	JSON_LENGTH() {
	    return this.getToken(MySqlParser.JSON_LENGTH, 0);
	};

	JSON_TYPE() {
	    return this.getToken(MySqlParser.JSON_TYPE, 0);
	};

	JSON_VALID() {
	    return this.getToken(MySqlParser.JSON_VALID, 0);
	};

	JSON_TABLE() {
	    return this.getToken(MySqlParser.JSON_TABLE, 0);
	};

	JSON_SCHEMA_VALID() {
	    return this.getToken(MySqlParser.JSON_SCHEMA_VALID, 0);
	};

	JSON_SCHEMA_VALIDATION_REPORT() {
	    return this.getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0);
	};

	JSON_PRETTY() {
	    return this.getToken(MySqlParser.JSON_PRETTY, 0);
	};

	JSON_STORAGE_FREE() {
	    return this.getToken(MySqlParser.JSON_STORAGE_FREE, 0);
	};

	JSON_STORAGE_SIZE() {
	    return this.getToken(MySqlParser.JSON_STORAGE_SIZE, 0);
	};

	JSON_ARRAYAGG() {
	    return this.getToken(MySqlParser.JSON_ARRAYAGG, 0);
	};

	JSON_OBJECTAGG() {
	    return this.getToken(MySqlParser.JSON_OBJECTAGG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.enterFunctionNameBase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MySqlParserListener ) {
	        listener.exitFunctionNameBase(this);
		}
	}


}




MySqlParser.RootContext = RootContext; 
MySqlParser.SqlStatementsContext = SqlStatementsContext; 
MySqlParser.SqlStatementContext = SqlStatementContext; 
MySqlParser.EmptyStatement_Context = EmptyStatement_Context; 
MySqlParser.DdlStatementContext = DdlStatementContext; 
MySqlParser.DmlStatementContext = DmlStatementContext; 
MySqlParser.TransactionStatementContext = TransactionStatementContext; 
MySqlParser.ReplicationStatementContext = ReplicationStatementContext; 
MySqlParser.PreparedStatementContext = PreparedStatementContext; 
MySqlParser.CompoundStatementContext = CompoundStatementContext; 
MySqlParser.AdministrationStatementContext = AdministrationStatementContext; 
MySqlParser.UtilityStatementContext = UtilityStatementContext; 
MySqlParser.CreateDatabaseContext = CreateDatabaseContext; 
MySqlParser.CreateEventContext = CreateEventContext; 
MySqlParser.CreateIndexContext = CreateIndexContext; 
MySqlParser.CreateLogfileGroupContext = CreateLogfileGroupContext; 
MySqlParser.CreateProcedureContext = CreateProcedureContext; 
MySqlParser.CreateFunctionContext = CreateFunctionContext; 
MySqlParser.CreateRoleContext = CreateRoleContext; 
MySqlParser.CreateServerContext = CreateServerContext; 
MySqlParser.CreateTableContext = CreateTableContext; 
MySqlParser.CreateTablespaceInnodbContext = CreateTablespaceInnodbContext; 
MySqlParser.CreateTablespaceNdbContext = CreateTablespaceNdbContext; 
MySqlParser.CreateTriggerContext = CreateTriggerContext; 
MySqlParser.WithClauseContext = WithClauseContext; 
MySqlParser.CommonTableExpressionsContext = CommonTableExpressionsContext; 
MySqlParser.CteNameContext = CteNameContext; 
MySqlParser.CteColumnNameContext = CteColumnNameContext; 
MySqlParser.CreateViewContext = CreateViewContext; 
MySqlParser.CreateDatabaseOptionContext = CreateDatabaseOptionContext; 
MySqlParser.CharSetContext = CharSetContext; 
MySqlParser.CurrentUserExpressionContext = CurrentUserExpressionContext; 
MySqlParser.OwnerStatementContext = OwnerStatementContext; 
MySqlParser.ScheduleExpressionContext = ScheduleExpressionContext; 
MySqlParser.TimestampValueContext = TimestampValueContext; 
MySqlParser.IntervalExprContext = IntervalExprContext; 
MySqlParser.IntervalTypeContext = IntervalTypeContext; 
MySqlParser.EnableTypeContext = EnableTypeContext; 
MySqlParser.IndexTypeContext = IndexTypeContext; 
MySqlParser.IndexOptionContext = IndexOptionContext; 
MySqlParser.ProcedureParameterContext = ProcedureParameterContext; 
MySqlParser.FunctionParameterContext = FunctionParameterContext; 
MySqlParser.RoutineOptionContext = RoutineOptionContext; 
MySqlParser.ServerOptionContext = ServerOptionContext; 
MySqlParser.CreateDefinitionsContext = CreateDefinitionsContext; 
MySqlParser.CreateDefinitionContext = CreateDefinitionContext; 
MySqlParser.ColumnDefinitionContext = ColumnDefinitionContext; 
MySqlParser.ColumnConstraintContext = ColumnConstraintContext; 
MySqlParser.TableConstraintContext = TableConstraintContext; 
MySqlParser.ReferenceDefinitionContext = ReferenceDefinitionContext; 
MySqlParser.ReferenceActionContext = ReferenceActionContext; 
MySqlParser.ReferenceControlTypeContext = ReferenceControlTypeContext; 
MySqlParser.IndexColumnDefinitionContext = IndexColumnDefinitionContext; 
MySqlParser.TableOptionContext = TableOptionContext; 
MySqlParser.TableTypeContext = TableTypeContext; 
MySqlParser.TablespaceStorageContext = TablespaceStorageContext; 
MySqlParser.PartitionDefinitionsContext = PartitionDefinitionsContext; 
MySqlParser.PartitionFunctionDefinitionContext = PartitionFunctionDefinitionContext; 
MySqlParser.SubpartitionFunctionDefinitionContext = SubpartitionFunctionDefinitionContext; 
MySqlParser.PartitionDefinitionContext = PartitionDefinitionContext; 
MySqlParser.PartitionDefinerAtomContext = PartitionDefinerAtomContext; 
MySqlParser.PartitionDefinerVectorContext = PartitionDefinerVectorContext; 
MySqlParser.SubpartitionDefinitionContext = SubpartitionDefinitionContext; 
MySqlParser.PartitionOptionContext = PartitionOptionContext; 
MySqlParser.AlterDatabaseContext = AlterDatabaseContext; 
MySqlParser.AlterEventContext = AlterEventContext; 
MySqlParser.AlterFunctionContext = AlterFunctionContext; 
MySqlParser.AlterInstanceContext = AlterInstanceContext; 
MySqlParser.AlterLogfileGroupContext = AlterLogfileGroupContext; 
MySqlParser.AlterProcedureContext = AlterProcedureContext; 
MySqlParser.AlterServerContext = AlterServerContext; 
MySqlParser.AlterTableContext = AlterTableContext; 
MySqlParser.AlterTablespaceContext = AlterTablespaceContext; 
MySqlParser.AlterViewContext = AlterViewContext; 
MySqlParser.AlterSpecificationContext = AlterSpecificationContext; 
MySqlParser.AlterPartitionSpecificationContext = AlterPartitionSpecificationContext; 
MySqlParser.DropDatabaseContext = DropDatabaseContext; 
MySqlParser.DropEventContext = DropEventContext; 
MySqlParser.DropIndexContext = DropIndexContext; 
MySqlParser.DropLogfileGroupContext = DropLogfileGroupContext; 
MySqlParser.DropProcedureContext = DropProcedureContext; 
MySqlParser.DropFunctionContext = DropFunctionContext; 
MySqlParser.DropServerContext = DropServerContext; 
MySqlParser.DropTableContext = DropTableContext; 
MySqlParser.DropTablespaceContext = DropTablespaceContext; 
MySqlParser.DropTriggerContext = DropTriggerContext; 
MySqlParser.DropViewContext = DropViewContext; 
MySqlParser.DropRoleContext = DropRoleContext; 
MySqlParser.SetRoleContext = SetRoleContext; 
MySqlParser.RenameTableContext = RenameTableContext; 
MySqlParser.RenameTableClauseContext = RenameTableClauseContext; 
MySqlParser.TruncateTableContext = TruncateTableContext; 
MySqlParser.CallStatementContext = CallStatementContext; 
MySqlParser.DeleteStatementContext = DeleteStatementContext; 
MySqlParser.DoStatementContext = DoStatementContext; 
MySqlParser.HandlerStatementContext = HandlerStatementContext; 
MySqlParser.InsertStatementContext = InsertStatementContext; 
MySqlParser.LoadDataStatementContext = LoadDataStatementContext; 
MySqlParser.LoadXmlStatementContext = LoadXmlStatementContext; 
MySqlParser.ReplaceStatementContext = ReplaceStatementContext; 
MySqlParser.SelectStatementContext = SelectStatementContext; 
MySqlParser.UpdateStatementContext = UpdateStatementContext; 
MySqlParser.ValuesStatementContext = ValuesStatementContext; 
MySqlParser.InsertStatementValueContext = InsertStatementValueContext; 
MySqlParser.UpdatedElementContext = UpdatedElementContext; 
MySqlParser.AssignmentFieldContext = AssignmentFieldContext; 
MySqlParser.LockClauseContext = LockClauseContext; 
MySqlParser.SingleDeleteStatementContext = SingleDeleteStatementContext; 
MySqlParser.MultipleDeleteStatementContext = MultipleDeleteStatementContext; 
MySqlParser.HandlerOpenStatementContext = HandlerOpenStatementContext; 
MySqlParser.HandlerReadIndexStatementContext = HandlerReadIndexStatementContext; 
MySqlParser.HandlerReadStatementContext = HandlerReadStatementContext; 
MySqlParser.HandlerCloseStatementContext = HandlerCloseStatementContext; 
MySqlParser.SingleUpdateStatementContext = SingleUpdateStatementContext; 
MySqlParser.MultipleUpdateStatementContext = MultipleUpdateStatementContext; 
MySqlParser.OrderByClauseContext = OrderByClauseContext; 
MySqlParser.OrderByExpressionContext = OrderByExpressionContext; 
MySqlParser.TableSourcesContext = TableSourcesContext; 
MySqlParser.TableSourceContext = TableSourceContext; 
MySqlParser.TableSourceItemContext = TableSourceItemContext; 
MySqlParser.IndexHintContext = IndexHintContext; 
MySqlParser.IndexHintTypeContext = IndexHintTypeContext; 
MySqlParser.JoinPartContext = JoinPartContext; 
MySqlParser.JoinSpecContext = JoinSpecContext; 
MySqlParser.QueryExpressionContext = QueryExpressionContext; 
MySqlParser.QueryExpressionNointoContext = QueryExpressionNointoContext; 
MySqlParser.QuerySpecificationContext = QuerySpecificationContext; 
MySqlParser.QuerySpecificationNointoContext = QuerySpecificationNointoContext; 
MySqlParser.UnionParenthesisContext = UnionParenthesisContext; 
MySqlParser.UnionStatementContext = UnionStatementContext; 
MySqlParser.LateralStatementContext = LateralStatementContext; 
MySqlParser.JsonTableContext = JsonTableContext; 
MySqlParser.JsonColumnListContext = JsonColumnListContext; 
MySqlParser.JsonColumnContext = JsonColumnContext; 
MySqlParser.JsonOnEmptyContext = JsonOnEmptyContext; 
MySqlParser.JsonOnErrorContext = JsonOnErrorContext; 
MySqlParser.SelectSpecContext = SelectSpecContext; 
MySqlParser.SelectElementsContext = SelectElementsContext; 
MySqlParser.SelectElementContext = SelectElementContext; 
MySqlParser.SelectIntoExpressionContext = SelectIntoExpressionContext; 
MySqlParser.SelectFieldsIntoContext = SelectFieldsIntoContext; 
MySqlParser.SelectLinesIntoContext = SelectLinesIntoContext; 
MySqlParser.FromClauseContext = FromClauseContext; 
MySqlParser.GroupByClauseContext = GroupByClauseContext; 
MySqlParser.HavingClauseContext = HavingClauseContext; 
MySqlParser.WindowClauseContext = WindowClauseContext; 
MySqlParser.GroupByItemContext = GroupByItemContext; 
MySqlParser.LimitClauseContext = LimitClauseContext; 
MySqlParser.LimitClauseAtomContext = LimitClauseAtomContext; 
MySqlParser.StartTransactionContext = StartTransactionContext; 
MySqlParser.BeginWorkContext = BeginWorkContext; 
MySqlParser.CommitWorkContext = CommitWorkContext; 
MySqlParser.RollbackWorkContext = RollbackWorkContext; 
MySqlParser.SavepointStatementContext = SavepointStatementContext; 
MySqlParser.RollbackStatementContext = RollbackStatementContext; 
MySqlParser.ReleaseStatementContext = ReleaseStatementContext; 
MySqlParser.LockTablesContext = LockTablesContext; 
MySqlParser.UnlockTablesContext = UnlockTablesContext; 
MySqlParser.SetAutocommitStatementContext = SetAutocommitStatementContext; 
MySqlParser.SetTransactionStatementContext = SetTransactionStatementContext; 
MySqlParser.TransactionModeContext = TransactionModeContext; 
MySqlParser.LockTableElementContext = LockTableElementContext; 
MySqlParser.LockActionContext = LockActionContext; 
MySqlParser.TransactionOptionContext = TransactionOptionContext; 
MySqlParser.TransactionLevelContext = TransactionLevelContext; 
MySqlParser.ChangeMasterContext = ChangeMasterContext; 
MySqlParser.ChangeReplicationFilterContext = ChangeReplicationFilterContext; 
MySqlParser.PurgeBinaryLogsContext = PurgeBinaryLogsContext; 
MySqlParser.ResetMasterContext = ResetMasterContext; 
MySqlParser.ResetSlaveContext = ResetSlaveContext; 
MySqlParser.StartSlaveContext = StartSlaveContext; 
MySqlParser.StopSlaveContext = StopSlaveContext; 
MySqlParser.StartGroupReplicationContext = StartGroupReplicationContext; 
MySqlParser.StopGroupReplicationContext = StopGroupReplicationContext; 
MySqlParser.MasterOptionContext = MasterOptionContext; 
MySqlParser.StringMasterOptionContext = StringMasterOptionContext; 
MySqlParser.DecimalMasterOptionContext = DecimalMasterOptionContext; 
MySqlParser.BoolMasterOptionContext = BoolMasterOptionContext; 
MySqlParser.ChannelOptionContext = ChannelOptionContext; 
MySqlParser.ReplicationFilterContext = ReplicationFilterContext; 
MySqlParser.TablePairContext = TablePairContext; 
MySqlParser.ThreadTypeContext = ThreadTypeContext; 
MySqlParser.UntilOptionContext = UntilOptionContext; 
MySqlParser.ConnectionOptionContext = ConnectionOptionContext; 
MySqlParser.GtuidSetContext = GtuidSetContext; 
MySqlParser.XaStartTransactionContext = XaStartTransactionContext; 
MySqlParser.XaEndTransactionContext = XaEndTransactionContext; 
MySqlParser.XaPrepareStatementContext = XaPrepareStatementContext; 
MySqlParser.XaCommitWorkContext = XaCommitWorkContext; 
MySqlParser.XaRollbackWorkContext = XaRollbackWorkContext; 
MySqlParser.XaRecoverWorkContext = XaRecoverWorkContext; 
MySqlParser.PrepareStatementContext = PrepareStatementContext; 
MySqlParser.ExecuteStatementContext = ExecuteStatementContext; 
MySqlParser.DeallocatePrepareContext = DeallocatePrepareContext; 
MySqlParser.RoutineBodyContext = RoutineBodyContext; 
MySqlParser.BlockStatementContext = BlockStatementContext; 
MySqlParser.CaseStatementContext = CaseStatementContext; 
MySqlParser.IfStatementContext = IfStatementContext; 
MySqlParser.IterateStatementContext = IterateStatementContext; 
MySqlParser.LeaveStatementContext = LeaveStatementContext; 
MySqlParser.LoopStatementContext = LoopStatementContext; 
MySqlParser.RepeatStatementContext = RepeatStatementContext; 
MySqlParser.ReturnStatementContext = ReturnStatementContext; 
MySqlParser.WhileStatementContext = WhileStatementContext; 
MySqlParser.CursorStatementContext = CursorStatementContext; 
MySqlParser.DeclareVariableContext = DeclareVariableContext; 
MySqlParser.DeclareConditionContext = DeclareConditionContext; 
MySqlParser.DeclareCursorContext = DeclareCursorContext; 
MySqlParser.DeclareHandlerContext = DeclareHandlerContext; 
MySqlParser.HandlerConditionValueContext = HandlerConditionValueContext; 
MySqlParser.ProcedureSqlStatementContext = ProcedureSqlStatementContext; 
MySqlParser.CaseAlternativeContext = CaseAlternativeContext; 
MySqlParser.ElifAlternativeContext = ElifAlternativeContext; 
MySqlParser.AlterUserContext = AlterUserContext; 
MySqlParser.CreateUserContext = CreateUserContext; 
MySqlParser.DropUserContext = DropUserContext; 
MySqlParser.GrantStatementContext = GrantStatementContext; 
MySqlParser.RoleOptionContext = RoleOptionContext; 
MySqlParser.GrantProxyContext = GrantProxyContext; 
MySqlParser.RenameUserContext = RenameUserContext; 
MySqlParser.RevokeStatementContext = RevokeStatementContext; 
MySqlParser.RevokeProxyContext = RevokeProxyContext; 
MySqlParser.SetPasswordStatementContext = SetPasswordStatementContext; 
MySqlParser.UserSpecificationContext = UserSpecificationContext; 
MySqlParser.UserAuthOptionContext = UserAuthOptionContext; 
MySqlParser.AuthOptionClauseContext = AuthOptionClauseContext; 
MySqlParser.AuthenticationRuleContext = AuthenticationRuleContext; 
MySqlParser.TlsOptionContext = TlsOptionContext; 
MySqlParser.UserResourceOptionContext = UserResourceOptionContext; 
MySqlParser.UserPasswordOptionContext = UserPasswordOptionContext; 
MySqlParser.UserLockOptionContext = UserLockOptionContext; 
MySqlParser.PrivelegeClauseContext = PrivelegeClauseContext; 
MySqlParser.PrivilegeContext = PrivilegeContext; 
MySqlParser.PrivilegeLevelContext = PrivilegeLevelContext; 
MySqlParser.RenameUserClauseContext = RenameUserClauseContext; 
MySqlParser.AnalyzeTableContext = AnalyzeTableContext; 
MySqlParser.CheckTableContext = CheckTableContext; 
MySqlParser.ChecksumTableContext = ChecksumTableContext; 
MySqlParser.OptimizeTableContext = OptimizeTableContext; 
MySqlParser.RepairTableContext = RepairTableContext; 
MySqlParser.CheckTableOptionContext = CheckTableOptionContext; 
MySqlParser.CreateUdfunctionContext = CreateUdfunctionContext; 
MySqlParser.InstallPluginContext = InstallPluginContext; 
MySqlParser.UninstallPluginContext = UninstallPluginContext; 
MySqlParser.SetStatementContext = SetStatementContext; 
MySqlParser.ShowStatementContext = ShowStatementContext; 
MySqlParser.VariableClauseContext = VariableClauseContext; 
MySqlParser.ShowCommonEntityContext = ShowCommonEntityContext; 
MySqlParser.ShowFilterContext = ShowFilterContext; 
MySqlParser.ShowGlobalInfoClauseContext = ShowGlobalInfoClauseContext; 
MySqlParser.ShowSchemaEntityContext = ShowSchemaEntityContext; 
MySqlParser.ShowProfileTypeContext = ShowProfileTypeContext; 
MySqlParser.BinlogStatementContext = BinlogStatementContext; 
MySqlParser.CacheIndexStatementContext = CacheIndexStatementContext; 
MySqlParser.FlushStatementContext = FlushStatementContext; 
MySqlParser.KillStatementContext = KillStatementContext; 
MySqlParser.LoadIndexIntoCacheContext = LoadIndexIntoCacheContext; 
MySqlParser.ResetStatementContext = ResetStatementContext; 
MySqlParser.ShutdownStatementContext = ShutdownStatementContext; 
MySqlParser.TableIndexesContext = TableIndexesContext; 
MySqlParser.FlushOptionContext = FlushOptionContext; 
MySqlParser.FlushTableOptionContext = FlushTableOptionContext; 
MySqlParser.LoadedTableIndexesContext = LoadedTableIndexesContext; 
MySqlParser.SimpleDescribeStatementContext = SimpleDescribeStatementContext; 
MySqlParser.FullDescribeStatementContext = FullDescribeStatementContext; 
MySqlParser.HelpStatementContext = HelpStatementContext; 
MySqlParser.UseStatementContext = UseStatementContext; 
MySqlParser.SignalStatementContext = SignalStatementContext; 
MySqlParser.ResignalStatementContext = ResignalStatementContext; 
MySqlParser.SignalConditionInformationContext = SignalConditionInformationContext; 
MySqlParser.WithStatementContext = WithStatementContext; 
MySqlParser.TableStatementContext = TableStatementContext; 
MySqlParser.DiagnosticsStatementContext = DiagnosticsStatementContext; 
MySqlParser.DiagnosticsConditionInformationNameContext = DiagnosticsConditionInformationNameContext; 
MySqlParser.DescribeObjectClauseContext = DescribeObjectClauseContext; 
MySqlParser.FullIdContext = FullIdContext; 
MySqlParser.TableNameContext = TableNameContext; 
MySqlParser.RoleNameContext = RoleNameContext; 
MySqlParser.FullColumnNameContext = FullColumnNameContext; 
MySqlParser.IndexColumnNameContext = IndexColumnNameContext; 
MySqlParser.SimpleUserNameContext = SimpleUserNameContext; 
MySqlParser.HostNameContext = HostNameContext; 
MySqlParser.UserNameContext = UserNameContext; 
MySqlParser.MysqlVariableContext = MysqlVariableContext; 
MySqlParser.CharsetNameContext = CharsetNameContext; 
MySqlParser.CollationNameContext = CollationNameContext; 
MySqlParser.EngineNameContext = EngineNameContext; 
MySqlParser.EngineNameBaseContext = EngineNameBaseContext; 
MySqlParser.UuidSetContext = UuidSetContext; 
MySqlParser.XidContext = XidContext; 
MySqlParser.XuidStringIdContext = XuidStringIdContext; 
MySqlParser.AuthPluginContext = AuthPluginContext; 
MySqlParser.UidContext = UidContext; 
MySqlParser.SimpleIdContext = SimpleIdContext; 
MySqlParser.DottedIdContext = DottedIdContext; 
MySqlParser.DecimalLiteralContext = DecimalLiteralContext; 
MySqlParser.FileSizeLiteralContext = FileSizeLiteralContext; 
MySqlParser.StringLiteralContext = StringLiteralContext; 
MySqlParser.BooleanLiteralContext = BooleanLiteralContext; 
MySqlParser.HexadecimalLiteralContext = HexadecimalLiteralContext; 
MySqlParser.NullNotnullContext = NullNotnullContext; 
MySqlParser.ConstantContext = ConstantContext; 
MySqlParser.DataTypeContext = DataTypeContext; 
MySqlParser.CollectionOptionsContext = CollectionOptionsContext; 
MySqlParser.ConvertedDataTypeContext = ConvertedDataTypeContext; 
MySqlParser.LengthOneDimensionContext = LengthOneDimensionContext; 
MySqlParser.LengthTwoDimensionContext = LengthTwoDimensionContext; 
MySqlParser.LengthTwoOptionalDimensionContext = LengthTwoOptionalDimensionContext; 
MySqlParser.UidListContext = UidListContext; 
MySqlParser.FullColumnNameListContext = FullColumnNameListContext; 
MySqlParser.TablesContext = TablesContext; 
MySqlParser.IndexColumnNamesContext = IndexColumnNamesContext; 
MySqlParser.ExpressionsContext = ExpressionsContext; 
MySqlParser.ExpressionsWithDefaultsContext = ExpressionsWithDefaultsContext; 
MySqlParser.ConstantsContext = ConstantsContext; 
MySqlParser.SimpleStringsContext = SimpleStringsContext; 
MySqlParser.UserVariablesContext = UserVariablesContext; 
MySqlParser.DefaultValueContext = DefaultValueContext; 
MySqlParser.CurrentTimestampContext = CurrentTimestampContext; 
MySqlParser.ExpressionOrDefaultContext = ExpressionOrDefaultContext; 
MySqlParser.IfExistsContext = IfExistsContext; 
MySqlParser.IfNotExistsContext = IfNotExistsContext; 
MySqlParser.OrReplaceContext = OrReplaceContext; 
MySqlParser.WaitNowaitClauseContext = WaitNowaitClauseContext; 
MySqlParser.FunctionCallContext = FunctionCallContext; 
MySqlParser.SpecificFunctionContext = SpecificFunctionContext; 
MySqlParser.CaseFuncAlternativeContext = CaseFuncAlternativeContext; 
MySqlParser.LevelsInWeightStringContext = LevelsInWeightStringContext; 
MySqlParser.LevelInWeightListElementContext = LevelInWeightListElementContext; 
MySqlParser.AggregateWindowedFunctionContext = AggregateWindowedFunctionContext; 
MySqlParser.NonAggregateWindowedFunctionContext = NonAggregateWindowedFunctionContext; 
MySqlParser.OverClauseContext = OverClauseContext; 
MySqlParser.WindowSpecContext = WindowSpecContext; 
MySqlParser.WindowNameContext = WindowNameContext; 
MySqlParser.FrameClauseContext = FrameClauseContext; 
MySqlParser.FrameUnitsContext = FrameUnitsContext; 
MySqlParser.FrameExtentContext = FrameExtentContext; 
MySqlParser.FrameBetweenContext = FrameBetweenContext; 
MySqlParser.FrameRangeContext = FrameRangeContext; 
MySqlParser.PartitionClauseContext = PartitionClauseContext; 
MySqlParser.ScalarFunctionNameContext = ScalarFunctionNameContext; 
MySqlParser.PasswordFunctionClauseContext = PasswordFunctionClauseContext; 
MySqlParser.FunctionArgsContext = FunctionArgsContext; 
MySqlParser.FunctionArgContext = FunctionArgContext; 
MySqlParser.ExpressionContext = ExpressionContext; 
MySqlParser.PredicateContext = PredicateContext; 
MySqlParser.ExpressionAtomContext = ExpressionAtomContext; 
MySqlParser.UnaryOperatorContext = UnaryOperatorContext; 
MySqlParser.ComparisonOperatorContext = ComparisonOperatorContext; 
MySqlParser.LogicalOperatorContext = LogicalOperatorContext; 
MySqlParser.BitOperatorContext = BitOperatorContext; 
MySqlParser.MultOperatorContext = MultOperatorContext; 
MySqlParser.AddOperatorContext = AddOperatorContext; 
MySqlParser.JsonOperatorContext = JsonOperatorContext; 
MySqlParser.CharsetNameBaseContext = CharsetNameBaseContext; 
MySqlParser.TransactionLevelBaseContext = TransactionLevelBaseContext; 
MySqlParser.PrivilegesBaseContext = PrivilegesBaseContext; 
MySqlParser.IntervalTypeBaseContext = IntervalTypeBaseContext; 
MySqlParser.DataTypeBaseContext = DataTypeBaseContext; 
MySqlParser.KeywordsCanBeIdContext = KeywordsCanBeIdContext; 
MySqlParser.FunctionNameBaseContext = FunctionNameBaseContext; 
